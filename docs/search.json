[
  {
    "objectID": "posts/DX/MP/2023-08-24-00. MP (1).html",
    "href": "posts/DX/MP/2023-08-24-00. MP (1).html",
    "title": "00. MP (1)",
    "section": "",
    "text": "pandas와 numpy 라라이브러리를 불러오기\n\n\n\nCode\nimport pandas as pd\nimport numpy as np\n\n\n\n\n\n- 데이터를 불러온 후 상위 10개 행 확인\n\n\nCode\nimport openpyxl\ndata = pd.read_excel(\"data04.xlsx\")\ndata.head(10)\n\n\n\n\n\n\n\n\n\nID\nSeq\nGender\nBirth_Year\nLC_Score\nRC_Score\nTotal Score\n학습목표\n학습방법\n강의 학습 교재 유형\n학습빈도\n기출문제 공부 횟수\n취약분야 인지 여부\n토익 모의테스트 횟수\nStudent ID\n\n\n\n\n0\n1\n1\nM\n1973\n181\n173\n354\n자기계발\n참고서\n일반적인 영어 텍스트 기반 교재\n주3-4회\n6.0\n알고 있지 않음\n6\nstudent1\n\n\n1\n1\n2\nM\n1973\n227\n213\n440\n자기계발\n오프라인강의\n뉴스/이슈 기반 교재\n주1-2회\n3.0\n알고 있음\n5\nstudent1\n\n\n2\n1\n3\nM\n1973\n345\n336\n681\n승진\n온라인강의\n영상 교재\n주5-6회\n7.0\n알고 있음\n10\nstudent1\n\n\n3\n2\n1\nF\n1982\n330\n290\n620\n자기계발\n오프라인강의\n뉴스/이슈 기반 교재\n매일(주 7회)\n8.0\n알고 있지 않음\n19\nstudent2\n\n\n4\n2\n2\nF\n1982\n354\n339\n693\n승진\n온라인강의\n영상 교재\n주5-6회\n2.0\n알고 있음\n15\nstudent2\n\n\n5\n2\n3\nF\n1982\n380\n368\n748\n승진\n온라인강의\n뉴스/이슈 기반 교재\n주5-6회\n4.0\n알고 있음\n14\nstudent2\n\n\n6\n3\n1\nF\n1995\n367\n309\n676\n취업\n온라인강의\n영상 교재\n매일(주 7회)\n9.0\n알고 있지 않음\n7\nstudent3\n\n\n7\n3\n2\nF\n1995\n396\n365\n761\n자기계발\n온라인강의\n영상 교재\n주3-4회\n7.0\n알고 있지 않음\n6\nstudent3\n\n\n8\n3\n3\nF\n1995\n416\n382\n798\n자기계발\n참고서\n일반적인 영어 텍스트 기반 교재\n주1-2회\n4.0\n알고 있음\n4\nstudent3\n\n\n9\n4\n1\nM\n1987\n470\n285\n755\n자기계발\n온라인강의\n뉴스/이슈 기반 교재\n주1-2회\n7.0\n알고 있지 않음\n4\nstudent4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nprint(f\"전체 데이터는 {data.shape[0]}개의 행과 {data.shape[1]}열로 구성되어 있습니다.\")\n\n\n전체 데이터는 1500개의 행과 15열로 구성되어 있습니다.\n\n\n\n\n\n\n\nCode\ndata.tail(5)\n\n\n\n\n\n\n\n\n\nID\nSeq\nGender\nBirth_Year\nLC_Score\nRC_Score\nTotal Score\n학습목표\n학습방법\n강의 학습 교재 유형\n학습빈도\n기출문제 공부 횟수\n취약분야 인지 여부\n토익 모의테스트 횟수\nStudent ID\n\n\n\n\n1495\n499\n2\nF\n1990\n378\n326\n704\n승진\n온라인강의\n뉴스/이슈 기반 교재\n주5-6회\n6.0\n알고 있지 않음\n12\nstudent499\n\n\n1496\n499\n3\nF\n1990\n422\n370\n792\n자기계발\n오프라인강의\n비즈니스 시뮬레이션(Role Play)\n주3-4회\n4.0\n알고 있음\n7\nstudent499\n\n\n1497\n500\n1\nM\n1984\n169\n188\n357\n자기계발\n참고서\n일반적인 영어 텍스트 기반 교재\n주3-4회\n8.0\n알고 있지 않음\n2\nstudent500\n\n\n1498\n500\n2\nM\n1984\n172\n190\n362\n자기계발\n참고서\n뉴스/이슈 기반 교재\n매일(주 7회)\n10.0\n알고 있음\n16\nstudent500\n\n\n1499\n500\n3\nM\n1984\n235\n226\n461\n승진\n오프라인강의\n비즈니스 시뮬레이션(Role Play)\n주5-6회\n7.0\n알고 있음\n15\nstudent500\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nprint(list(data.columns))\n\n\n['ID', 'Seq', 'Gender', 'Birth_Year', 'LC_Score', 'RC_Score', 'Total Score', '학습목표', '학습방법', '강의 학습 교재 유형', '학습빈도', '기출문제 공부 횟수', '취약분야 인지 여부', '토익 모의테스트 횟수', 'Student ID']\n\n\n\n\n\n\n\nCode\nprint(data.info())\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1500 entries, 0 to 1499\nData columns (total 15 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   ID           1500 non-null   int64  \n 1   Seq          1500 non-null   int64  \n 2   Gender       1500 non-null   object \n 3   Birth_Year   1500 non-null   int64  \n 4   LC_Score     1500 non-null   int64  \n 5   RC_Score     1500 non-null   int64  \n 6   Total Score  1500 non-null   int64  \n 7   학습목표         1500 non-null   object \n 8   학습방법         1500 non-null   object \n 9   강의 학습 교재 유형  1500 non-null   object \n 10  학습빈도         1500 non-null   object \n 11  기출문제 공부 횟수   1497 non-null   float64\n 12  취약분야 인지 여부   1500 non-null   object \n 13  토익 모의테스트 횟수  1500 non-null   int64  \n 14  Student ID   1500 non-null   object \ndtypes: float64(1), int64(7), object(7)\nmemory usage: 175.9+ KB\nNone\n\n\n\n\n\n\n기출문제 공부횟수에서 총 3개의 결측치가 확인된다.\n\n\n\nCode\ndata.isna().sum()\n\n\nID             0\nSeq            0\nGender         0\nBirth_Year     0\nLC_Score       0\nRC_Score       0\nTotal Score    0\n학습목표           0\n학습방법           0\n강의 학습 교재 유형    0\n학습빈도           0\n기출문제 공부 횟수     3\n취약분야 인지 여부     0\n토익 모의테스트 횟수    0\nStudent ID     0\ndtype: int64\n\n\n\n\n\n\n\nCode\ndata.describe()\n\n\n\n\n\n\n\n\n\nID\nSeq\nBirth_Year\nLC_Score\nRC_Score\nTotal Score\n기출문제 공부 횟수\n토익 모의테스트 횟수\n\n\n\n\ncount\n1500.000000\n1500.000000\n1500.000000\n1500.000000\n1500.000000\n1500.000000\n1497.000000\n1500.000000\n\n\nmean\n250.500000\n2.000000\n1992.906000\n340.079333\n340.164667\n680.260667\n5.286573\n9.784000\n\n\nstd\n144.385415\n0.816769\n8.218893\n86.807523\n87.143890\n159.110652\n2.797303\n5.324181\n\n\nmin\n1.000000\n1.000000\n1973.000000\n105.000000\n84.000000\n250.000000\n1.000000\n1.000000\n\n\n25%\n125.750000\n1.000000\n1986.750000\n279.000000\n280.000000\n564.000000\n3.000000\n5.000000\n\n\n50%\n250.500000\n2.000000\n1992.500000\n335.000000\n337.000000\n687.000000\n5.000000\n9.000000\n\n\n75%\n375.250000\n3.000000\n2000.000000\n404.000000\n406.000000\n800.000000\n8.000000\n14.000000\n\n\nmax\n500.000000\n3.000000\n2007.000000\n495.000000\n495.000000\n990.000000\n10.000000\n20.000000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nprint(data.dtypes)\n\n\nID               int64\nSeq              int64\nGender          object\nBirth_Year       int64\nLC_Score         int64\nRC_Score         int64\nTotal Score      int64\n학습목표            object\n학습방법            object\n강의 학습 교재 유형     object\n학습빈도            object\n기출문제 공부 횟수     float64\n취약분야 인지 여부      object\n토익 모의테스트 횟수      int64\nStudent ID      object\ndtype: object\n\n\n\n\n\n\n\nCode\ndata.drop(\"Student ID\",axis=1,inplace=True)\n\n\n\n\nCode\ndata.head()\n\n\n\n\n\n\n\n\n\nID\nSeq\nGender\nBirth_Year\nLC_Score\nRC_Score\nTotal Score\n학습목표\n학습방법\n강의 학습 교재 유형\n학습빈도\n기출문제 공부 횟수\n취약분야 인지 여부\n토익 모의테스트 횟수\n\n\n\n\n0\n1\n1\nM\n1973\n181\n173\n354\n자기계발\n참고서\n일반적인 영어 텍스트 기반 교재\n주3-4회\n6.0\n알고 있지 않음\n6\n\n\n1\n1\n2\nM\n1973\n227\n213\n440\n자기계발\n오프라인강의\n뉴스/이슈 기반 교재\n주1-2회\n3.0\n알고 있음\n5\n\n\n2\n1\n3\nM\n1973\n345\n336\n681\n승진\n온라인강의\n영상 교재\n주5-6회\n7.0\n알고 있음\n10\n\n\n3\n2\n1\nF\n1982\n330\n290\n620\n자기계발\n오프라인강의\n뉴스/이슈 기반 교재\n매일(주 7회)\n8.0\n알고 있지 않음\n19\n\n\n4\n2\n2\nF\n1982\n354\n339\n693\n승진\n온라인강의\n영상 교재\n주5-6회\n2.0\n알고 있음\n15\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nlen(data.columns)\n\n\n14\n\n\n\n\n\n\n\nCode\ndata[\"기출문제 공부 횟수\"].fillna(0,inplace=True)\n\n\n\n\n\n\n\nCode\ndata[\"기출문제 공부 횟수\"].unique()\n\n\narray([ 6.,  3.,  7.,  8.,  2.,  4.,  9.,  5., 10.,  1.,  0.])\n\n\n\n\n\n\ndf1(개인정보 데이터) features : 'ID', 'Gender', 'Birth_Year'\ndf2(토익시험 학습정보 데이터) features : 'ID','Seq', 'LC_Score', 'RC_Score', 'Total Score', '학습목표', '학습방법', '강의 학습 교재 유형', '학습빈도', '기출문제 공부 횟수', '취약분야 인지 여부', '토익 모의테스트 횟수'\n\n\n\nCode\ncol_1 = ['ID', 'Gender', 'Birth_Year']\ncol_2 = ['ID','Seq', 'LC_Score', 'RC_Score', 'Total Score',\n         '학습목표', '학습방법', '강의 학습 교재 유형', '학습빈도',\n         '기출문제 공부 횟수', '취약분야 인지 여부', '토익 모의테스트 횟수']\n\ndf1 = data.loc[:, map(lambda x : x  in col_1,data.columns )]\ndf2 = data.loc[:, map(lambda x : x  in col_2,data.columns )]\n\nprint(f\"df1의 컬럼 : {list(df1.columns)}\\n\")\nprint(\"*\"*100+\"\\n\")\nprint(f\"df2의 컬럼 : {list(df2.columns)}\")\n\n\ndf1의 컬럼 : ['ID', 'Gender', 'Birth_Year']\n\n****************************************************************************************************\n\ndf2의 컬럼 : ['ID', 'Seq', 'LC_Score', 'RC_Score', 'Total Score', '학습목표', '학습방법', '강의 학습 교재 유형', '학습빈도', '기출문제 공부 횟수', '취약분야 인지 여부', '토익 모의테스트 횟수']\n\n\n\n\n\n\n\n\nCode\ndf1 = df1.drop_duplicates()\n\n\n\n\nCode\ndf1.head()\n\n\n\n\n\n\n\n\n\nID\nGender\nBirth_Year\n\n\n\n\n0\n1\nM\n1973\n\n\n3\n2\nF\n1982\n\n\n6\n3\nF\n1995\n\n\n9\n4\nM\n1987\n\n\n12\n5\nM\n1994\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntemp = df2.loc[map(lambda x : x == 3,df2.Seq), :]\ntemp.Seq.unique()\n\n\narray([3], dtype=int64)\n\n\n\n\nCode\ntemp.head()\n\n\n\n\n\n\n\n\n\nID\nSeq\nLC_Score\nRC_Score\nTotal Score\n학습목표\n학습방법\n강의 학습 교재 유형\n학습빈도\n기출문제 공부 횟수\n취약분야 인지 여부\n토익 모의테스트 횟수\n\n\n\n\n2\n1\n3\n345\n336\n681\n승진\n온라인강의\n영상 교재\n주5-6회\n7.0\n알고 있음\n10\n\n\n5\n2\n3\n380\n368\n748\n승진\n온라인강의\n뉴스/이슈 기반 교재\n주5-6회\n4.0\n알고 있음\n14\n\n\n8\n3\n3\n416\n382\n798\n자기계발\n참고서\n일반적인 영어 텍스트 기반 교재\n주1-2회\n4.0\n알고 있음\n4\n\n\n11\n4\n3\n495\n397\n892\n승진\n온라인강의\n뉴스/이슈 기반 교재\n주3-4회\n9.0\n알고 있음\n8\n\n\n14\n5\n3\n398\n437\n835\n자기계발\n온라인강의\n영상 교재\n주3-4회\n6.0\n알고 있음\n4\n\n\n\n\n\n\n\n\n\n\n\nLC_Score, RC_Score, Total Score를 각각 ‘3st_LC_Score’, ‘3st_RC_Score’, ’3st_Total_Score’로 변경하고 확인해주세요.\n\n\n\nCode\ntemp = temp.rename(columns = {\"LC_Score\" : \"3st_LC_SCcore\",\n                        \"RC_Score\" : \"3st_RC_SCcore\",\n                        \"Total Score\" : \"3st_Total_SCcore\",\n                        })\ntemp.head()\n\n\n\n\n\n\n\n\n\nID\nSeq\n3st_LC_SCcore\n3st_RC_SCcore\n3st_Total_SCcore\n학습목표\n학습방법\n강의 학습 교재 유형\n학습빈도\n기출문제 공부 횟수\n취약분야 인지 여부\n토익 모의테스트 횟수\n\n\n\n\n2\n1\n3\n345\n336\n681\n승진\n온라인강의\n영상 교재\n주5-6회\n7.0\n알고 있음\n10\n\n\n5\n2\n3\n380\n368\n748\n승진\n온라인강의\n뉴스/이슈 기반 교재\n주5-6회\n4.0\n알고 있음\n14\n\n\n8\n3\n3\n416\n382\n798\n자기계발\n참고서\n일반적인 영어 텍스트 기반 교재\n주1-2회\n4.0\n알고 있음\n4\n\n\n11\n4\n3\n495\n397\n892\n승진\n온라인강의\n뉴스/이슈 기반 교재\n주3-4회\n9.0\n알고 있음\n8\n\n\n14\n5\n3\n398\n437\n835\n자기계발\n온라인강의\n영상 교재\n주3-4회\n6.0\n알고 있음\n4\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntemp1 = df2.loc[map(lambda x : x == 1,df2.Seq), :]\ntemp1.Seq.unique()\n\n\narray([1], dtype=int64)\n\n\n\n\n\n\n\nCode\ntemp1 = temp1.loc[:,['ID','LC_Score','RC_Score','Total Score']]\n\n\n\n\n\n\nLC_Score, RC_Score, Total Score를 각각 ‘1st_LC_Score’, ‘1st_RC_Score’, ’1st_Total_Score’로 변경하고 확인해주세요.\n\n\n\nCode\ntemp1 = temp1.rename(columns = {\"LC_Score\" : \"1st_LC_SCcore\",\n                        \"RC_Score\" : \"1st_RC_SCcore\",\n                        \"Total Score\" : \"1st_Total_SCcore\",\n                        })\ntemp1.head()\n\n\n\n\n\n\n\n\n\nID\n1st_LC_SCcore\n1st_RC_SCcore\n1st_Total_SCcore\n\n\n\n\n0\n1\n181\n173\n354\n\n\n3\n2\n330\n290\n620\n\n\n6\n3\n367\n309\n676\n\n\n9\n4\n470\n285\n755\n\n\n12\n5\n273\n372\n645\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntemp2 = df2.loc[map(lambda x : x == 2,df2.Seq), :]\ntemp2.Seq.unique()\n\n\narray([2], dtype=int64)\n\n\n\n\n\n\n\nCode\ntemp2 =  temp2.loc[:,['ID','LC_Score','RC_Score','Total Score']]\n\n\n\n\n\n\n\nCode\ntemp2 = temp2.rename(columns = {\"LC_Score\" : \"2st_LC_SCcore\",\n                        \"RC_Score\" : \"2st_RC_SCcore\",\n                        \"Total Score\" : \"2st_Total_SCcore\",\n                        })\ntemp2.head()\n\n\n\n\n\n\n\n\n\nID\n2st_LC_SCcore\n2st_RC_SCcore\n2st_Total_SCcore\n\n\n\n\n1\n1\n227\n213\n440\n\n\n4\n2\n354\n339\n693\n\n\n7\n3\n396\n365\n761\n\n\n10\n4\n495\n341\n836\n\n\n13\n5\n314\n426\n740\n\n\n\n\n\n\n\n\n\n\n- 합친 후 ’score_merged_data1’에 할당\n\n\nCode\nscore_merged_data1 = pd.merge(temp,temp1)\n\n\n\n\n\n\n\nCode\nscore_merged_data2 = pd.merge(score_merged_data1,temp2)\n\n\n\n\n\n\n\nCode\nprint(score_merged_data2.info())\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 500 entries, 0 to 499\nData columns (total 18 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   ID                500 non-null    int64  \n 1   Seq               500 non-null    int64  \n 2   3st_LC_SCcore     500 non-null    int64  \n 3   3st_RC_SCcore     500 non-null    int64  \n 4   3st_Total_SCcore  500 non-null    int64  \n 5   학습목표              500 non-null    object \n 6   학습방법              500 non-null    object \n 7   강의 학습 교재 유형       500 non-null    object \n 8   학습빈도              500 non-null    object \n 9   기출문제 공부 횟수        500 non-null    float64\n 10  취약분야 인지 여부        500 non-null    object \n 11  토익 모의테스트 횟수       500 non-null    int64  \n 12  1st_LC_SCcore     500 non-null    int64  \n 13  1st_RC_SCcore     500 non-null    int64  \n 14  1st_Total_SCcore  500 non-null    int64  \n 15  2st_LC_SCcore     500 non-null    int64  \n 16  2st_RC_SCcore     500 non-null    int64  \n 17  2st_Total_SCcore  500 non-null    int64  \ndtypes: float64(1), int64(12), object(5)\nmemory usage: 70.4+ KB\nNone\n\n\n\n\n\n\n- 합친 데이터를 baseline_data에 할당\n\n\nCode\nbaseline_data = pd.merge(df1,score_merged_data2)\n\n\n\n\nCode\nbaseline_data.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 502 entries, 0 to 501\nData columns (total 20 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   ID                502 non-null    int64  \n 1   Gender            502 non-null    object \n 2   Birth_Year        502 non-null    int64  \n 3   Seq               502 non-null    int64  \n 4   3st_LC_SCcore     502 non-null    int64  \n 5   3st_RC_SCcore     502 non-null    int64  \n 6   3st_Total_SCcore  502 non-null    int64  \n 7   학습목표              502 non-null    object \n 8   학습방법              502 non-null    object \n 9   강의 학습 교재 유형       502 non-null    object \n 10  학습빈도              502 non-null    object \n 11  기출문제 공부 횟수        502 non-null    float64\n 12  취약분야 인지 여부        502 non-null    object \n 13  토익 모의테스트 횟수       502 non-null    int64  \n 14  1st_LC_SCcore     502 non-null    int64  \n 15  1st_RC_SCcore     502 non-null    int64  \n 16  1st_Total_SCcore  502 non-null    int64  \n 17  2st_LC_SCcore     502 non-null    int64  \n 18  2st_RC_SCcore     502 non-null    int64  \n 19  2st_Total_SCcore  502 non-null    int64  \ndtypes: float64(1), int64(13), object(6)\nmemory usage: 78.6+ KB\n\n\n\n\n\n\n‘Score_diff_total’ = ‘3st_Total_Score’ - ‘2st_Total_Score’\n\n\n\nCode\nbaseline_data[\"Score_diff_total\"] = baseline_data[\"3st_Total_SCcore\"] - baseline_data[\"2st_Total_SCcore\"] \n\n\n\n\n\n\n\nCode\nbaseline_data.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 502 entries, 0 to 501\nData columns (total 21 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   ID                502 non-null    int64  \n 1   Gender            502 non-null    object \n 2   Birth_Year        502 non-null    int64  \n 3   Seq               502 non-null    int64  \n 4   3st_LC_SCcore     502 non-null    int64  \n 5   3st_RC_SCcore     502 non-null    int64  \n 6   3st_Total_SCcore  502 non-null    int64  \n 7   학습목표              502 non-null    object \n 8   학습방법              502 non-null    object \n 9   강의 학습 교재 유형       502 non-null    object \n 10  학습빈도              502 non-null    object \n 11  기출문제 공부 횟수        502 non-null    float64\n 12  취약분야 인지 여부        502 non-null    object \n 13  토익 모의테스트 횟수       502 non-null    int64  \n 14  1st_LC_SCcore     502 non-null    int64  \n 15  1st_RC_SCcore     502 non-null    int64  \n 16  1st_Total_SCcore  502 non-null    int64  \n 17  2st_LC_SCcore     502 non-null    int64  \n 18  2st_RC_SCcore     502 non-null    int64  \n 19  2st_Total_SCcore  502 non-null    int64  \n 20  Score_diff_total  502 non-null    int64  \ndtypes: float64(1), int64(14), object(6)\nmemory usage: 82.5+ KB\n\n\n\n\n\n\n\n\n\n\n\nCode\nbaseline_data.to_csv(\"data04_baseline.csv\",index=False)\n\n\n\n\n\n\n\nCode\npd.read_csv(\"data04_baseline.csv\").info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 502 entries, 0 to 501\nData columns (total 21 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   ID                502 non-null    int64  \n 1   Gender            502 non-null    object \n 2   Birth_Year        502 non-null    int64  \n 3   Seq               502 non-null    int64  \n 4   3st_LC_SCcore     502 non-null    int64  \n 5   3st_RC_SCcore     502 non-null    int64  \n 6   3st_Total_SCcore  502 non-null    int64  \n 7   학습목표              502 non-null    object \n 8   학습방법              502 non-null    object \n 9   강의 학습 교재 유형       502 non-null    object \n 10  학습빈도              502 non-null    object \n 11  기출문제 공부 횟수        502 non-null    float64\n 12  취약분야 인지 여부        502 non-null    object \n 13  토익 모의테스트 횟수       502 non-null    int64  \n 14  1st_LC_SCcore     502 non-null    int64  \n 15  1st_RC_SCcore     502 non-null    int64  \n 16  1st_Total_SCcore  502 non-null    int64  \n 17  2st_LC_SCcore     502 non-null    int64  \n 18  2st_RC_SCcore     502 non-null    int64  \n 19  2st_Total_SCcore  502 non-null    int64  \n 20  Score_diff_total  502 non-null    int64  \ndtypes: float64(1), int64(14), object(6)\nmemory usage: 82.5+ KB"
  },
  {
    "objectID": "posts/DX/MP/2023-08-24-00. MP (1).html#환경설정",
    "href": "posts/DX/MP/2023-08-24-00. MP (1).html#환경설정",
    "title": "00. MP (1)",
    "section": "",
    "text": "pandas와 numpy 라라이브러리를 불러오기\n\n\n\nCode\nimport pandas as pd\nimport numpy as np\n\n\n\n\n\n- 데이터를 불러온 후 상위 10개 행 확인\n\n\nCode\nimport openpyxl\ndata = pd.read_excel(\"data04.xlsx\")\ndata.head(10)\n\n\n\n\n\n\n\n\n\nID\nSeq\nGender\nBirth_Year\nLC_Score\nRC_Score\nTotal Score\n학습목표\n학습방법\n강의 학습 교재 유형\n학습빈도\n기출문제 공부 횟수\n취약분야 인지 여부\n토익 모의테스트 횟수\nStudent ID\n\n\n\n\n0\n1\n1\nM\n1973\n181\n173\n354\n자기계발\n참고서\n일반적인 영어 텍스트 기반 교재\n주3-4회\n6.0\n알고 있지 않음\n6\nstudent1\n\n\n1\n1\n2\nM\n1973\n227\n213\n440\n자기계발\n오프라인강의\n뉴스/이슈 기반 교재\n주1-2회\n3.0\n알고 있음\n5\nstudent1\n\n\n2\n1\n3\nM\n1973\n345\n336\n681\n승진\n온라인강의\n영상 교재\n주5-6회\n7.0\n알고 있음\n10\nstudent1\n\n\n3\n2\n1\nF\n1982\n330\n290\n620\n자기계발\n오프라인강의\n뉴스/이슈 기반 교재\n매일(주 7회)\n8.0\n알고 있지 않음\n19\nstudent2\n\n\n4\n2\n2\nF\n1982\n354\n339\n693\n승진\n온라인강의\n영상 교재\n주5-6회\n2.0\n알고 있음\n15\nstudent2\n\n\n5\n2\n3\nF\n1982\n380\n368\n748\n승진\n온라인강의\n뉴스/이슈 기반 교재\n주5-6회\n4.0\n알고 있음\n14\nstudent2\n\n\n6\n3\n1\nF\n1995\n367\n309\n676\n취업\n온라인강의\n영상 교재\n매일(주 7회)\n9.0\n알고 있지 않음\n7\nstudent3\n\n\n7\n3\n2\nF\n1995\n396\n365\n761\n자기계발\n온라인강의\n영상 교재\n주3-4회\n7.0\n알고 있지 않음\n6\nstudent3\n\n\n8\n3\n3\nF\n1995\n416\n382\n798\n자기계발\n참고서\n일반적인 영어 텍스트 기반 교재\n주1-2회\n4.0\n알고 있음\n4\nstudent3\n\n\n9\n4\n1\nM\n1987\n470\n285\n755\n자기계발\n온라인강의\n뉴스/이슈 기반 교재\n주1-2회\n7.0\n알고 있지 않음\n4\nstudent4"
  },
  {
    "objectID": "posts/DX/MP/2023-08-24-00. MP (1).html#데이터프레임-탐색",
    "href": "posts/DX/MP/2023-08-24-00. MP (1).html#데이터프레임-탐색",
    "title": "00. MP (1)",
    "section": "",
    "text": "Code\nprint(f\"전체 데이터는 {data.shape[0]}개의 행과 {data.shape[1]}열로 구성되어 있습니다.\")\n\n\n전체 데이터는 1500개의 행과 15열로 구성되어 있습니다.\n\n\n\n\n\n\n\nCode\ndata.tail(5)\n\n\n\n\n\n\n\n\n\nID\nSeq\nGender\nBirth_Year\nLC_Score\nRC_Score\nTotal Score\n학습목표\n학습방법\n강의 학습 교재 유형\n학습빈도\n기출문제 공부 횟수\n취약분야 인지 여부\n토익 모의테스트 횟수\nStudent ID\n\n\n\n\n1495\n499\n2\nF\n1990\n378\n326\n704\n승진\n온라인강의\n뉴스/이슈 기반 교재\n주5-6회\n6.0\n알고 있지 않음\n12\nstudent499\n\n\n1496\n499\n3\nF\n1990\n422\n370\n792\n자기계발\n오프라인강의\n비즈니스 시뮬레이션(Role Play)\n주3-4회\n4.0\n알고 있음\n7\nstudent499\n\n\n1497\n500\n1\nM\n1984\n169\n188\n357\n자기계발\n참고서\n일반적인 영어 텍스트 기반 교재\n주3-4회\n8.0\n알고 있지 않음\n2\nstudent500\n\n\n1498\n500\n2\nM\n1984\n172\n190\n362\n자기계발\n참고서\n뉴스/이슈 기반 교재\n매일(주 7회)\n10.0\n알고 있음\n16\nstudent500\n\n\n1499\n500\n3\nM\n1984\n235\n226\n461\n승진\n오프라인강의\n비즈니스 시뮬레이션(Role Play)\n주5-6회\n7.0\n알고 있음\n15\nstudent500\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nprint(list(data.columns))\n\n\n['ID', 'Seq', 'Gender', 'Birth_Year', 'LC_Score', 'RC_Score', 'Total Score', '학습목표', '학습방법', '강의 학습 교재 유형', '학습빈도', '기출문제 공부 횟수', '취약분야 인지 여부', '토익 모의테스트 횟수', 'Student ID']\n\n\n\n\n\n\n\nCode\nprint(data.info())\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1500 entries, 0 to 1499\nData columns (total 15 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   ID           1500 non-null   int64  \n 1   Seq          1500 non-null   int64  \n 2   Gender       1500 non-null   object \n 3   Birth_Year   1500 non-null   int64  \n 4   LC_Score     1500 non-null   int64  \n 5   RC_Score     1500 non-null   int64  \n 6   Total Score  1500 non-null   int64  \n 7   학습목표         1500 non-null   object \n 8   학습방법         1500 non-null   object \n 9   강의 학습 교재 유형  1500 non-null   object \n 10  학습빈도         1500 non-null   object \n 11  기출문제 공부 횟수   1497 non-null   float64\n 12  취약분야 인지 여부   1500 non-null   object \n 13  토익 모의테스트 횟수  1500 non-null   int64  \n 14  Student ID   1500 non-null   object \ndtypes: float64(1), int64(7), object(7)\nmemory usage: 175.9+ KB\nNone\n\n\n\n\n\n\n기출문제 공부횟수에서 총 3개의 결측치가 확인된다.\n\n\n\nCode\ndata.isna().sum()\n\n\nID             0\nSeq            0\nGender         0\nBirth_Year     0\nLC_Score       0\nRC_Score       0\nTotal Score    0\n학습목표           0\n학습방법           0\n강의 학습 교재 유형    0\n학습빈도           0\n기출문제 공부 횟수     3\n취약분야 인지 여부     0\n토익 모의테스트 횟수    0\nStudent ID     0\ndtype: int64\n\n\n\n\n\n\n\nCode\ndata.describe()\n\n\n\n\n\n\n\n\n\nID\nSeq\nBirth_Year\nLC_Score\nRC_Score\nTotal Score\n기출문제 공부 횟수\n토익 모의테스트 횟수\n\n\n\n\ncount\n1500.000000\n1500.000000\n1500.000000\n1500.000000\n1500.000000\n1500.000000\n1497.000000\n1500.000000\n\n\nmean\n250.500000\n2.000000\n1992.906000\n340.079333\n340.164667\n680.260667\n5.286573\n9.784000\n\n\nstd\n144.385415\n0.816769\n8.218893\n86.807523\n87.143890\n159.110652\n2.797303\n5.324181\n\n\nmin\n1.000000\n1.000000\n1973.000000\n105.000000\n84.000000\n250.000000\n1.000000\n1.000000\n\n\n25%\n125.750000\n1.000000\n1986.750000\n279.000000\n280.000000\n564.000000\n3.000000\n5.000000\n\n\n50%\n250.500000\n2.000000\n1992.500000\n335.000000\n337.000000\n687.000000\n5.000000\n9.000000\n\n\n75%\n375.250000\n3.000000\n2000.000000\n404.000000\n406.000000\n800.000000\n8.000000\n14.000000\n\n\nmax\n500.000000\n3.000000\n2007.000000\n495.000000\n495.000000\n990.000000\n10.000000\n20.000000"
  },
  {
    "objectID": "posts/DX/MP/2023-08-24-00. MP (1).html#데이터-전처리-수행",
    "href": "posts/DX/MP/2023-08-24-00. MP (1).html#데이터-전처리-수행",
    "title": "00. MP (1)",
    "section": "",
    "text": "Code\nprint(data.dtypes)\n\n\nID               int64\nSeq              int64\nGender          object\nBirth_Year       int64\nLC_Score         int64\nRC_Score         int64\nTotal Score      int64\n학습목표            object\n학습방법            object\n강의 학습 교재 유형     object\n학습빈도            object\n기출문제 공부 횟수     float64\n취약분야 인지 여부      object\n토익 모의테스트 횟수      int64\nStudent ID      object\ndtype: object\n\n\n\n\n\n\n\nCode\ndata.drop(\"Student ID\",axis=1,inplace=True)\n\n\n\n\nCode\ndata.head()\n\n\n\n\n\n\n\n\n\nID\nSeq\nGender\nBirth_Year\nLC_Score\nRC_Score\nTotal Score\n학습목표\n학습방법\n강의 학습 교재 유형\n학습빈도\n기출문제 공부 횟수\n취약분야 인지 여부\n토익 모의테스트 횟수\n\n\n\n\n0\n1\n1\nM\n1973\n181\n173\n354\n자기계발\n참고서\n일반적인 영어 텍스트 기반 교재\n주3-4회\n6.0\n알고 있지 않음\n6\n\n\n1\n1\n2\nM\n1973\n227\n213\n440\n자기계발\n오프라인강의\n뉴스/이슈 기반 교재\n주1-2회\n3.0\n알고 있음\n5\n\n\n2\n1\n3\nM\n1973\n345\n336\n681\n승진\n온라인강의\n영상 교재\n주5-6회\n7.0\n알고 있음\n10\n\n\n3\n2\n1\nF\n1982\n330\n290\n620\n자기계발\n오프라인강의\n뉴스/이슈 기반 교재\n매일(주 7회)\n8.0\n알고 있지 않음\n19\n\n\n4\n2\n2\nF\n1982\n354\n339\n693\n승진\n온라인강의\n영상 교재\n주5-6회\n2.0\n알고 있음\n15\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nlen(data.columns)\n\n\n14\n\n\n\n\n\n\n\nCode\ndata[\"기출문제 공부 횟수\"].fillna(0,inplace=True)\n\n\n\n\n\n\n\nCode\ndata[\"기출문제 공부 횟수\"].unique()\n\n\narray([ 6.,  3.,  7.,  8.,  2.,  4.,  9.,  5., 10.,  1.,  0.])\n\n\n\n\n\n\ndf1(개인정보 데이터) features : 'ID', 'Gender', 'Birth_Year'\ndf2(토익시험 학습정보 데이터) features : 'ID','Seq', 'LC_Score', 'RC_Score', 'Total Score', '학습목표', '학습방법', '강의 학습 교재 유형', '학습빈도', '기출문제 공부 횟수', '취약분야 인지 여부', '토익 모의테스트 횟수'\n\n\n\nCode\ncol_1 = ['ID', 'Gender', 'Birth_Year']\ncol_2 = ['ID','Seq', 'LC_Score', 'RC_Score', 'Total Score',\n         '학습목표', '학습방법', '강의 학습 교재 유형', '학습빈도',\n         '기출문제 공부 횟수', '취약분야 인지 여부', '토익 모의테스트 횟수']\n\ndf1 = data.loc[:, map(lambda x : x  in col_1,data.columns )]\ndf2 = data.loc[:, map(lambda x : x  in col_2,data.columns )]\n\nprint(f\"df1의 컬럼 : {list(df1.columns)}\\n\")\nprint(\"*\"*100+\"\\n\")\nprint(f\"df2의 컬럼 : {list(df2.columns)}\")\n\n\ndf1의 컬럼 : ['ID', 'Gender', 'Birth_Year']\n\n****************************************************************************************************\n\ndf2의 컬럼 : ['ID', 'Seq', 'LC_Score', 'RC_Score', 'Total Score', '학습목표', '학습방법', '강의 학습 교재 유형', '학습빈도', '기출문제 공부 횟수', '취약분야 인지 여부', '토익 모의테스트 횟수']\n\n\n\n\n\n\n\n\nCode\ndf1 = df1.drop_duplicates()\n\n\n\n\nCode\ndf1.head()\n\n\n\n\n\n\n\n\n\nID\nGender\nBirth_Year\n\n\n\n\n0\n1\nM\n1973\n\n\n3\n2\nF\n1982\n\n\n6\n3\nF\n1995\n\n\n9\n4\nM\n1987\n\n\n12\n5\nM\n1994\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntemp = df2.loc[map(lambda x : x == 3,df2.Seq), :]\ntemp.Seq.unique()\n\n\narray([3], dtype=int64)\n\n\n\n\nCode\ntemp.head()\n\n\n\n\n\n\n\n\n\nID\nSeq\nLC_Score\nRC_Score\nTotal Score\n학습목표\n학습방법\n강의 학습 교재 유형\n학습빈도\n기출문제 공부 횟수\n취약분야 인지 여부\n토익 모의테스트 횟수\n\n\n\n\n2\n1\n3\n345\n336\n681\n승진\n온라인강의\n영상 교재\n주5-6회\n7.0\n알고 있음\n10\n\n\n5\n2\n3\n380\n368\n748\n승진\n온라인강의\n뉴스/이슈 기반 교재\n주5-6회\n4.0\n알고 있음\n14\n\n\n8\n3\n3\n416\n382\n798\n자기계발\n참고서\n일반적인 영어 텍스트 기반 교재\n주1-2회\n4.0\n알고 있음\n4\n\n\n11\n4\n3\n495\n397\n892\n승진\n온라인강의\n뉴스/이슈 기반 교재\n주3-4회\n9.0\n알고 있음\n8\n\n\n14\n5\n3\n398\n437\n835\n자기계발\n온라인강의\n영상 교재\n주3-4회\n6.0\n알고 있음\n4\n\n\n\n\n\n\n\n\n\n\n\nLC_Score, RC_Score, Total Score를 각각 ‘3st_LC_Score’, ‘3st_RC_Score’, ’3st_Total_Score’로 변경하고 확인해주세요.\n\n\n\nCode\ntemp = temp.rename(columns = {\"LC_Score\" : \"3st_LC_SCcore\",\n                        \"RC_Score\" : \"3st_RC_SCcore\",\n                        \"Total Score\" : \"3st_Total_SCcore\",\n                        })\ntemp.head()\n\n\n\n\n\n\n\n\n\nID\nSeq\n3st_LC_SCcore\n3st_RC_SCcore\n3st_Total_SCcore\n학습목표\n학습방법\n강의 학습 교재 유형\n학습빈도\n기출문제 공부 횟수\n취약분야 인지 여부\n토익 모의테스트 횟수\n\n\n\n\n2\n1\n3\n345\n336\n681\n승진\n온라인강의\n영상 교재\n주5-6회\n7.0\n알고 있음\n10\n\n\n5\n2\n3\n380\n368\n748\n승진\n온라인강의\n뉴스/이슈 기반 교재\n주5-6회\n4.0\n알고 있음\n14\n\n\n8\n3\n3\n416\n382\n798\n자기계발\n참고서\n일반적인 영어 텍스트 기반 교재\n주1-2회\n4.0\n알고 있음\n4\n\n\n11\n4\n3\n495\n397\n892\n승진\n온라인강의\n뉴스/이슈 기반 교재\n주3-4회\n9.0\n알고 있음\n8\n\n\n14\n5\n3\n398\n437\n835\n자기계발\n온라인강의\n영상 교재\n주3-4회\n6.0\n알고 있음\n4\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntemp1 = df2.loc[map(lambda x : x == 1,df2.Seq), :]\ntemp1.Seq.unique()\n\n\narray([1], dtype=int64)\n\n\n\n\n\n\n\nCode\ntemp1 = temp1.loc[:,['ID','LC_Score','RC_Score','Total Score']]\n\n\n\n\n\n\nLC_Score, RC_Score, Total Score를 각각 ‘1st_LC_Score’, ‘1st_RC_Score’, ’1st_Total_Score’로 변경하고 확인해주세요.\n\n\n\nCode\ntemp1 = temp1.rename(columns = {\"LC_Score\" : \"1st_LC_SCcore\",\n                        \"RC_Score\" : \"1st_RC_SCcore\",\n                        \"Total Score\" : \"1st_Total_SCcore\",\n                        })\ntemp1.head()\n\n\n\n\n\n\n\n\n\nID\n1st_LC_SCcore\n1st_RC_SCcore\n1st_Total_SCcore\n\n\n\n\n0\n1\n181\n173\n354\n\n\n3\n2\n330\n290\n620\n\n\n6\n3\n367\n309\n676\n\n\n9\n4\n470\n285\n755\n\n\n12\n5\n273\n372\n645\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntemp2 = df2.loc[map(lambda x : x == 2,df2.Seq), :]\ntemp2.Seq.unique()\n\n\narray([2], dtype=int64)\n\n\n\n\n\n\n\nCode\ntemp2 =  temp2.loc[:,['ID','LC_Score','RC_Score','Total Score']]\n\n\n\n\n\n\n\nCode\ntemp2 = temp2.rename(columns = {\"LC_Score\" : \"2st_LC_SCcore\",\n                        \"RC_Score\" : \"2st_RC_SCcore\",\n                        \"Total Score\" : \"2st_Total_SCcore\",\n                        })\ntemp2.head()\n\n\n\n\n\n\n\n\n\nID\n2st_LC_SCcore\n2st_RC_SCcore\n2st_Total_SCcore\n\n\n\n\n1\n1\n227\n213\n440\n\n\n4\n2\n354\n339\n693\n\n\n7\n3\n396\n365\n761\n\n\n10\n4\n495\n341\n836\n\n\n13\n5\n314\n426\n740\n\n\n\n\n\n\n\n\n\n\n- 합친 후 ’score_merged_data1’에 할당\n\n\nCode\nscore_merged_data1 = pd.merge(temp,temp1)\n\n\n\n\n\n\n\nCode\nscore_merged_data2 = pd.merge(score_merged_data1,temp2)\n\n\n\n\n\n\n\nCode\nprint(score_merged_data2.info())\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 500 entries, 0 to 499\nData columns (total 18 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   ID                500 non-null    int64  \n 1   Seq               500 non-null    int64  \n 2   3st_LC_SCcore     500 non-null    int64  \n 3   3st_RC_SCcore     500 non-null    int64  \n 4   3st_Total_SCcore  500 non-null    int64  \n 5   학습목표              500 non-null    object \n 6   학습방법              500 non-null    object \n 7   강의 학습 교재 유형       500 non-null    object \n 8   학습빈도              500 non-null    object \n 9   기출문제 공부 횟수        500 non-null    float64\n 10  취약분야 인지 여부        500 non-null    object \n 11  토익 모의테스트 횟수       500 non-null    int64  \n 12  1st_LC_SCcore     500 non-null    int64  \n 13  1st_RC_SCcore     500 non-null    int64  \n 14  1st_Total_SCcore  500 non-null    int64  \n 15  2st_LC_SCcore     500 non-null    int64  \n 16  2st_RC_SCcore     500 non-null    int64  \n 17  2st_Total_SCcore  500 non-null    int64  \ndtypes: float64(1), int64(12), object(5)\nmemory usage: 70.4+ KB\nNone\n\n\n\n\n\n\n- 합친 데이터를 baseline_data에 할당\n\n\nCode\nbaseline_data = pd.merge(df1,score_merged_data2)\n\n\n\n\nCode\nbaseline_data.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 502 entries, 0 to 501\nData columns (total 20 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   ID                502 non-null    int64  \n 1   Gender            502 non-null    object \n 2   Birth_Year        502 non-null    int64  \n 3   Seq               502 non-null    int64  \n 4   3st_LC_SCcore     502 non-null    int64  \n 5   3st_RC_SCcore     502 non-null    int64  \n 6   3st_Total_SCcore  502 non-null    int64  \n 7   학습목표              502 non-null    object \n 8   학습방법              502 non-null    object \n 9   강의 학습 교재 유형       502 non-null    object \n 10  학습빈도              502 non-null    object \n 11  기출문제 공부 횟수        502 non-null    float64\n 12  취약분야 인지 여부        502 non-null    object \n 13  토익 모의테스트 횟수       502 non-null    int64  \n 14  1st_LC_SCcore     502 non-null    int64  \n 15  1st_RC_SCcore     502 non-null    int64  \n 16  1st_Total_SCcore  502 non-null    int64  \n 17  2st_LC_SCcore     502 non-null    int64  \n 18  2st_RC_SCcore     502 non-null    int64  \n 19  2st_Total_SCcore  502 non-null    int64  \ndtypes: float64(1), int64(13), object(6)\nmemory usage: 78.6+ KB\n\n\n\n\n\n\n‘Score_diff_total’ = ‘3st_Total_Score’ - ‘2st_Total_Score’\n\n\n\nCode\nbaseline_data[\"Score_diff_total\"] = baseline_data[\"3st_Total_SCcore\"] - baseline_data[\"2st_Total_SCcore\"] \n\n\n\n\n\n\n\nCode\nbaseline_data.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 502 entries, 0 to 501\nData columns (total 21 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   ID                502 non-null    int64  \n 1   Gender            502 non-null    object \n 2   Birth_Year        502 non-null    int64  \n 3   Seq               502 non-null    int64  \n 4   3st_LC_SCcore     502 non-null    int64  \n 5   3st_RC_SCcore     502 non-null    int64  \n 6   3st_Total_SCcore  502 non-null    int64  \n 7   학습목표              502 non-null    object \n 8   학습방법              502 non-null    object \n 9   강의 학습 교재 유형       502 non-null    object \n 10  학습빈도              502 non-null    object \n 11  기출문제 공부 횟수        502 non-null    float64\n 12  취약분야 인지 여부        502 non-null    object \n 13  토익 모의테스트 횟수       502 non-null    int64  \n 14  1st_LC_SCcore     502 non-null    int64  \n 15  1st_RC_SCcore     502 non-null    int64  \n 16  1st_Total_SCcore  502 non-null    int64  \n 17  2st_LC_SCcore     502 non-null    int64  \n 18  2st_RC_SCcore     502 non-null    int64  \n 19  2st_Total_SCcore  502 non-null    int64  \n 20  Score_diff_total  502 non-null    int64  \ndtypes: float64(1), int64(14), object(6)\nmemory usage: 82.5+ KB"
  },
  {
    "objectID": "posts/DX/MP/2023-08-24-00. MP (1).html#데이터셋-저장하기",
    "href": "posts/DX/MP/2023-08-24-00. MP (1).html#데이터셋-저장하기",
    "title": "00. MP (1)",
    "section": "",
    "text": "Code\nbaseline_data.to_csv(\"data04_baseline.csv\",index=False)\n\n\n\n\n\n\n\nCode\npd.read_csv(\"data04_baseline.csv\").info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 502 entries, 0 to 501\nData columns (total 21 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   ID                502 non-null    int64  \n 1   Gender            502 non-null    object \n 2   Birth_Year        502 non-null    int64  \n 3   Seq               502 non-null    int64  \n 4   3st_LC_SCcore     502 non-null    int64  \n 5   3st_RC_SCcore     502 non-null    int64  \n 6   3st_Total_SCcore  502 non-null    int64  \n 7   학습목표              502 non-null    object \n 8   학습방법              502 non-null    object \n 9   강의 학습 교재 유형       502 non-null    object \n 10  학습빈도              502 non-null    object \n 11  기출문제 공부 횟수        502 non-null    float64\n 12  취약분야 인지 여부        502 non-null    object \n 13  토익 모의테스트 횟수       502 non-null    int64  \n 14  1st_LC_SCcore     502 non-null    int64  \n 15  1st_RC_SCcore     502 non-null    int64  \n 16  1st_Total_SCcore  502 non-null    int64  \n 17  2st_LC_SCcore     502 non-null    int64  \n 18  2st_RC_SCcore     502 non-null    int64  \n 19  2st_Total_SCcore  502 non-null    int64  \n 20  Score_diff_total  502 non-null    int64  \ndtypes: float64(1), int64(14), object(6)\nmemory usage: 82.5+ KB"
  },
  {
    "objectID": "posts/DX/MP/2023-08-24-00. MP (1).html#환경설정-1",
    "href": "posts/DX/MP/2023-08-24-00. MP (1).html#환경설정-1",
    "title": "00. MP (1)",
    "section": "1. 환경설정",
    "text": "1. 환경설정\n\n(1) 폰트설치\n\n\nCode\n!pip install matplotlib\n!pip install --upgrade matplotlib\n\nimport matplotlib.pyplot as plt\n\n\nRequirement already satisfied: matplotlib in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (3.7.2)\nRequirement already satisfied: contourpy&gt;=1.0.1 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (1.1.0)\nRequirement already satisfied: cycler&gt;=0.10 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (0.11.0)\nRequirement already satisfied: fonttools&gt;=4.22.0 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (4.42.0)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (1.4.4)\nRequirement already satisfied: numpy&gt;=1.20 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (1.25.2)\nRequirement already satisfied: packaging&gt;=20.0 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (23.0)\nRequirement already satisfied: pillow&gt;=6.2.0 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (10.0.0)\nRequirement already satisfied: pyparsing&lt;3.1,&gt;=2.3.1 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (3.0.9)\nRequirement already satisfied: python-dateutil&gt;=2.7 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (2.8.2)\nRequirement already satisfied: six&gt;=1.5 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib) (1.16.0)\nRequirement already satisfied: matplotlib in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (3.7.2)\nRequirement already satisfied: contourpy&gt;=1.0.1 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (1.1.0)\nRequirement already satisfied: cycler&gt;=0.10 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (0.11.0)\nRequirement already satisfied: fonttools&gt;=4.22.0 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (4.42.0)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (1.4.4)\nRequirement already satisfied: numpy&gt;=1.20 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (1.25.2)\nRequirement already satisfied: packaging&gt;=20.0 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (23.0)\nRequirement already satisfied: pillow&gt;=6.2.0 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (10.0.0)\nRequirement already satisfied: pyparsing&lt;3.1,&gt;=2.3.1 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (3.0.9)\nRequirement already satisfied: python-dateutil&gt;=2.7 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from matplotlib) (2.8.2)\nRequirement already satisfied: six&gt;=1.5 in c:\\users\\rkdcj\\anaconda3\\envs\\dx\\lib\\site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib) (1.16.0)\n\n\n\n\n(2) 라이브러리 불러오기\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.rc('font', family='Malgun Gothic')\n\n\n\n\n(3)-1. 데이터 불러오기\n\n\nCode\ndata = pd.read_csv(\"data04_baseline.csv\")\n\n\n\n\n(3)-2 데이터 확인\n\n\nCode\ndata.head()\n\n\n\n\n\n\n\n\n\nID\nGender\nBirth_Year\nSeq\n3st_LC_SCcore\n3st_RC_SCcore\n3st_Total_SCcore\n학습목표\n학습방법\n강의 학습 교재 유형\n...\n기출문제 공부 횟수\n취약분야 인지 여부\n토익 모의테스트 횟수\n1st_LC_SCcore\n1st_RC_SCcore\n1st_Total_SCcore\n2st_LC_SCcore\n2st_RC_SCcore\n2st_Total_SCcore\nScore_diff_total\n\n\n\n\n0\n1\nM\n1973\n3\n345\n336\n681\n승진\n온라인강의\n영상 교재\n...\n7.0\n알고 있음\n10\n181\n173\n354\n227\n213\n440\n241\n\n\n1\n2\nF\n1982\n3\n380\n368\n748\n승진\n온라인강의\n뉴스/이슈 기반 교재\n...\n4.0\n알고 있음\n14\n330\n290\n620\n354\n339\n693\n55\n\n\n2\n3\nF\n1995\n3\n416\n382\n798\n자기계발\n참고서\n일반적인 영어 텍스트 기반 교재\n...\n4.0\n알고 있음\n4\n367\n309\n676\n396\n365\n761\n37\n\n\n3\n4\nM\n1987\n3\n495\n397\n892\n승진\n온라인강의\n뉴스/이슈 기반 교재\n...\n9.0\n알고 있음\n8\n470\n285\n755\n495\n341\n836\n56\n\n\n4\n5\nM\n1994\n3\n398\n437\n835\n자기계발\n온라인강의\n영상 교재\n...\n6.0\n알고 있음\n4\n273\n372\n645\n314\n426\n740\n95\n\n\n\n\n5 rows × 21 columns\n\n\n\n\n\n(3)-3. 열과 행확인\n\n\nCode\ndata.shape\n\n\n(502, 21)\n\n\n\n\n(3)-4. 데이터의 자료구조(Row, Colu,n, Not-null, type)을 확인\n\n\nCode\ndata.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 502 entries, 0 to 501\nData columns (total 21 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   ID                502 non-null    int64  \n 1   Gender            502 non-null    object \n 2   Birth_Year        502 non-null    int64  \n 3   Seq               502 non-null    int64  \n 4   3st_LC_SCcore     502 non-null    int64  \n 5   3st_RC_SCcore     502 non-null    int64  \n 6   3st_Total_SCcore  502 non-null    int64  \n 7   학습목표              502 non-null    object \n 8   학습방법              502 non-null    object \n 9   강의 학습 교재 유형       502 non-null    object \n 10  학습빈도              502 non-null    object \n 11  기출문제 공부 횟수        502 non-null    float64\n 12  취약분야 인지 여부        502 non-null    object \n 13  토익 모의테스트 횟수       502 non-null    int64  \n 14  1st_LC_SCcore     502 non-null    int64  \n 15  1st_RC_SCcore     502 non-null    int64  \n 16  1st_Total_SCcore  502 non-null    int64  \n 17  2st_LC_SCcore     502 non-null    int64  \n 18  2st_RC_SCcore     502 non-null    int64  \n 19  2st_Total_SCcore  502 non-null    int64  \n 20  Score_diff_total  502 non-null    int64  \ndtypes: float64(1), int64(14), object(6)\nmemory usage: 82.5+ KB\n\n\n\n\n(3)-5. 인덱스 확인\n\n\nCode\ndata.index\n\n\nRangeIndex(start=0, stop=502, step=1)\n\n\n\n\n(3)-6. 컬럼명을 확인\n\n\nCode\ndata.columns\n\n\nIndex(['ID', 'Gender', 'Birth_Year', 'Seq', '3st_LC_SCcore', '3st_RC_SCcore',\n       '3st_Total_SCcore', '학습목표', '학습방법', '강의 학습 교재 유형', '학습빈도', '기출문제 공부 횟수',\n       '취약분야 인지 여부', '토익 모의테스트 횟수', '1st_LC_SCcore', '1st_RC_SCcore',\n       '1st_Total_SCcore', '2st_LC_SCcore', '2st_RC_SCcore',\n       '2st_Total_SCcore', 'Score_diff_total'],\n      dtype='object')\n\n\n\n\n(3)-7. 상단 5행을 확인\n\n\nCode\ndata.head(5)\n\n\n\n\n\n\n\n\n\nID\nGender\nBirth_Year\nSeq\n3st_LC_SCcore\n3st_RC_SCcore\n3st_Total_SCcore\n학습목표\n학습방법\n강의 학습 교재 유형\n...\n기출문제 공부 횟수\n취약분야 인지 여부\n토익 모의테스트 횟수\n1st_LC_SCcore\n1st_RC_SCcore\n1st_Total_SCcore\n2st_LC_SCcore\n2st_RC_SCcore\n2st_Total_SCcore\nScore_diff_total\n\n\n\n\n0\n1\nM\n1973\n3\n345\n336\n681\n승진\n온라인강의\n영상 교재\n...\n7.0\n알고 있음\n10\n181\n173\n354\n227\n213\n440\n241\n\n\n1\n2\nF\n1982\n3\n380\n368\n748\n승진\n온라인강의\n뉴스/이슈 기반 교재\n...\n4.0\n알고 있음\n14\n330\n290\n620\n354\n339\n693\n55\n\n\n2\n3\nF\n1995\n3\n416\n382\n798\n자기계발\n참고서\n일반적인 영어 텍스트 기반 교재\n...\n4.0\n알고 있음\n4\n367\n309\n676\n396\n365\n761\n37\n\n\n3\n4\nM\n1987\n3\n495\n397\n892\n승진\n온라인강의\n뉴스/이슈 기반 교재\n...\n9.0\n알고 있음\n8\n470\n285\n755\n495\n341\n836\n56\n\n\n4\n5\nM\n1994\n3\n398\n437\n835\n자기계발\n온라인강의\n영상 교재\n...\n6.0\n알고 있음\n4\n273\n372\n645\n314\n426\n740\n95\n\n\n\n\n5 rows × 21 columns"
  },
  {
    "objectID": "posts/DX/MP/2023-08-24-00. MP (1).html#데이터프레임-탐색-개별-변수-분석",
    "href": "posts/DX/MP/2023-08-24-00. MP (1).html#데이터프레임-탐색-개별-변수-분석",
    "title": "00. MP (1)",
    "section": "2. 데이터프레임 탐색 : 개별 변수 분석",
    "text": "2. 데이터프레임 탐색 : 개별 변수 분석\n\n(1)-1 : 열별 누락값 확인\n\n\nCode\ndata.isna().sum()\n\n\nID                  0\nGender              0\nBirth_Year          0\nSeq                 0\n3st_LC_SCcore       0\n3st_RC_SCcore       0\n3st_Total_SCcore    0\n학습목표                0\n학습방법                0\n강의 학습 교재 유형         0\n학습빈도                0\n기출문제 공부 횟수          0\n취약분야 인지 여부          0\n토익 모의테스트 횟수         0\n1st_LC_SCcore       0\n1st_RC_SCcore       0\n1st_Total_SCcore    0\n2st_LC_SCcore       0\n2st_RC_SCcore       0\n2st_Total_SCcore    0\nScore_diff_total    0\ndtype: int64\n\n\n\n\n(1)-2. 열별 통계량 요약하여 출력\n\n\nCode\ndata.describe()\n\n\n\n\n\n\n\n\n\nID\nBirth_Year\nSeq\n3st_LC_SCcore\n3st_RC_SCcore\n3st_Total_SCcore\n기출문제 공부 횟수\n토익 모의테스트 횟수\n1st_LC_SCcore\n1st_RC_SCcore\n1st_Total_SCcore\n2st_LC_SCcore\n2st_RC_SCcore\n2st_Total_SCcore\nScore_diff_total\n\n\n\n\ncount\n502.000000\n502.000000\n502.0\n502.000000\n502.000000\n502.000000\n502.000000\n502.000000\n502.000000\n502.000000\n502.000000\n502.000000\n502.000000\n502.000000\n502.000000\n\n\nmean\n250.587649\n1992.948207\n3.0\n368.023904\n369.318725\n737.382470\n5.087649\n9.452191\n313.697211\n312.798805\n626.496016\n337.868526\n338.045817\n675.924303\n61.458167\n\n\nstd\n144.199862\n8.236603\n0.0\n82.052339\n81.659228\n155.752174\n2.790826\n4.952137\n85.483105\n86.522443\n148.318758\n84.141542\n83.817809\n152.986694\n39.684902\n\n\nmin\n1.000000\n1973.000000\n3.0\n141.000000\n135.000000\n280.000000\n0.000000\n1.000000\n105.000000\n84.000000\n250.000000\n120.000000\n129.000000\n260.000000\n0.000000\n\n\n25%\n126.250000\n1987.000000\n3.0\n295.000000\n295.000000\n591.250000\n3.000000\n5.000000\n259.250000\n250.000000\n519.000000\n279.000000\n280.500000\n558.750000\n30.000000\n\n\n50%\n251.500000\n1993.000000\n3.0\n372.000000\n375.000000\n760.000000\n5.000000\n8.000000\n308.000000\n311.500000\n641.000000\n332.500000\n335.000000\n690.500000\n63.000000\n\n\n75%\n374.750000\n2000.000000\n3.0\n434.000000\n437.000000\n860.000000\n7.000000\n13.000000\n369.000000\n377.750000\n734.750000\n395.000000\n400.000000\n790.000000\n83.000000\n\n\nmax\n500.000000\n2007.000000\n3.0\n495.000000\n495.000000\n990.000000\n10.000000\n20.000000\n495.000000\n491.000000\n970.000000\n495.000000\n495.000000\n990.000000\n281.000000\n\n\n\n\n\n\n\n\n\n(1)-3. 출력한 요약통계량을 행과 열을 바꿔서 출력\n\n\nCode\ndata.describe().T\n\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\nID\n502.0\n250.587649\n144.199862\n1.0\n126.25\n251.5\n374.75\n500.0\n\n\nBirth_Year\n502.0\n1992.948207\n8.236603\n1973.0\n1987.00\n1993.0\n2000.00\n2007.0\n\n\nSeq\n502.0\n3.000000\n0.000000\n3.0\n3.00\n3.0\n3.00\n3.0\n\n\n3st_LC_SCcore\n502.0\n368.023904\n82.052339\n141.0\n295.00\n372.0\n434.00\n495.0\n\n\n3st_RC_SCcore\n502.0\n369.318725\n81.659228\n135.0\n295.00\n375.0\n437.00\n495.0\n\n\n3st_Total_SCcore\n502.0\n737.382470\n155.752174\n280.0\n591.25\n760.0\n860.00\n990.0\n\n\n기출문제 공부 횟수\n502.0\n5.087649\n2.790826\n0.0\n3.00\n5.0\n7.00\n10.0\n\n\n토익 모의테스트 횟수\n502.0\n9.452191\n4.952137\n1.0\n5.00\n8.0\n13.00\n20.0\n\n\n1st_LC_SCcore\n502.0\n313.697211\n85.483105\n105.0\n259.25\n308.0\n369.00\n495.0\n\n\n1st_RC_SCcore\n502.0\n312.798805\n86.522443\n84.0\n250.00\n311.5\n377.75\n491.0\n\n\n1st_Total_SCcore\n502.0\n626.496016\n148.318758\n250.0\n519.00\n641.0\n734.75\n970.0\n\n\n2st_LC_SCcore\n502.0\n337.868526\n84.141542\n120.0\n279.00\n332.5\n395.00\n495.0\n\n\n2st_RC_SCcore\n502.0\n338.045817\n83.817809\n129.0\n280.50\n335.0\n400.00\n495.0\n\n\n2st_Total_SCcore\n502.0\n675.924303\n152.986694\n260.0\n558.75\n690.5\n790.00\n990.0\n\n\nScore_diff_total\n502.0\n61.458167\n39.684902\n0.0\n30.00\n63.0\n83.00\n281.0\n\n\n\n\n\n\n\n\n\n(1)-4. Gender 컬럼의 값 별 개수를 확인\n\n\nCode\ndata.Gender.value_counts()\n\n\nGender\nM    251\nF    251\nName: count, dtype: int64\n\n\n\n\n(1)-5. Gender 컬럼의 [‘M’, ‘F’] –&gt; [1,2]로 변경\n\n\nCode\ndata.Gender = [1 if i ==\"M\" else 2 for i in data.Gender]\n\n\n\n\nCode\ndata.Gender.unique()\n\n\narray([1, 2], dtype=int64)\n\n\n\n\n(1)-6. Gender 컬럼의 값 별 개수를 다시 확인해주세요.\n\n\nCode\ndata.Gender.value_counts()\n\n\nGender\n1    251\n2    251\nName: count, dtype: int64\n\n\n\n\n(1)-7. Gender컬럼 타입을 int로 변경\n- 리스트 컴프리헨션을 통해 위에서 수행\n\n\n(1)-8. 데이터 프레임의 Null 데이터가 있는지 확인\n\n\nCode\ndata.isnull().sum()\n\n\nID                  0\nGender              0\nBirth_Year          0\nSeq                 0\n3st_LC_SCcore       0\n3st_RC_SCcore       0\n3st_Total_SCcore    0\n학습목표                0\n학습방법                0\n강의 학습 교재 유형         0\n학습빈도                0\n기출문제 공부 횟수          0\n취약분야 인지 여부          0\n토익 모의테스트 횟수         0\n1st_LC_SCcore       0\n1st_RC_SCcore       0\n1st_Total_SCcore    0\n2st_LC_SCcore       0\n2st_RC_SCcore       0\n2st_Total_SCcore    0\nScore_diff_total    0\ndtype: int64\n\n\n\n\n\n(2)-1. 변수 sdt 문자열 “Score_diff_total”을 할당\n\n\nCode\nsdt  =\"Score_diff_total\"\n\n\n\n\n(2)-2. Score_diff_total에 대한 기술 통계 정보를 데이터 프레임의 형태로 출력\n\n\nCode\ndata[[sdt]].describe()\n\n\n\n\n\n\n\n\n\nScore_diff_total\n\n\n\n\ncount\n502.000000\n\n\nmean\n61.458167\n\n\nstd\n39.684902\n\n\nmin\n0.000000\n\n\n25%\n30.000000\n\n\n50%\n63.000000\n\n\n75%\n83.000000\n\n\nmax\n281.000000\n\n\n\n\n\n\n\n\n\n(2)-3. 위의 결과를 행과 열을 변환하여 출력\n\n\nCode\ndata[[sdt]].describe().T\n\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\nScore_diff_total\n502.0\n61.458167\n39.684902\n0.0\n30.0\n63.0\n83.0\n281.0\n\n\n\n\n\n\n\n\n\n(2)-4. 변수 BY에 문자열 ’Birth_Year’을 할당\n\n\nCode\nBY = \"Birth_Year\"\n\n\n\n\n(2)-5. ’Birth_Year’열에 대한 기술 통계 정보를 행과열을 변환해 출력\n\n\nCode\ndata[[BY]].describe().T\n\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\nBirth_Year\n502.0\n1992.948207\n8.236603\n1973.0\n1987.0\n1993.0\n2000.0\n2007.0\n\n\n\n\n\n\n\n\n\n(2)-6. ‘data’ 데이터프레임의 ‘Birth_Year’ 컬럼의 연도별 개수를 Bar 차트로 그리세요.\n\n\nCode\ndata[BY]\n\n\n0      1973\n1      1982\n2      1995\n3      1987\n4      1994\n       ... \n497    2006\n498    1988\n499    2006\n500    1990\n501    1984\nName: Birth_Year, Length: 502, dtype: int64\n\n\n\n\nCode\ndata.groupby(BY)[[BY]].count().\\\n                    rename(columns = {\"Birth_Year\" : \"Count\"}).\\\n                    reset_index().plot(kind= \"bar\",x=\"Birth_Year\",y=\"Count\",title=  \"Count of Birth_Year\")\n\n\n&lt;Axes: title={'center': 'Count of Birth_Year'}, xlabel='Birth_Year'&gt;\n\n\n\n\n\n\n\n(2)-7. 데이터 타입이 object인 컬럼만 추출\n\n\nCode\ndata.select_dtypes(\"O\")\n\n\n\n\n\n\n\n\n\n학습목표\n학습방법\n강의 학습 교재 유형\n학습빈도\n취약분야 인지 여부\n\n\n\n\n0\n승진\n온라인강의\n영상 교재\n주5-6회\n알고 있음\n\n\n1\n승진\n온라인강의\n뉴스/이슈 기반 교재\n주5-6회\n알고 있음\n\n\n2\n자기계발\n참고서\n일반적인 영어 텍스트 기반 교재\n주1-2회\n알고 있음\n\n\n3\n승진\n온라인강의\n뉴스/이슈 기반 교재\n주3-4회\n알고 있음\n\n\n4\n자기계발\n온라인강의\n영상 교재\n주3-4회\n알고 있음\n\n\n...\n...\n...\n...\n...\n...\n\n\n497\n자기계발\n온라인강의\n일반적인 영어 텍스트 기반 교재\n매일(주 7회)\n알고 있음\n\n\n498\n승진\n온라인강의\n비즈니스 시뮬레이션(Role Play)\n매일(주 7회)\n알고 있음\n\n\n499\n자기계발\n오프라인강의\n일반적인 영어 텍스트 기반 교재\n주1-2회\n알고 있음\n\n\n500\n자기계발\n오프라인강의\n비즈니스 시뮬레이션(Role Play)\n주3-4회\n알고 있음\n\n\n501\n승진\n오프라인강의\n비즈니스 시뮬레이션(Role Play)\n주5-6회\n알고 있음\n\n\n\n\n502 rows × 5 columns\n\n\n\n\n\n(2)-8. 데이터 타입이 Object 형태인 컬럼의 컬럼명만 추출해서 출력\n\n\nCode\ndata.select_dtypes(\"O\").columns.values\n\n\narray(['학습목표', '학습방법', '강의 학습 교재 유형', '학습빈도', '취약분야 인지 여부'], dtype=object)\n\n\n\n\n(2)-9. 학습목표의 값들의 빈도수를 계산하여 출력\n\n\nCode\ndata.select_dtypes(\"O\")[[\"학습목표\"]].value_counts().reset_index()\n\n\n\n\n\n\n\n\n\n학습목표\ncount\n\n\n\n\n0\n자기계발\n331\n\n\n1\n승진\n155\n\n\n2\n취업\n16\n\n\n\n\n\n\n\n\n\n(2)-10. data 데이터 프레임의 전체 열과 행 개수를 출력\n\n\nCode\nr,c = data.shape\n\n\n\n\nCode\nprint(f\"전체 행의 수 : {r}, 전체 열의 수 : {c}\")\n\n\n전체 행의 수 : 502, 전체 열의 수 : 21\n\n\n\n\n(2)-10. 변수 ’학습목표’의 값들의 빈도수를 전체 데이터의 개수로 나누어서 해당 값들이 전체 데이터에서 차지하는 비율을 구하기\n\n\nCode\ntemp = data.select_dtypes(\"O\")[[\"학습목표\"]].value_counts().reset_index()\n\n\n\n\nCode\ntemp[\"비율(%)\"] = round(temp[\"count\"]/r*100,2)\n\n\n\n\nCode\ntemp\n\n\n\n\n\n\n\n\n\n학습목표\ncount\n비율(%)\n\n\n\n\n0\n자기계발\n331\n65.94\n\n\n1\n승진\n155\n30.88\n\n\n2\n취업\n16\n3.19\n\n\n\n\n\n\n\n\n\n(2)-11. 학습목표 열에 대한 Bar 차트를 확인\n\n\nCode\ntemp.plot(kind= \"bar\", x= \"학습목표\",y=\"비율(%)\", title =\"토익 학습 목표 비율\")\n\n\n&lt;Axes: title={'center': '토익 학습 목표 비율'}, xlabel='학습목표'&gt;\n\n\n\n\n\n\n\n(2)-12. data 데이터 프레임에서 숫자형 컬럼에 대하여 검색\n\n\nCode\n#data.info()\n\n\n\n\nCode\ndata.select_dtypes(include= [\"float64\", \"int64\"])\n\n\n\n\n\n\n\n\n\nID\nGender\nBirth_Year\nSeq\n3st_LC_SCcore\n3st_RC_SCcore\n3st_Total_SCcore\n기출문제 공부 횟수\n토익 모의테스트 횟수\n1st_LC_SCcore\n1st_RC_SCcore\n1st_Total_SCcore\n2st_LC_SCcore\n2st_RC_SCcore\n2st_Total_SCcore\nScore_diff_total\n\n\n\n\n0\n1\n1\n1973\n3\n345\n336\n681\n7.0\n10\n181\n173\n354\n227\n213\n440\n241\n\n\n1\n2\n2\n1982\n3\n380\n368\n748\n4.0\n14\n330\n290\n620\n354\n339\n693\n55\n\n\n2\n3\n2\n1995\n3\n416\n382\n798\n4.0\n4\n367\n309\n676\n396\n365\n761\n37\n\n\n3\n4\n1\n1987\n3\n495\n397\n892\n9.0\n8\n470\n285\n755\n495\n341\n836\n56\n\n\n4\n5\n1\n1994\n3\n398\n437\n835\n6.0\n4\n273\n372\n645\n314\n426\n740\n95\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n497\n496\n1\n2006\n3\n364\n336\n700\n10.0\n13\n347\n315\n662\n349\n321\n670\n30\n\n\n498\n497\n2\n1988\n3\n187\n252\n439\n9.0\n17\n112\n250\n362\n120\n251\n371\n68\n\n\n499\n498\n1\n2006\n3\n255\n167\n422\n0.0\n4\n252\n150\n402\n254\n158\n412\n10\n\n\n500\n499\n2\n1990\n3\n422\n370\n792\n4.0\n7\n371\n324\n695\n378\n326\n704\n88\n\n\n501\n500\n1\n1984\n3\n235\n226\n461\n7.0\n15\n169\n188\n357\n172\n190\n362\n99\n\n\n\n\n502 rows × 16 columns\n\n\n\n\n\n(2)-13. 변수 ’강의 학습 교재 유형’의 값들의 빈도수, 비율을 계산해서 출력\n\n\nCode\ntemp2 = data[[\"강의 학습 교재 유형\"]].value_counts().reset_index()\n\n\n\n\nCode\ntemp2[\"비율(%)\"] = temp2[\"count\"]/r\n\n\n\n\nCode\ntemp2\n\n\n\n\n\n\n\n\n\n강의 학습 교재 유형\ncount\n비율(%)\n\n\n\n\n0\n일반적인 영어 텍스트 기반 교재\n137\n0.272908\n\n\n1\n영상 교재\n129\n0.256972\n\n\n2\n뉴스/이슈 기반 교재\n122\n0.243028\n\n\n3\n비즈니스 시뮬레이션(Role Play)\n114\n0.227092\n\n\n\n\n\n\n\n\n\n(2)-14. 취약분야 인지 여부 문자열의 값을 알고 있음은 1, 알고 있지 않음은 0으로 변경\n\n\nCode\ndata[\"취약분야 인지 여부\"].replace(\"알고 있음\",\"1\").replace(\"알고 있지 않음\",\"0\").unique()\n\n\narray(['1', '0'], dtype=object)\n\n\n\n\nCode\ndata[\"취약분야 인지 여부\"] = data[\"취약분야 인지 여부\"].replace(\"알고 있음\",\"1\").replace(\"알고 있지 않음\",\"0\")"
  },
  {
    "objectID": "posts/DX/MP/2023-08-24-00. MP (1).html#데이터-저장",
    "href": "posts/DX/MP/2023-08-24-00. MP (1).html#데이터-저장",
    "title": "00. MP (1)",
    "section": "3. 데이터 저장",
    "text": "3. 데이터 저장\n\n\nCode\ndata.to_csv(\"data04_featured.csv\",index=False)\n\n\n\n\nCode\npd.read_csv(\"data04_featured.csv\").info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 502 entries, 0 to 501\nData columns (total 21 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   ID                502 non-null    int64  \n 1   Gender            502 non-null    int64  \n 2   Birth_Year        502 non-null    int64  \n 3   Seq               502 non-null    int64  \n 4   3st_LC_SCcore     502 non-null    int64  \n 5   3st_RC_SCcore     502 non-null    int64  \n 6   3st_Total_SCcore  502 non-null    int64  \n 7   학습목표              502 non-null    object \n 8   학습방법              502 non-null    object \n 9   강의 학습 교재 유형       502 non-null    object \n 10  학습빈도              502 non-null    object \n 11  기출문제 공부 횟수        502 non-null    float64\n 12  취약분야 인지 여부        502 non-null    int64  \n 13  토익 모의테스트 횟수       502 non-null    int64  \n 14  1st_LC_SCcore     502 non-null    int64  \n 15  1st_RC_SCcore     502 non-null    int64  \n 16  1st_Total_SCcore  502 non-null    int64  \n 17  2st_LC_SCcore     502 non-null    int64  \n 18  2st_RC_SCcore     502 non-null    int64  \n 19  2st_Total_SCcore  502 non-null    int64  \n 20  Score_diff_total  502 non-null    int64  \ndtypes: float64(1), int64(16), object(4)\nmemory usage: 82.5+ KB"
  },
  {
    "objectID": "posts/DX/2023-07-31-00.intro.html",
    "href": "posts/DX/2023-07-31-00.intro.html",
    "title": "00. Intro & setting",
    "section": "",
    "text": "- 어… 일단 평소에도 quarto를 이용해서 웹사이트를 관리했지만… 뭔가 처음 깃허브를 접하구 하시는 분들은 이 플랫폼을 사용할 때 되게 난항이 있을것 같다… (내가 그랬다…)\n- 그리고 원래 만들어 놓았던 사이트는 뭔가 좀 지저분한 느낌이 들어서….\n- 에이블스쿨 하면서 배운것들 기록할 때는 뭔가 깔끔한 공간에 하고 싶기도 하다.\n- 이참에 절차를 확실히 내가 적어두자!\n\n\n- quarto download link : 여기서 quarto를 다운받자!\n\n\n\n- Terminal을 켠다음에 아래와 같은 명령어를 입력한다!\n(그.. 명령어 입력할 때 현재 자기 주피터 킬때 켜지는 폴더로 옮긴 다음에 수행하자… 골치 아프다ㅜㅜ)\nquarto create project website gcsite\n- 그러면 다음과 같은 이미지가 보인다\n\n- 저기 open with 어찌고 보이는데 d버튼 누르면 (don’t open)으로 넘어가니 그걸 선택한 후 엔터를 눌러준다!\n- 그러면 아래 이미지처럼 맨 밑에 gcsite라는 폴더가 생긴 것을 볼 수 있다.\n\n\n\n\n- git bash 쓰는 사람들 많던데 난 github desktop이 훨씬 편하다.\n- git 알못이기 때문에 많은 것을 알기 위해 괴롭고 싶지 않다.\n- 뭐 여튼 깃허브 데스크탑을 킨다.\n- 상단 메뉴바 \\(\\to\\) File \\(\\to\\) Add local repository\n- 그러면 아래와 같은 경고문이 뜬다.\n\n- local하고 연결하고 싶은데 깃허브에는 gcsite가 없으니 대충 만들어 달라는 것임 “create a repository” 를 눌러주자.\n\n- 무시, 걍 create repository ㄱㄱ\n- 그러면 깃허브 데스크탑에서 너 방금 만든거 너꺼 깃허브에 Publish 할거냐고 물어봄\n\n- Publish repository 눌러주면 끝~~ (단, publish할 때 private 체크박스는 해제하구 하자!)\n- 그 다음 내가 생성산 gcsite 저장소 setting으로 넘어가서 pages를 클릭!\n- 아래와 같이 branch를 수정 후 save 버튼 눌러주자\n\n\n\n\n- quarto 원리 : 작성한 ipynb파일 html파일로 출력해서 그 html파일들로 웹사이트를 구성하는 것1\n- step1. posts와 docs라는 폴더를 만들자\n\nposts는 내가 작성하는 ipynb파일들이 들어갈거고, docs에는 html파일이 들어갈 것이다.\n\n- step2. index 파일 수정\n\nindex파일은 뭐랄까 네비게이터 역할이랄까 아래와 같이 바꿔주자\n\n---\ntitle: \"GC site\"\nlisting:\n  contents: posts\n  sort: [date desc, title]\n  type: table\n  categories: true\n  sort-ui: true\n  filter-ui: true\npage-layout: full\ntitle-block-banner: true\n---\n- step3. _quarto.uml 파일 수정 \\(\\to\\) 템플릿이랑 디자인 이쁜거 많으니 본인 입맛에 맞게 수정하면 됩니당\nproject:\n  type: website\n  output-dir : docs  \nwebsite:\n  title: \"GC site\"\n  page-navigation: true\n  navbar:\n    right:\n      - icon : github\n        href : https://github.com/gangcheol/\n  sidebar:\n    style: \"docked\"\n    search: True\n    contents: auto\n    \nformat:\n  html:\n    css: styles.css\n    toc: true\n    code-fold : False\n    code-line-numbers : True\n    code-copy : True\n\ntheme :\n  light : flatly\n  \neditor : visual\n- step4. 앞서 만든 posts폴더에 아무 파일이나 만들어보자\n\n- step5. 그 후 다시 터미널에서 내가 생성한 폴더로 이동\n필자의 경우는 cd gcsite\n- step6. quarto render 입력\n- step7. github desktop보면 난리가 났을 것이다. 막 일을 좀 많이 했음.\n\n로컬하고 연결되어 있으니 로컬이 하고 있는 걸 다적어서 그럼\n\n\n\n저기 내가 밑에 이러한 기록을 init이라고 써놨다. 저건 내가 로컬에서 한 행동을 내 깃허브 로컬에 저장할 건데, 그 행동을 init이라고 쓴거\n이제 저 Commit to main 버튼을 눌러주고 가운데 화면에 뜨는 push origin을 눌러주자!\n\n- 마지막!! 아까 깃허브 로컬 셋팅에서 pases란에 잠시 후에 들어가보면 다음과 같은 것을 볼 수 있다.\n\n- 저 링크로 들어가면 내가 만든 웹사이트 초안을 볼 수 있다.\n- 링크"
  },
  {
    "objectID": "posts/DX/2023-07-31-00.intro.html#install",
    "href": "posts/DX/2023-07-31-00.intro.html#install",
    "title": "00. Intro & setting",
    "section": "",
    "text": "- quarto download link : 여기서 quarto를 다운받자!"
  },
  {
    "objectID": "posts/DX/2023-07-31-00.intro.html#website-생성",
    "href": "posts/DX/2023-07-31-00.intro.html#website-생성",
    "title": "00. Intro & setting",
    "section": "",
    "text": "- Terminal을 켠다음에 아래와 같은 명령어를 입력한다!\n(그.. 명령어 입력할 때 현재 자기 주피터 킬때 켜지는 폴더로 옮긴 다음에 수행하자… 골치 아프다ㅜㅜ)\nquarto create project website gcsite\n- 그러면 다음과 같은 이미지가 보인다\n\n- 저기 open with 어찌고 보이는데 d버튼 누르면 (don’t open)으로 넘어가니 그걸 선택한 후 엔터를 눌러준다!\n- 그러면 아래 이미지처럼 맨 밑에 gcsite라는 폴더가 생긴 것을 볼 수 있다."
  },
  {
    "objectID": "posts/DX/2023-07-31-00.intro.html#깃허브-로컬-연결",
    "href": "posts/DX/2023-07-31-00.intro.html#깃허브-로컬-연결",
    "title": "00. Intro & setting",
    "section": "",
    "text": "- git bash 쓰는 사람들 많던데 난 github desktop이 훨씬 편하다.\n- git 알못이기 때문에 많은 것을 알기 위해 괴롭고 싶지 않다.\n- 뭐 여튼 깃허브 데스크탑을 킨다.\n- 상단 메뉴바 \\(\\to\\) File \\(\\to\\) Add local repository\n- 그러면 아래와 같은 경고문이 뜬다.\n\n- local하고 연결하고 싶은데 깃허브에는 gcsite가 없으니 대충 만들어 달라는 것임 “create a repository” 를 눌러주자.\n\n- 무시, 걍 create repository ㄱㄱ\n- 그러면 깃허브 데스크탑에서 너 방금 만든거 너꺼 깃허브에 Publish 할거냐고 물어봄\n\n- Publish repository 눌러주면 끝~~ (단, publish할 때 private 체크박스는 해제하구 하자!)\n- 그 다음 내가 생성산 gcsite 저장소 setting으로 넘어가서 pages를 클릭!\n- 아래와 같이 branch를 수정 후 save 버튼 눌러주자"
  },
  {
    "objectID": "posts/DX/2023-07-31-00.intro.html#문서-생성",
    "href": "posts/DX/2023-07-31-00.intro.html#문서-생성",
    "title": "00. Intro & setting",
    "section": "",
    "text": "- quarto 원리 : 작성한 ipynb파일 html파일로 출력해서 그 html파일들로 웹사이트를 구성하는 것1\n- step1. posts와 docs라는 폴더를 만들자\n\nposts는 내가 작성하는 ipynb파일들이 들어갈거고, docs에는 html파일이 들어갈 것이다.\n\n- step2. index 파일 수정\n\nindex파일은 뭐랄까 네비게이터 역할이랄까 아래와 같이 바꿔주자\n\n---\ntitle: \"GC site\"\nlisting:\n  contents: posts\n  sort: [date desc, title]\n  type: table\n  categories: true\n  sort-ui: true\n  filter-ui: true\npage-layout: full\ntitle-block-banner: true\n---\n- step3. _quarto.uml 파일 수정 \\(\\to\\) 템플릿이랑 디자인 이쁜거 많으니 본인 입맛에 맞게 수정하면 됩니당\nproject:\n  type: website\n  output-dir : docs  \nwebsite:\n  title: \"GC site\"\n  page-navigation: true\n  navbar:\n    right:\n      - icon : github\n        href : https://github.com/gangcheol/\n  sidebar:\n    style: \"docked\"\n    search: True\n    contents: auto\n    \nformat:\n  html:\n    css: styles.css\n    toc: true\n    code-fold : False\n    code-line-numbers : True\n    code-copy : True\n\ntheme :\n  light : flatly\n  \neditor : visual\n- step4. 앞서 만든 posts폴더에 아무 파일이나 만들어보자\n\n- step5. 그 후 다시 터미널에서 내가 생성한 폴더로 이동\n필자의 경우는 cd gcsite\n- step6. quarto render 입력\n- step7. github desktop보면 난리가 났을 것이다. 막 일을 좀 많이 했음.\n\n로컬하고 연결되어 있으니 로컬이 하고 있는 걸 다적어서 그럼\n\n\n\n저기 내가 밑에 이러한 기록을 init이라고 써놨다. 저건 내가 로컬에서 한 행동을 내 깃허브 로컬에 저장할 건데, 그 행동을 init이라고 쓴거\n이제 저 Commit to main 버튼을 눌러주고 가운데 화면에 뜨는 push origin을 눌러주자!\n\n- 마지막!! 아까 깃허브 로컬 셋팅에서 pases란에 잠시 후에 들어가보면 다음과 같은 것을 볼 수 있다.\n\n- 저 링크로 들어가면 내가 만든 웹사이트 초안을 볼 수 있다.\n- 링크"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-23-04. numpy & pandas (5).html",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-23-04. numpy & pandas (5).html",
    "title": "04. numpy & pandas (5)",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"plotly_mimetype+notebook_connected\"\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-23-04. numpy & pandas (5).html#데이터-프레임-합치기-axis1",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-23-04. numpy & pandas (5).html#데이터-프레임-합치기-axis1",
    "title": "04. numpy & pandas (5)",
    "section": "데이터 프레임 합치기 (axis=1)",
    "text": "데이터 프레임 합치기 (axis=1)\n- axis=1 \\(\\to\\) 옆으로 붙임\n\n_df = pd.concat([pop1,pop2],axis=1,join=\"outer\")\n\n\n_df.head()\n\n\n\n\n\n\n\n\nk_male\nk_female\nf_male\nf_female\n\n\n\n\n1981\n4160\n4191\nNaN\nNaN\n\n\n1982\n4160\n4191\nNaN\nNaN\n\n\n1983\n4160\n4191\nNaN\nNaN\n\n\n1984\n4160\n4191\nNaN\nNaN\n\n\n1985\n4160\n4191\n7.0\n6.0\n\n\n\n\n\n\n\n- 데이터를 합친 결과 : pop02 에는 1981~1984년 데이터가 없어 결측치가 생긴다.\n\njoin = \"inner\"옵션을 주면 매핑이 되지 않은 데이터는 제거해서 보여준다.\n\n\n_df = pd.concat([pop1,pop2],axis=1,join=\"inner\")\n\n\n_df.head()\n\n\n\n\n\n\n\n\nk_male\nk_female\nf_male\nf_female\n\n\n\n\n1985\n4160\n4191\n7\n6\n\n\n1986\n4899\n4888\n7\n5\n\n\n1987\n5000\n4979\n6\n5\n\n\n1988\n5156\n5120\n5\n5\n\n\n1989\n5305\n5261\n6\n5"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-23-04. numpy & pandas (5).html#데이터-프레임-합치기-axis0",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-23-04. numpy & pandas (5).html#데이터-프레임-합치기-axis0",
    "title": "04. numpy & pandas (5)",
    "section": "데이터 프레임 합치기 (axis=0)",
    "text": "데이터 프레임 합치기 (axis=0)\n- axis = 0은 생략가능하다. \\(\\to\\) 세로로 합치기\n\n# 서울 인구정보 읽어오기 #1\npath = 'https://raw.githubusercontent.com/Jangrae/csv/master/seoul_pop_v01.csv'\npop1 = pd.read_csv(path)\n\npath = 'https://raw.githubusercontent.com/Jangrae/csv/master/seoul_pop_v02.csv'\npop2 = pd.read_csv(path)\n\n\npop1.head()\n\n\n\n\n\n\n\n\nyear\nk_male\nk_female\nf_male\nf_female\n\n\n\n\n0\n1985\n4788\n4838\n7\n6\n\n\n1\n1986\n4899\n4888\n7\n5\n\n\n2\n1987\n5000\n4979\n6\n5\n\n\n3\n1988\n5156\n5120\n5\n5\n\n\n4\n1989\n5305\n5261\n6\n5\n\n\n\n\n\n\n\n\npop2.head()\n\n\n\n\n\n\n\n\nyear\nk_male\nk_female\nf_male\nf_female\n\n\n\n\n0\n2001\n5142\n5122\n34\n34\n\n\n1\n2002\n5109\n5098\n36\n37\n\n\n2\n2003\n5085\n5089\n49\n54\n\n\n3\n2004\n5075\n5098\n54\n61\n\n\n4\n2005\n5062\n5105\n61\n68\n\n\n\n\n\n\n\n\n pd.concat([pop1,pop2],axis=0,join=\"outer\").head()\n\n\n\n\n\n\n\n\nyear\nk_male\nk_female\nf_male\nf_female\n\n\n\n\n0\n1985\n4788\n4838\n7\n6\n\n\n1\n1986\n4899\n4888\n7\n5\n\n\n2\n1987\n5000\n4979\n6\n5\n\n\n3\n1988\n5156\n5120\n5\n5\n\n\n4\n1989\n5305\n5261\n6\n5\n\n\n\n\n\n\n\n\n pd.concat([pop1,pop2],axis=0,join=\"inner\").head()\n\n\n\n\n\n\n\n\nyear\nk_male\nk_female\nf_male\nf_female\n\n\n\n\n0\n1985\n4788\n4838\n7\n6\n\n\n1\n1986\n4899\n4888\n7\n5\n\n\n2\n1987\n5000\n4979\n6\n5\n\n\n3\n1988\n5156\n5120\n5\n5\n\n\n4\n1989\n5305\n5261\n6\n5"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-23-04. numpy & pandas (5).html#inner-join",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-23-04. numpy & pandas (5).html#inner-join",
    "title": "04. numpy & pandas (5)",
    "section": "inner join",
    "text": "inner join\n\n같은 이름의 열이 있으면 on옵션을 지정하지 않아도 해당 열을 기준으로 합침\nhow=\"inner\" 옵션은 디폴트 옵션!\n\n\npop = pd.merge(pop1,pop2, on =\"year\",how = \"inner\")\n\n\npop.head()\n\n\n\n\n\n\n\n\nyear\nk_male\nk_female\nf_male\nf_female\n\n\n\n\n0\n1985\n4160\n4191\n7\n6\n\n\n1\n1986\n4899\n4888\n7\n5\n\n\n2\n1987\n5000\n4979\n6\n5\n\n\n3\n1988\n5156\n5120\n5\n5\n\n\n4\n1989\n5305\n5261\n6\n5"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-23-04. numpy & pandas (5).html#outer-join",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-23-04. numpy & pandas (5).html#outer-join",
    "title": "04. numpy & pandas (5)",
    "section": "outer join",
    "text": "outer join\n\nhow=\"outer\" 와 how=\"left\"의 조인 결과는 동일하다.\n\n\npop = pd.merge(pop1,pop2, on =\"year\",how = \"outer\")\n\n\npop.head()\n\n\n\n\n\n\n\n\nyear\nk_male\nk_female\nf_male\nf_female\n\n\n\n\n0\n1981\n4160\n4191\nNaN\nNaN\n\n\n1\n1982\n4160\n4191\nNaN\nNaN\n\n\n2\n1983\n4160\n4191\nNaN\nNaN\n\n\n3\n1984\n4160\n4191\nNaN\nNaN\n\n\n4\n1985\n4160\n4191\n7.0\n6.0\n\n\n\n\n\n\n\n\npop = pd.merge(pop1,pop2, on =\"year\",how = \"left\")\n\n\npop.head()\n\n\n\n\n\n\n\n\nyear\nk_male\nk_female\nf_male\nf_female\n\n\n\n\n0\n1981\n4160\n4191\nNaN\nNaN\n\n\n1\n1982\n4160\n4191\nNaN\nNaN\n\n\n2\n1983\n4160\n4191\nNaN\nNaN\n\n\n3\n1984\n4160\n4191\nNaN\nNaN\n\n\n4\n1985\n4160\n4191\n7.0\n6.0"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-23-04. numpy & pandas (5).html#join의-또-다른-방법",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-23-04. numpy & pandas (5).html#join의-또-다른-방법",
    "title": "04. numpy & pandas (5)",
    "section": "join의 또 다른 방법",
    "text": "join의 또 다른 방법\n\npop1.join(pop2.set_index(\"year\"),on=\"year\",how=\"outer\").head()\n\n\n\n\n\n\n\n\nyear\nk_male\nk_female\nf_male\nf_female\n\n\n\n\n0\n1981\n4160\n4191\nNaN\nNaN\n\n\n1\n1982\n4160\n4191\nNaN\nNaN\n\n\n2\n1983\n4160\n4191\nNaN\nNaN\n\n\n3\n1984\n4160\n4191\nNaN\nNaN\n\n\n4\n1985\n4160\n4191\n7.0\n6.0\n\n\n\n\n\n\n\n\npop1.join(pop2.set_index(\"year\"),on=\"year\",how=\"inner\").head()\n\n\n\n\n\n\n\n\nyear\nk_male\nk_female\nf_male\nf_female\n\n\n\n\n4\n1985\n4160\n4191\n7\n6\n\n\n5\n1986\n4899\n4888\n7\n5\n\n\n6\n1987\n5000\n4979\n6\n5\n\n\n7\n1988\n5156\n5120\n5\n5\n\n\n8\n1989\n5305\n5261\n6\n5"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-23-04. numpy & pandas (5).html#setting",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-23-04. numpy & pandas (5).html#setting",
    "title": "04. numpy & pandas (5)",
    "section": "setting",
    "text": "setting\n\n# 폰트설정\nplt.rcParams['font.family'] = 'Malgun Gothic'\nplt.rcParams['axes.unicode_minus'] = False"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-23-04. numpy & pandas (5).html#test",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-23-04. numpy & pandas (5).html#test",
    "title": "04. numpy & pandas (5)",
    "section": "test",
    "text": "test\n\nx = [1,2,3,4]\ny = [1,2,4,4]\n\n\nplt.plot(x,y)\nplt.xlabel(\"x축\")\nplt.ylabel(\"y축\")\n\nText(0, 0.5, 'y축')"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-21-02. numpy & pandas (3).html",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-21-02. numpy & pandas (3).html",
    "title": "02. numpy & pandas (3)",
    "section": "",
    "text": "import plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"plotly_mimetype+notebook_connected\"\nimport numpy as np\nimport pandas as pd"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-21-02. numpy & pandas (3).html#plotly-test",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-21-02. numpy & pandas (3).html#plotly-test",
    "title": "02. numpy & pandas (3)",
    "section": "plotly test",
    "text": "plotly test\n\ntip.plot.box(backend = \"plotly\",\n            x = \"time\",\n            y = \"tip\", color = \"sex\")"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-21-02. numpy & pandas (3).html#열-조회",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-21-02. numpy & pandas (3).html#열-조회",
    "title": "02. numpy & pandas (3)",
    "section": "열 조회",
    "text": "열 조회\n\ntip.loc[:,[\"total_bill\"]].head()\n\n\n\n\n\n\n\n\ntotal_bill\n\n\n\n\n0\n16.99\n\n\n1\n10.34\n\n\n2\n21.01\n\n\n3\n23.68\n\n\n4\n24.59\n\n\n\n\n\n\n\n\ntip.loc[:,[\"tip\",\"total_bill\"]].head()\n\n\n\n\n\n\n\n\ntip\ntotal_bill\n\n\n\n\n0\n1.01\n16.99\n\n\n1\n1.66\n10.34\n\n\n2\n3.50\n21.01\n\n\n3\n3.31\n23.68\n\n\n4\n3.61\n24.59\n\n\n\n\n\n\n\n\ntip.loc[:,[\"tip\",\"day\",\"total_bill\"]].sort_values(\"tip\",ascending=False)\n\n\n\n\n\n\n\n\ntip\nday\ntotal_bill\n\n\n\n\n170\n10.00\nSat\n50.81\n\n\n212\n9.00\nSat\n48.33\n\n\n23\n7.58\nSat\n39.42\n\n\n59\n6.73\nSat\n48.27\n\n\n141\n6.70\nThur\n34.30\n\n\n...\n...\n...\n...\n\n\n0\n1.01\nSun\n16.99\n\n\n236\n1.00\nSat\n12.60\n\n\n111\n1.00\nSat\n7.25\n\n\n67\n1.00\nSat\n3.07\n\n\n92\n1.00\nFri\n5.75\n\n\n\n\n244 rows × 3 columns\n\n\n\n- 인덱스 제거\n\ntip.loc[:,[\"tip\",\"day\",\"total_bill\"]].\\\n        sort_values(\"tip\",ascending=False).\\\n            reset_index(drop=True)\n\n\n\n\n\n\n\n\ntip\nday\ntotal_bill\n\n\n\n\n0\n10.00\nSat\n50.81\n\n\n1\n9.00\nSat\n48.33\n\n\n2\n7.58\nSat\n39.42\n\n\n3\n6.73\nSat\n48.27\n\n\n4\n6.70\nThur\n34.30\n\n\n...\n...\n...\n...\n\n\n239\n1.01\nSun\n16.99\n\n\n240\n1.00\nSat\n12.60\n\n\n241\n1.00\nSat\n7.25\n\n\n242\n1.00\nSat\n3.07\n\n\n243\n1.00\nFri\n5.75\n\n\n\n\n244 rows × 3 columns\n\n\n\n- 열 범위 조회\n\ntip.head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4\n\n\n\n\n\n\n\n\ntip.loc[:,\"tip\":\"day\"].head()\n\n\n\n\n\n\n\n\ntip\nsex\nsmoker\nday\n\n\n\n\n0\n1.01\nFemale\nNo\nSun\n\n\n1\n1.66\nMale\nNo\nSun\n\n\n2\n3.50\nMale\nNo\nSun\n\n\n3\n3.31\nMale\nNo\nSun\n\n\n4\n3.61\nFemale\nNo\nSun"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-21-02. numpy & pandas (3).html#행-조회",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-21-02. numpy & pandas (3).html#행-조회",
    "title": "02. numpy & pandas (3)",
    "section": "행 조회",
    "text": "행 조회\n\n단일 조건 조회\n\ntip.loc[tip.tip&gt;6.0,:]\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n23\n39.42\n7.58\nMale\nNo\nSat\nDinner\n4\n\n\n59\n48.27\n6.73\nMale\nNo\nSat\nDinner\n4\n\n\n141\n34.30\n6.70\nMale\nNo\nThur\nLunch\n6\n\n\n170\n50.81\n10.00\nMale\nYes\nSat\nDinner\n3\n\n\n183\n23.17\n6.50\nMale\nYes\nSun\nDinner\n4\n\n\n212\n48.33\n9.00\nMale\nNo\nSat\nDinner\n4\n\n\n214\n28.17\n6.50\nFemale\nYes\nSat\nDinner\n3\n\n\n\n\n\n\n\n\ntip.loc[map(lambda x : x &gt;6.0,tip.tip),:]\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n23\n39.42\n7.58\nMale\nNo\nSat\nDinner\n4\n\n\n59\n48.27\n6.73\nMale\nNo\nSat\nDinner\n4\n\n\n141\n34.30\n6.70\nMale\nNo\nThur\nLunch\n6\n\n\n170\n50.81\n10.00\nMale\nYes\nSat\nDinner\n3\n\n\n183\n23.17\n6.50\nMale\nYes\nSun\nDinner\n4\n\n\n212\n48.33\n9.00\nMale\nNo\nSat\nDinner\n4\n\n\n214\n28.17\n6.50\nFemale\nYes\nSat\nDinner\n3\n\n\n\n\n\n\n\n\n\n여러 조건 조회\n- map(lambda)를 사용하지 않고 데이터 프레임을 필터링 할 때는 and 대신 &연산자를 사용해야함.\n\nor 도 | 으로 사용해야 한다.\n\n\ntip.loc[(tip.tip&gt;6.0) & (tip.day == \"Sat\"),:]\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n23\n39.42\n7.58\nMale\nNo\nSat\nDinner\n4\n\n\n59\n48.27\n6.73\nMale\nNo\nSat\nDinner\n4\n\n\n170\n50.81\n10.00\nMale\nYes\nSat\nDinner\n3\n\n\n212\n48.33\n9.00\nMale\nNo\nSat\nDinner\n4\n\n\n214\n28.17\n6.50\nFemale\nYes\nSat\nDinner\n3\n\n\n\n\n\n\n\n\ntip.loc[(tip.tip&gt;6.0) & (tip.day == \"Sat\")]\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n23\n39.42\n7.58\nMale\nNo\nSat\nDinner\n4\n\n\n59\n48.27\n6.73\nMale\nNo\nSat\nDinner\n4\n\n\n170\n50.81\n10.00\nMale\nYes\nSat\nDinner\n3\n\n\n212\n48.33\n9.00\nMale\nNo\nSat\nDinner\n4\n\n\n214\n28.17\n6.50\nFemale\nYes\nSat\nDinner\n3\n\n\n\n\n\n\n\n\ntip.loc[(tip.tip&gt;6.0) | (tip.day == \"Sat\")]\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n19\n20.65\n3.35\nMale\nNo\nSat\nDinner\n3\n\n\n20\n17.92\n4.08\nMale\nNo\nSat\nDinner\n2\n\n\n21\n20.29\n2.75\nFemale\nNo\nSat\nDinner\n2\n\n\n22\n15.77\n2.23\nFemale\nNo\nSat\nDinner\n2\n\n\n23\n39.42\n7.58\nMale\nNo\nSat\nDinner\n4\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n238\n35.83\n4.67\nFemale\nNo\nSat\nDinner\n3\n\n\n239\n29.03\n5.92\nMale\nNo\nSat\nDinner\n3\n\n\n240\n27.18\n2.00\nFemale\nYes\nSat\nDinner\n2\n\n\n241\n22.67\n2.00\nMale\nYes\nSat\nDinner\n2\n\n\n242\n17.82\n1.75\nMale\nNo\nSat\nDinner\n2\n\n\n\n\n89 rows × 7 columns\n\n\n\n\ntip.loc[map(lambda x,y : (x&gt;6.0) and (y == \"Sat\"),tip.tip, tip.day)]\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n23\n39.42\n7.58\nMale\nNo\nSat\nDinner\n4\n\n\n59\n48.27\n6.73\nMale\nNo\nSat\nDinner\n4\n\n\n170\n50.81\n10.00\nMale\nYes\nSat\nDinner\n3\n\n\n212\n48.33\n9.00\nMale\nNo\nSat\nDinner\n4\n\n\n214\n28.17\n6.50\nFemale\nYes\nSat\nDinner\n3\n\n\n\n\n\n\n\n\ntip.loc[map(lambda x,y : (x&gt;6.0) or (y == \"Sat\"),tip.tip, tip.day)]\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n19\n20.65\n3.35\nMale\nNo\nSat\nDinner\n3\n\n\n20\n17.92\n4.08\nMale\nNo\nSat\nDinner\n2\n\n\n21\n20.29\n2.75\nFemale\nNo\nSat\nDinner\n2\n\n\n22\n15.77\n2.23\nFemale\nNo\nSat\nDinner\n2\n\n\n23\n39.42\n7.58\nMale\nNo\nSat\nDinner\n4\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n238\n35.83\n4.67\nFemale\nNo\nSat\nDinner\n3\n\n\n239\n29.03\n5.92\nMale\nNo\nSat\nDinner\n3\n\n\n240\n27.18\n2.00\nFemale\nYes\nSat\nDinner\n2\n\n\n241\n22.67\n2.00\nMale\nYes\nSat\nDinner\n2\n\n\n242\n17.82\n1.75\nMale\nNo\nSat\nDinner\n2\n\n\n\n\n89 rows × 7 columns\n\n\n\n\n\nisin(),between()\n\ntip.loc[tip.day.isin([\"Sat\",\"Sun\"]), :].head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4\n\n\n\n\n\n\n\n- between(\\(x_1,x_2\\)) \\(\\to x_1 \\leq X \\leq x_2\\)\n\ntip.loc[tip.tip.between(1,2)].head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n6\n8.77\n2.00\nMale\nNo\nSun\nDinner\n2\n\n\n8\n15.04\n1.96\nMale\nNo\nSun\nDinner\n2\n\n\n10\n10.27\n1.71\nMale\nNo\nSun\nDinner\n2"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-21-02. numpy & pandas (3).html#특정-열의-합-구하기",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-21-02. numpy & pandas (3).html#특정-열의-합-구하기",
    "title": "02. numpy & pandas (3)",
    "section": "특정 열의 합 구하기",
    "text": "특정 열의 합 구하기\n- total_bill의 합계 구하기\n\ntip.total_bill.sum()\n\n4827.77\n\n\n- 두 열의 합계\n\ntip[[\"total_bill\",\"tip\"]].sum()\n\ntotal_bill    4827.77\ntip            731.58\ndtype: float64"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-21-02. numpy & pandas (3).html#특정-범주형-변수를-기준으로-합을-구하기",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-21-02. numpy & pandas (3).html#특정-범주형-변수를-기준으로-합을-구하기",
    "title": "02. numpy & pandas (3)",
    "section": "특정 범주형 변수를 기준으로 합을 구하기",
    "text": "특정 범주형 변수를 기준으로 합을 구하기\n- 방법 1\n\nas_index =True \\(\\to\\) 집계 기준이 되는 열이 인덱스로 설정됨\n\n\ntip.groupby(\"day\",as_index = True)[\"tip\"].sum()\n\nday\nFri      51.96\nSat     260.40\nSun     247.39\nThur    171.83\nName: tip, dtype: float64\n\n\n- 방법 2\n\ntip.groupby(\"day\",as_index = False)[\"tip\"].sum()\n\n\n\n\n\n\n\n\nday\ntip\n\n\n\n\n0\nFri\n51.96\n\n\n1\nSat\n260.40\n\n\n2\nSun\n247.39\n\n\n3\nThur\n171.83\n\n\n\n\n\n\n\n- 방법 3\n\ntip.groupby(\"day\").agg({\"tip\" : sum}).reset_index()\n\n\n\n\n\n\n\n\nday\ntip\n\n\n\n\n0\nFri\n51.96\n\n\n1\nSat\n260.40\n\n\n2\nSun\n247.39\n\n\n3\nThur\n171.83\n\n\n\n\n\n\n\n\n데이터 프레임으로 선언\n\ntip_sum = tip.groupby(\"day\").agg({\"tip\" : sum}).reset_index()\n\n\ntip_sum\n\n\n\n\n\n\n\n\nday\ntip\n\n\n\n\n0\nFri\n51.96\n\n\n1\nSat\n260.40\n\n\n2\nSun\n247.39\n\n\n3\nThur\n171.83\n\n\n\n\n\n\n\n\n\n집계 결과 시각화\n\nplt.figure(figsize=(4,2))\nplt.bar(x=tip_sum.day, height =tip_sum.tip)\nplt.title(\"Tips by day\",size =15,fontweight=\"bold\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"tip\")\nplt.grid(axis=\"y\")\n\n\n\n\n- 가로 막대\n\nplt.figure(figsize=(4,2))\nplt.barh(y=tip_sum.day, width =tip_sum.tip)\nplt.title(\"Tips by day\",size =15,fontweight=\"bold\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"tip\")\nplt.grid(axis=\"y\")\n\n\n\n\n- 색상 변경\n\nplt.figure(figsize=(4,2))\nplt.barh(y=tip_sum.day, width =tip_sum.tip,color= \"tab:orange\")\nplt.title(\"Tips by day\",size =15,fontweight=\"bold\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"tip\")\n\nText(0, 0.5, 'tip')\n\n\n\n\n\n\n\nlineplot\n\nfig, axes =plt.subplots(1,2,figsize=(4,2))\n\nax1,ax2=axes\nax1.plot(tip.tip)\nax2.plot(tip[[\"total_bill\",\"tip\"]])\nax1.legend([\"tip\",\"tip & total_bill\"],loc=\"upper left\")\nax2.legend([\"tip\",\"tip & total_bill\"],loc=\"upper left\")\nfig.tight_layout()\n\n\n\n\n\n\nhist\n\nplt.figure(figsize=(4,2))\nplt.hist(tip.tip,alpha=0.3,bins=20)\nplt.title(\"hist of tip\")\nplt.axvline(tip.tip.median(),color=\"r\")\nplt.text(tip.tip.median()+1,30,tip.tip.median(),color=\"r\")\n\nText(3.9, 30, '2.9')"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-21-02. numpy & pandas (3).html#여러-열-집계",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-21-02. numpy & pandas (3).html#여러-열-집계",
    "title": "02. numpy & pandas (3)",
    "section": "여러 열 집계",
    "text": "여러 열 집계\n1. 특정 열을 지정 후 집계\n\n_ts = tip.groupby(\"day\").agg({\"total_bill\":sum,\n                         \"tip\" : sum  }).reset_index()\n_ts\n\n\n\n\n\n\n\n\nday\ntotal_bill\ntip\n\n\n\n\n0\nFri\n325.88\n51.96\n\n\n1\nSat\n1778.40\n260.40\n\n\n2\nSun\n1627.16\n247.39\n\n\n3\nThur\n1096.33\n171.83\n\n\n\n\n\n\n\n2 컬럼이 numeric인 열만 집계\n\ntip.groupby(\"day\",as_index= False).sum(numeric_only=True)\n\n\n\n\n\n\n\n\nday\ntotal_bill\ntip\nsize\n\n\n\n\n0\nFri\n325.88\n51.96\n40\n\n\n1\nSat\n1778.40\n260.40\n219\n\n\n2\nSun\n1627.16\n247.39\n216\n\n\n3\nThur\n1096.33\n171.83\n152\n\n\n\n\n\n\n\n3 일별, 흡연 여부를 포함하여 집계\n\n_ts = tip.groupby([\"day\",\"smoker\"],as_index=False).sum(numeric_only=True)\n_ts\n\n\n\n\n\n\n\n\nday\nsmoker\ntotal_bill\ntip\nsize\n\n\n\n\n0\nFri\nNo\n73.68\n11.25\n9\n\n\n1\nFri\nYes\n252.20\n40.71\n31\n\n\n2\nSat\nNo\n884.78\n139.63\n115\n\n\n3\nSat\nYes\n893.62\n120.77\n104\n\n\n4\nSun\nNo\n1168.88\n180.57\n167\n\n\n5\nSun\nYes\n458.28\n66.82\n49\n\n\n6\nThur\nNo\n770.09\n120.32\n112\n\n\n7\nThur\nYes\n326.24\n51.51\n40\n\n\n\n\n\n\n\n4 요일별 팁의 평균\n\ntip.groupby([\"day\"],as_index=False).agg({\"tip\" : np.mean})\n\n\n\n\n\n\n\n\nday\ntip\n\n\n\n\n0\nFri\n2.734737\n\n\n1\nSat\n2.993103\n\n\n2\nSun\n3.255132\n\n\n3\nThur\n2.771452\n\n\n\n\n\n\n\n5 day, sex별 모든 숫자 열의 평균\n\ntip.groupby([\"day\",\"sex\"],as_index=False).mean(numeric_only=True)\n\n\n\n\n\n\n\n\nday\nsex\ntotal_bill\ntip\nsize\n\n\n\n\n0\nFri\nFemale\n14.145556\n2.781111\n2.111111\n\n\n1\nFri\nMale\n19.857000\n2.693000\n2.100000\n\n\n2\nSat\nFemale\n19.680357\n2.801786\n2.250000\n\n\n3\nSat\nMale\n20.802542\n3.083898\n2.644068\n\n\n4\nSun\nFemale\n19.872222\n3.367222\n2.944444\n\n\n5\nSun\nMale\n21.887241\n3.220345\n2.810345\n\n\n6\nThur\nFemale\n16.715312\n2.575625\n2.468750\n\n\n7\nThur\nMale\n18.714667\n2.980333\n2.433333\n\n\n\n\n\n\n\n6 요일별 tip의 최대값 구하기\n\ntip.groupby([\"day\"],as_index=False).tip.max()\n\n\n\n\n\n\n\n\nday\ntip\n\n\n\n\n0\nFri\n4.73\n\n\n1\nSat\n10.00\n\n\n2\nSun\n6.50\n\n\n3\nThur\n6.70"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html",
    "title": "00. numpy & pandas (1)",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#차원-배열의-선언",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#차원-배열의-선언",
    "title": "00. numpy & pandas (1)",
    "section": "(1) 1차원 배열의 선언",
    "text": "(1) 1차원 배열의 선언\n- 튜플\n\nnp.array((1,2,3))\n\narray([1, 2, 3])\n\n\n- 리스트\n\nnp.array([1,2,3])\n\narray([1, 2, 3])\n\n\n- range\n\nnp.array(range(10))\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\n알아두면 좋은 1차원 배열 선언\n\nnp.zeros(3)\n\narray([0., 0., 0.])\n\n\n\nnp.ones(3)\n\narray([1., 1., 1.])\n\n\n- np.linspace(2,8,4) : 2~8까지, 4개의 원소를 생성\n\nnp.linspace(2,8,4)\n\narray([2., 4., 6., 8.])\n\n\n- np.arange(start,end) : nump버전 range라고 생각하자!\n\nnp.arange(5), np.arange(1,6)\n\n(array([0, 1, 2, 3, 4]), array([1, 2, 3, 4, 5]))\n\n\n\n\n주의 1. 배열의 자료형\n- 숫자 \\(\\to\\) 문자\n\na = np.array([1,\"A\",3.0])\na\n\narray(['1', 'A', '3'], dtype='&lt;U11')\n\n\n- 정수 \\(\\to\\) 실수\n\na = np.array([1,2,3.0])\na\n\narray([1., 2., 3.])"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#차원-배열의-선언-1",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#차원-배열의-선언-1",
    "title": "00. numpy & pandas (1)",
    "section": "(2) 2차원 배열의 선언",
    "text": "(2) 2차원 배열의 선언\n\nlist\n\na1 = [[1,2,3],\n     [4,5,6]]\n\nnp.array(a1)\n\narray([[1, 2, 3],\n       [4, 5, 6]])\n\n\n\n\nstack\n\na1 = np.random.randint(0,9,3)\na2 = np.random.randint(0,9,3)\n\nA1 = np.stack([a1,a2],axis=0) \nA1, A1.shape\n\n(array([[0, 4, 2],\n        [3, 2, 3]]),\n (2, 3))\n\n\n\nA2 = np.stack([a1,a2],axis=1) \nA2, A2.shape\n\n(array([[0, 3],\n        [4, 2],\n        [2, 3]]),\n (3, 2))"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#차원-배열의-선언-2",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#차원-배열의-선언-2",
    "title": "00. numpy & pandas (1)",
    "section": "(3) 3차원 배열의 선언",
    "text": "(3) 3차원 배열의 선언\n\nlist\n\na = [[[1,2],[3,4]],[[5,6],[7,8]]]\nnp.array(a), np.array(a).shape\n\n(array([[[1, 2],\n         [3, 4]],\n \n        [[5, 6],\n         [7, 8]]]),\n (2, 2, 2))\n\n\n\n\nstack + reshape\n\na1 = np.random.randint(0,9,4)\na2 = np.random.randint(0,9,4)\na3 = np.random.randint(0,9,4)\n\nA1 = np.stack([a1,a2,a3],axis=0).reshape(2,3,2)\nA1, A1.shape\n\n(array([[[8, 8],\n         [4, 0],\n         [6, 8]],\n \n        [[8, 4],\n         [0, 1],\n         [1, 6]]]),\n (2, 3, 2))\n\n\n\nA1.dtype\n\ndtype('int32')"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#행-조회",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#행-조회",
    "title": "00. numpy & pandas (1)",
    "section": "행 조회",
    "text": "행 조회\n\nA1[0:2,]\n\narray([[8, 8, 7],\n       [3, 1, 1]])\n\n\n\nA1[[0,1,2]]\n\narray([[8, 8, 7],\n       [3, 1, 1],\n       [3, 5, 7]])\n\n\n\nA1[[0,1,2], : ]\n\narray([[8, 8, 7],\n       [3, 1, 1],\n       [3, 5, 7]])"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#열-조회",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#열-조회",
    "title": "00. numpy & pandas (1)",
    "section": "열 조회",
    "text": "열 조회\n\nA1[:,0:2]\n\narray([[8, 8],\n       [3, 1],\n       [3, 5],\n       [7, 8]])\n\n\n\nA1[:,[0,1,2]]\n\narray([[8, 8, 7],\n       [3, 1, 1],\n       [3, 5, 7],\n       [7, 8, 6]])"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#행열-조회",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#행열-조회",
    "title": "00. numpy & pandas (1)",
    "section": "행,열 조회",
    "text": "행,열 조회\n\nA1[0:2,0:2]\n\narray([[8, 8],\n       [3, 1]])"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#stride-start-end-interval",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#stride-start-end-interval",
    "title": "00. numpy & pandas (1)",
    "section": "stride( start :end : interval)",
    "text": "stride( start :end : interval)\n\nA1\n\narray([[8, 8, 7],\n       [3, 1, 1],\n       [3, 5, 7],\n       [7, 8, 6]])\n\n\n\nA1[::2, ::2]\n\narray([[8, 7],\n       [3, 7]])"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#특정값을-지정하여-접근",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#특정값을-지정하여-접근",
    "title": "00. numpy & pandas (1)",
    "section": "특정값을 지정하여 접근",
    "text": "특정값을 지정하여 접근\n\nA1\n\narray([[8, 8, 7],\n       [3, 1, 1],\n       [3, 5, 7],\n       [7, 8, 6]])\n\n\n\nA1[A1==1]\n\narray([1, 1])\n\n\n\nA1[A1==7]\n\narray([7, 7, 7])"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#기본-연산",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#기본-연산",
    "title": "00. numpy & pandas (1)",
    "section": "기본 연산",
    "text": "기본 연산\n\na = np.array([1,2,3])\n\n\n\nCode\nprint(f'''\n1. 사칙연산 \n\na + 1 = {a+1}\na - 2 = {a-2}\na x 2 = {a*2}\na / 2 = {a/2}\na // 2 = {a//2}\na % 2 = {a % 2}\n\n=======================================\n\n2. 거듭제곱, 로그, 지수, 삼각함수\n\na^2 = {a**2}\nsqrt(a) = {np.round(np.sqrt(a),2)}\nlog(a) = {np.round(np.log(a),2)}\nexp(a) = {np.round(np.exp(a),2)}\nsin(a),cos(a) = {np.round(np.sin(a),2),np.round(np.cos(a),2)}\n''')\n\n\n\n1. 사칙연산 \n\na + 1 = [2 3 4]\na - 2 = [-1  0  1]\na x 2 = [2 4 6]\na / 2 = [0.5 1.  1.5]\na // 2 = [0 1 1]\na % 2 = [1 0 1]\n\n=======================================\n\n2. 거듭제곱, 로그, 지수, 삼각함수\n\na^2 = [1 4 9]\nsqrt(a) = [1.   1.41 1.73]\nlog(a) = [0.   0.69 1.1 ]\nexp(a) = [ 2.72  7.39 20.09]\nsin(a),cos(a) = (array([0.84, 0.91, 0.14]), array([ 0.54, -0.42, -0.99]))"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#기타-연산전치행렬역행렬",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-00. numpy & pandas (1).html#기타-연산전치행렬역행렬",
    "title": "00. numpy & pandas (1)",
    "section": "기타 연산(전치행렬,역행렬)",
    "text": "기타 연산(전치행렬,역행렬)\n\na1 = np.random.randint(0,9,3)\na2 = np.random.randint(0,9,3)\na3 = np.random.randint(0,9,3)\n\nA1 = np.stack([a1,a2,a3],axis=0) \nA1\n\narray([[8, 1, 1],\n       [2, 1, 4],\n       [4, 4, 1]])\n\n\n- 전치행렬\n\nA1.T\n\narray([[8, 2, 4],\n       [1, 1, 4],\n       [1, 4, 1]])\n\n\n- 역행렬\n\nnp.linalg.inv(A1)\n\narray([[ 0.14705882, -0.02941176, -0.02941176],\n       [-0.1372549 , -0.03921569,  0.29411765],\n       [-0.03921569,  0.2745098 , -0.05882353]])\n\n\n- 행렬연산\n\\[\\bf A^{-1} \\times A = {I}\\]\n\\[\\bf {I} = \\begin{bmatrix} 1 & 0 & \\dots & 0 \\\\\n                                                     0 & 1 & \\dots & 0 \\\\\n                                                     \\dots &\\dots &\\dots &\\dots \\\\\n                                                     0 & 0 & \\dots & 1\n                                                        \\end{bmatrix}\\]\n\nnp.round(A1 @ np.linalg.inv(A1),2)\n\narray([[ 1.,  0.,  0.],\n       [ 0.,  1., -0.],\n       [ 0.,  0.,  1.]])"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#모티블-클래스를-매번-수정하기-불편해",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#모티블-클래스를-매번-수정하기-불편해",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "모티블 : 클래스를 매번 수정하기 불편해",
    "text": "모티블 : 클래스를 매번 수정하기 불편해"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#upjump---ver1",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#upjump---ver1",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "UPjump - Ver1",
    "text": "UPjump - Ver1\n\nclass UpJump:\n    def __init__(self):\n        self.value = 0\n    def up(self):\n        self.value = self.value + 1  \n    def jump(self,jump_size):\n        self.value = self.value + jump_size\n    def __repr__(self):\n        return str(self.value)        \n\n\na = UpJump()\na.jump(2)\n\n\na\n\n2"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#upjump---ver2",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#upjump---ver2",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "Upjump - Ver2",
    "text": "Upjump - Ver2\n\nclass UpJump_Ver2(UpJump):\n    def jump(self,jump_size):\n        self.value = self.value + jump_size\n\n\na = UpJump_Ver2()\n\n\na.jump(2)\n\n\na\n\n2"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#tip",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#tip",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "tip",
    "text": "tip\n- 클래스를 조금 수정하고 싶을때, 아래와 같은 문법을 이용하면 편리하다.\nclass 새로운 클래스(수정할 클래스):\n    def 수정 및 추가할 함수(self,parameter):\n        return ...\n- 사용에시\n\nclass temp(UpJump) :\n      def __repr__(self) :\n        return f\"현재 value는 {self.value}입니다.\"\n\n\na = temp()\n\n\na.jump(50)\n\n\na\n\n현재 value는 50입니다."
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#motive",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#motive",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "motive",
    "text": "motive\n\n클래스를 배우기 전 : int 자료형의 +는 “정수의 덧셈”을 의미하고 list자료형의 +는 “자료의 추가” 를 의미한다.\n클래스를 배운 후 : 아마 int, list 클래스의 + 라는 연산을 정의하는 숨겨진 메소드가 있을 것이다.\n\n\na,b= 1,2\n\n- int\n\nprint(f\"a = {a}, b = {b}, a+b = {a+b}\")\nprint(f\"a = {a}, b = {b}, a.__add__(b) = {a.__add__(b)}\")\n\na = 1, b = 2, a+b = 3\na = 1, b = 2, a.__add__(b) = 3\n\n\n- list\n\na,b = [1,2],[3,4]\n\n\nprint(f\"a = {a}, b = {b}, a+b = {a+b}\")\nprint(f\"a = {a}, b = {b}, a.__add__(b) = {a.__add__(b)}\")\n\na = [1, 2], b = [3, 4], a+b = [1, 2, 3, 4]\na = [1, 2], b = [3, 4], a.__add__(b) = [1, 2, 3, 4]\n\n\n- 확인 : a+b는 사실 내부적으로 a.__add__(b)의 축약구문이다.\n- 추측 : 따라서 만약 : a.__add__(b)의 기능을 재정의 하면 a+b의 기능도 바뀔것이다."
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex1.-__add__",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex1.-__add__",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "ex1. __add__()",
    "text": "ex1. __add__()\n- 클래스 선언\n\n한 학기를 등록할 때마다. 학생의 나이가 0.5, 학기가 1 증가하는 __add__ 함수를 클래스 내부에 구현\n\n\nclass s:\n    def __init__(self, age=20.0, semester=0): \n        self.age = age\n        self.semester = semester\n        print(f\"입학을 축하합니다. 당신의 나이는 {self.age}이고 현재 학기는 {self.semester}학기 입니다.\")\n    def __add__(self,registration_status):  \n        if registration_status=='휴학': \n            self.age=self.age+0.5 \n        elif registration_status=='등록':\n            self.age=self.age+0.5 \n            self.semester= self.semester+1\n    def _repr_html_(self): ## 코드 출력 정의\n        html_str = \"\"\"\n        나이: {} &lt;br/&gt;\n        학기: {} &lt;br/&gt;\n        \"\"\"\n        return html_str.format(self.age,self.semester)\n\n\ngc = s()\n\n입학을 축하합니다. 당신의 나이는 20.0이고 현재 학기는 0학기 입니다.\n\n\n\ngc + \"등록\"\n\n\ngc\n\n\n        나이: 20.5 \n        학기: 1 \n        \n\n\n\ngc + \"휴학\"\n\n\ngc\n\n\n        나이: 21.0 \n        학기: 1"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex2.-__add__-return",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex2.-__add__-return",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "ex2. __add__ + return",
    "text": "ex2. __add__ + return\n- 잘못된 사용\n\ngc + '등록'+ '휴학' + '등록' + '휴학'\n\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'str'\n\n\n- Ver 1\n\nclass s:\n    def __init__(self, age=20.0, semester=0): \n        self.age = age\n        self.semester = semester\n        print(f\"입학을 축하합니다. 당신의 나이는 {self.age}이고 현재 학기는 {self.semester}학기 입니다.\")\n    def __add__(self,registration_status):  \n        if registration_status=='휴학': \n            self.age=self.age+0.5 \n        elif registration_status=='등록':\n            self.age=self.age+0.5 \n            self.semester= self.semester+1 \n        return self  ## return 추가\n    def _repr_html_(self): ## 코드 출력 정의\n        html_str = \"\"\"\n        나이: {} &lt;br/&gt;\n        학기: {} &lt;br/&gt;\n        \"\"\"\n        return html_str.format(self.age,self.semester)\n\n\ngc = s()\n\n입학을 축하합니다. 당신의 나이는 20.0이고 현재 학기는 0학기 입니다.\n\n\n\ngc + '등록'+ '휴학' + '등록' + '휴학'\n\n\n        나이: 22.0 \n        학기: 2 \n        \n\n\n- Ver2"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex2.-__add__-super",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex2.-__add__-super",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "ex2. __add__ + super",
    "text": "ex2. __add__ + super\n\nclass s_2(s):\n    def __add__(self,registration_status): \n        if registration_status=='휴학': \n            self.age = self.age+0.5\n        elif registration_status=='등록':\n            self.age = self.age+0.5 \n            self.semester = self.semester+1 \n        return self\n\n\ngc = s_2()\n\n입학을 축하합니다. 당신의 나이는 20.0이고 현재 학기는 0학기 입니다.\n\n\n\ngc + '등록'+ '휴학' + '등록' + '휴학'\n\n\n        나이: 22.0 \n        학기: 2"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#motive-1",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#motive-1",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "motive",
    "text": "motive\n\na = [1,2,3]\na\n\n[1, 2, 3]\n\n\n\na[0]\n\n1\n\n\n\na.__getitem__(0)\n\n1"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex1.-rps가위바위보",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex1.-rps가위바위보",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "ex1. RPS(가위바위보)",
    "text": "ex1. RPS(가위바위보)\n\nclass RPS:\n    def __init__(self,candidate):\n        self.candidate = candidate\n        self.actions = list() \n    def pick(self):\n        self.actions.append(np.random.choice(self.candidate))        \n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} &lt;br/&gt;\n        기록: {}\n        \"\"\"        \n        return html_str.format(self.candidate,self.actions)\n\n\na = RPS([\"가위\",\"바위\",\"보\"])\n\n\na.pick()\na.pick()\n\n\na.actions\n\n['바위', '보']\n\n\n\na[0], a[1]\n\nTypeError: 'RPS' object is not subscriptable\n\n\n- 위를 에러가 나지않고 리스트처럼 인덱싱 했으면 좋겠음"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex2.-리스트-인덱싱-기능-추가",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex2.-리스트-인덱싱-기능-추가",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "ex2. 리스트 인덱싱 기능 추가",
    "text": "ex2. 리스트 인덱싱 기능 추가\n\nclass RPS_Ver2(RPS):\n    def __getitem__(self,item):\n        return self.actions[item]\n\n\na = RPS_Ver2(['가위','바위','보'])\n\n\na.pick()\na.pick()\na.pick()\n\n\na\n\n\n        낼 수 있는 패: ['가위', '바위', '보'] \n        기록: ['가위', '가위', '가위']\n        \n\n\n\na[0]\n\n'가위'"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#motive-2",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#motive-2",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "motive",
    "text": "motive\n\na = RPS_Ver2(['가위','바위'])\na\n\n\n        낼 수 있는 패: ['가위', '바위'] \n        기록: []\n        \n\n\n\na.pick()\na.pick()\na\n\n\n        낼 수 있는 패: ['가위', '바위'] \n        기록: ['가위', '바위']\n        \n\n\n\na[0]\n\n'가위'\n\n\n\na[0] = '보' \n\nTypeError: 'RPS_Ver2' object does not support item assignment\n\n\n- 만약 실수로 기록할 때와 같은 경우가 있을경우 위처럼 수정이 필요할 수도 있겠다.\n- 리스트 예제 관찰\n\nl = [1,2]\nl\n\n[1, 2]\n\n\n\nl[0]=2\n\n\nl\n\n[2, 2]\n\n\n\nl.__setitem__(0,1)\n\n\nl\n\n[1, 2]"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex1.-값을-수정하는-메소드-구현",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex1.-값을-수정하는-메소드-구현",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "ex1. 값을 수정하는 메소드 구현",
    "text": "ex1. 값을 수정하는 메소드 구현\n\nclass RPS_Ver3(RPS_Ver2):\n    def __setitem__(self,index,val):\n        self.actions[index] = val\n\n\na=RPS_Ver3(['가위','바위','보'])\n\n\na.pick()\n\n\na\n\n\n        낼 수 있는 패: ['가위', '바위', '보'] \n        기록: ['보']\n        \n\n\n\na[0] = \"가위\"\n\n\na\n\n\n        낼 수 있는 패: ['가위', '바위', '보'] \n        기록: ['가위']"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#motive1",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#motive1",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "motive1",
    "text": "motive1\n\n가위===가위이면 True가 나왔으면 좋겠음.\n\n\n관찰 : __eq__\n\na = 1\na\n\n1\n\n\n\na==1\n\nTrue\n\n\n\na.__eq__(1)\n\nTrue\n\n\n\na==1은 a.__eq__(1)의 축약버전이다.\n\n\n\n구현 : __eq__\n\nclass RPS_Ver5(RPS_Ver4):\n    def __eq__(self,other):\n        return self[-1] == other[-1]\n\n\na = RPS_Ver5(['가위','바위'])\nb = RPS_Ver5(['가위','바위'])\n\n- 1회 대결\n\na.pick()\nb.pick()\n\n\na\n\n\n        낼 수 있는 패: ['가위', '바위'] \n        기록: ['가위']\n        \n\n\n\nb\n\n\n        낼 수 있는 패: ['가위', '바위'] \n        기록: ['바위']\n        \n\n\n\na == b\n\nFalse\n\n\n- 2회 대결\n\na.pick()\nb.pick()\n\n\na == b\n\nFalse\n\n\n- 3회 대결\n\na.pick()\nb.pick()\n\n\na == b\n\nTrue"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#motive2",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#motive2",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "motive2",
    "text": "motive2\n\na[-1], b[-1]\n\n('가위', '가위')\n\n\n\na &gt; b\n\nTypeError: '&gt;' not supported between instances of 'RPS_Ver5' and 'RPS_Ver5'\n\n\n- 목표 : False가 나왔으면 좋겠음\n\n관찰 : __gt__\n\na = 1\nb = 2\n\n\na&gt;1, a.__gt__(1), b&gt;1, b.__gt__(1)\n\n(False, False, True, True)\n\n\n\na.__gt__(1)\n\nFalse\n\n\n\n\n예비학습\n\na = RPS_Ver5(['가위','바위'])\nb = RPS_Ver5(['가위','바위'])\n\n\nfor i in range(3) :\n    a.pick()\n    b.pick()\n\n\na\n\n\n        낼 수 있는 패: ['가위', '바위'] \n        기록: ['가위', '바위', '바위']\n        \n\n\n\nb\n\n\n        낼 수 있는 패: ['가위', '바위'] \n        기록: ['가위', '가위', '바위']\n        \n\n\n\na[-1], b[-1]\n\n('바위', '바위')\n\n\n- 이기는 요소를 각 리스트 원소에 왼쪽에 배치\n\n[a[-1],b[-1]] in [['가위','보'],['바위','가위'],['보','바위']]\n\nFalse\n\n\n\n\n구현 : __gt__\n\nclass RPS_Ver6(RPS_Ver5):\n    def __gt__(self,other):\n        return [self[-1],other[-1]] in [['가위','보'],['바위','가위'],['보','바위']]\n\n\na = RPS_Ver6(['가위','바위','보'])\nb = RPS_Ver6(['가위','바위','보'])\n\n- 1회 대결\n\na.pick()\nb.pick()\n\n\na[-1],b[-1]\n\n('바위', '가위')\n\n\n\na&gt;b\n\nTrue\n\n\n- 2회 대결\n\na.pick()\nb.pick()\n\n\na[-1],b[-1]\n\n('바위', '바위')\n\n\n\na&gt;b\n\nFalse"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#motive3",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#motive3",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "motive3",
    "text": "motive3\n\na\n\n\n        낼 수 있는 패: ['가위', '바위', '보'] \n        기록: ['바위', '바위']\n        \n\n\n\nb\n\n\n        낼 수 있는 패: ['가위', '바위', '보'] \n        기록: ['가위', '바위']\n        \n\n\n- True로 나왔으면 좋겠음\n\na&gt;=b\n\nTypeError: '&gt;=' not supported between instances of 'RPS_Ver6' and 'RPS_Ver6'\n\n\n\n구현\n- 비교 연산자 정리\n\n\n\n특수 메소드\n의미\n\n\n\n\n__eq__\nself == other\n\n\n__gt__\nself &gt; other\n\n\n__lt__\nself &lt; other\n\n\n__ge__\nself &gt;= other\n\n\n__le__\nself &lt;= other\n\n\n\n\nclass RPS_Ver7(RPS_Ver6):\n    def __ge__(self,other):\n        return (self == other) or (self &gt; other)\n    def __lt__(self,other):\n        return not (self &gt;= other)\n    def __le__(self,other):\n        return (self == other) or (self &lt; other)\n\n\na = RPS_Ver7(['가위','바위','보'])\nb = RPS_Ver7(['가위','바위','보'])\n\n\na.pick()\nb.pick()\n\n\na\n\n\n        낼 수 있는 패: ['가위', '바위', '보'] \n        기록: ['가위']\n        \n\n\n\nb\n\n\n        낼 수 있는 패: ['가위', '바위', '보'] \n        기록: ['가위']\n        \n\n\n\na==b, a&gt;b, a&lt;b, a&gt;=b, a&lt;=b \n\n(True, False, False, True, True)"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#함수",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#함수",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "함수",
    "text": "함수\n\ndef f() :\n    return \"test\"\n\n\nf()\n\n'test'\n\n\n\n?f\n\n\nSignature: f()\nDocstring: &lt;no docstring&gt;\nFile:      c:\\users\\user\\appdata\\local\\temp\\ipykernel_12160\\3092864090.py\nType:      function\n\n\n\n- 함수 f의 type은 function이다.\n- 즉, 우리가 만든 f는 function이라는 클래스의 오브젝트에 불과하다."
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex1-x-a2",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex1-x-a2",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "ex1) \\((x-a)^2\\)",
    "text": "ex1) \\((x-a)^2\\)\n\n풀이 1. 중첩\n\ndef f(a) :\n    def _f(x) :\n        return (x-a)**2\n    return _f\n\n\ng = f(10)\n\n\ng(2)\n\n64\n\n\n\n\n풀이 2. lambda\n\ndef f(a) :\n    _f = lambda x : (x-a)**2\n    return _f\n\n\ng = f(10)\n\n\ng(2)\n\n64"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex2-fprimex",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex2-fprimex",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "ex2) \\(f\\prime(x)\\)",
    "text": "ex2) \\(f\\prime(x)\\)\n\n풀이 1. 기본 함수\n\ndef f(x): \n    return x**2 \n\n\ndef d(f,x): \n    h=0.000000000001\n    return (f(x+h)-f(x))/h \n\n\nd(f,4) # f'(4) = 2*4 = 8\n\n8.000711204658728\n\n\n\n\n풀이 2. 함수 중첩\n\ndef f(x): \n    return x**2 \n\n\ndef d(f): \n    def df(x):  \n        h=0.000000000001\n        return (f(x+h)-f(x))/h \n    return df\n\n\nff = d(f)\n\n\nff(4)\n\n8.000711204658728\n\n\n\n\n풀이3. lambda\n\ndef f(x): \n    return x**2 \n\n\ndef dl(f) :\n    h=0.000000000001\n    return lambda x :  (f(x+h)-f(x))/h\n\n\ndd = dl(f)\n\n\ndd(4)\n\n8.000711204658728\n\n\n\n\n시각화\n\nx = np.linspace(-1,1,100)\n\n\nplt.plot(x,f(x),label = r\"$f(x)=x^2$\")\nplt.plot(x,ff(x),label = r\"$f^{\\,\\prime}(x)=2x$\")\nplt.legend()\n\n&lt;matplotlib.legend.Legend at 0x1e2d16cbdd0&gt;"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex3-함수들의-리스트",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#ex3-함수들의-리스트",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "ex3) 함수들의 리스트",
    "text": "ex3) 함수들의 리스트\n\nflst = [lambda x: x, lambda x: x**2, lambda x: x**3] \nflst\n\n[&lt;function __main__.&lt;lambda&gt;(x)&gt;,\n &lt;function __main__.&lt;lambda&gt;(x)&gt;,\n &lt;function __main__.&lt;lambda&gt;(x)&gt;]\n\n\n\nfor f in flst : \n    print(f(2))\n\n2\n4\n8\n\n\n\nfor f in flst : \n    plt.plot(x,f(x),\"--\")"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#call__",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#call__",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "__call__",
    "text": "__call__\n\nf = lambda x : x+1\n\n\nf(3)\n\n4\n\n\n\nf.__call__(3)\n\n4\n\n\n\nf(3)은 f__call__(3)의 축약버전이다.\n\n\n관찰\n- 함수처럼 쓸 수없는 인스턴스는 단지 __call__이 없을뿐이다. \\(\\to\\) ‘A’ object is not callable\n\nclass A():\n    def __init__(self) :\n        self.n = \"강철\"\n\n\na = A()\n\n\na()\n\nTypeError: 'A' object is not callable\n\n\n- 위 코드 수정\n\nclass A2(A):\n    def __call__(self) :\n        print(self.n)\n\n\na = A2()\n\n\na()\n\n강철"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#구현-self.상수-상수",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#구현-self.상수-상수",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "구현 : self.상수 + 상수",
    "text": "구현 : self.상수 + 상수\n\nclass add1:\n    def __init__(self,c) :\n        self.c = c\n    def __call__(self,x) :\n        return self.c + x\n\n\na = add1(3)\n\n\na(5)\n\n8\n\n\n\na(10)\n\n13"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#관찰-1.-iter",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#관찰-1.-iter",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "관찰 1. iter",
    "text": "관찰 1. iter\n- 아래 ???의 자리에 올수 있는것은 dir(?)하여 set(dir(lst)) & {'__iter__'} 가 있는 오브젝트이다\nfor i in ???:\n    print(i)\n\nlst = [1,2,3]\n\n\nlst = [1,2,3]\nset(dir(lst)) & {'__iter__'}\n\n{'__iter__'}\n\n\n\ntpl = 1,2,3\nset(dir(tpl)) & {'__iter__'}\n\n{'__iter__'}\n\n\n\nstring = '123'\nset(dir(string)) & {'__iter__'}\n\n{'__iter__'}\n\n\n\na = 5\nset(dir(a)) & {'__iter__'}\n\nset()"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#관찰2.-next",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#관찰2.-next",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "관찰2. next",
    "text": "관찰2. next\n\n__next__의 기능은 \\(\\to\\) iterable 객체들의 원소들을 차례대로 꺼내준다\n더이상 꺼낼 원소가 없으면 Stopiteration Error를 발생시킴\n\n\nlst = [1,2,3].__iter__()\n\n\nnext(lst)\n\n1\n\n\n\nnext(lst)\n\n2\n\n\n\nnext(lst)\n\n3\n\n\n- 원소가 3개이기 때문에 3번이상 명령어 입력시 에러 발생\n\nnext(lst)\n\nStopIteration:"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#관찰-3.-데이터-프레임",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#관찰-3.-데이터-프레임",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "관찰 3. 데이터 프레임",
    "text": "관찰 3. 데이터 프레임\n\ndf = pd.DataFrame({'x':[1,2,3],'y':[2,3,4]})\ndf\n\n\n\n\n\n\n\n\nx\ny\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n\n\n\n\n\n\nset(dir(df)) & {'__iter__'}\n\n{'__iter__'}\n\n\n- 데이터 프레임의 경우는 루프문 수행 시 컬럼 네임을 출력해준다.\n\nfor i in df :\n    print(i)\n\nx\ny\n\n\n- next 함수 적용\n\n_df = iter(df)\n\n\nnext(_df)\n\n'x'\n\n\n\nnext(_df)\n\n'y'\n\n\n- 컬럼이 2개 밖에 없어 에러 발생\n\nnext(_df)\n\nStopIteration:"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#구현-1",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#구현-1",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "구현",
    "text": "구현\n- 가찌를 내는 순간 for문이 멈추도록 하는 이터레이터를 만들자\n\nclass RPS_ITERATOR: # 찌를 내는순간 for문이 멈추도록 하는 이터레이터를 만들자\n    def __init__(self): \n        self.candidate = [\"묵\",\"찌\",\"빠\"] \n    def __iter__(self):\n        return self \n    def __next__(self):\n        action = np.random.choice(self.candidate) ## 묵찌빠에서 랜덤 선택\n        if action == \"찌\":\n            print(\"찌가 나와서 for문을 멈춥니다\")\n            raise StopIteration\n        else:\n            return action\n\n\na = RPS_ITERATOR()\n\n\nnext(a)\n\n찌가 나와서 for문을 멈춥니다\n\n\nStopIteration: \n\n\n\nnext(a)\n\n'묵'\n\n\n\nnext(a)\n\n'빠'\n\n\n\nfor i in a :\n    print (i)\n\n묵\n빠\n빠\n빠\n찌가 나와서 for문을 멈춥니다"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#range-생략",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#range-생략",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "range (생략)",
    "text": "range (생략)"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#zip",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#zip",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "zip",
    "text": "zip\n- 이터레이터엔 개념을 알면 for문에 대한 이해도가 대폭 상승한다.\n\n관찰 1. zip?\n- 일단 zip으로 만든 객체가 iterable object인지 확인하자\n\ntemp = zip([1,2,3],\"abc\")\n\n\ntemp\n\n&lt;zip at 0x1e2d53d2f00&gt;\n\n\n\nset(dir(temp)) & {\"__iter__\",\"__next__\"}\n\n{'__iter__', '__next__'}\n\n\n- 오 2가지 다있는 것을 보니 temp는 iterable 오브젝트이다.\n\nnext(temp)\n\n(1, 'a')\n\n\n\nnext(temp)\n\n(2, 'b')\n\n\n\nnext(temp)\n\n(3, 'c')\n\n\n- 훗, 무슨 느낌인지 알겠음\n\nnext(temp)\n\nStopIteration: \n\n\n\n\n관찰 2. 그래서 뭐하는 문법인가?\n\nzip?\n\n\nInit signature: zip(self, /, *args, **kwargs)\nDocstring:     \nzip(*iterables, strict=False) --&gt; Yield tuples until an input is exhausted.\n   &gt;&gt;&gt; list(zip('abcdefg', range(3), range(4)))\n   [('a', 0, 0), ('b', 1, 1), ('c', 2, 2)]\nThe zip object yields n-length tuples, where n is the number of iterables\npassed as positional arguments to zip().  The i-th element in every tuple\ncomes from the i-th iterable argument to zip().  This continues until the\nshortest argument is exhausted.\nIf strict is true and one of the arguments is exhausted before the others,\nraise a ValueError.\nType:           type\nSubclasses:     \n\n\n\n- 음, 위에 나온 예제를 싱행해보니 무슨 느낌인지 알겠음\n\nlist(zip('abcdefg', range(3), range(4)))\n\n[('a', 0, 0), ('b', 1, 1), ('c', 2, 2)]\n\n\n\n\n관찰 3. enumerate\n- 이녀석도 이터러블 객체이다.\n\nset(dir(enumerate('abc'))) & {'__iter__', '__next__'}\n\n{'__iter__', '__next__'}\n\n\n- enumerate는 원소와 인덱스를 반환해준다.\n\nfor i in enumerate(list(\"abc\")) :\n    print(i)\n\n(0, 'a')\n(1, 'b')\n(2, 'c')"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#summary",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-14-Extra 03. 클래스 탐구 (2).html#summary",
    "title": "Extra 03. 클래스 탐구 (2)",
    "section": "summary",
    "text": "summary\n- for문을 사용하려면 “iterable object” 여야만 한다."
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html",
    "title": "Extra 01. 클래스",
    "section": "",
    "text": "from IPython.core.display import HTML\n\n\n\n\nclass jkm :\n     pass\n\n\ntest = jkm()\ntest\n\n&lt;__main__.jkm at 0x18dda40e3d0&gt;\n\n\n\n\n\n\ntest.title = \"중요한건 꺽이지 않는 마음\"\n\ntest.url = \"https://github.com/guebin/PP2023/blob/main/posts/03_Class/JungGGuckMa.jpg?raw=true\"\n\ntest.Q = \"Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\"\n\ntest.A = \"A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\"\n\ntest.h1 = \"마음\"\n\ntest.html_str =  '''\n&lt;style&gt;\n    .title {{\n        font-family: \"Times New Roman\", serif;\n        font-size: 30px;\n        font-weight: 900;\n    }}\n    .text {{\n        font-family: \"Arial\", sans-serif;\n        font-size: 20px;\n        font-style: italic;\n    }}\n    .highlight {{\n        font-family: \"Montserrat\", monospace;\n        font-size: 35px;\n        font-weight: 900;\n        text-decoration: underline; ## 밑줄\n        font-style: normal;\n        color: darkblue;\n        background-color: #FFFF00;\n    }}\n&lt;/style&gt;\n\n&lt;p class=\"title\"&gt;{tt1}&lt;/p&gt;\n&lt;img src={url} width=\"600\"&gt;\n&lt;p&gt; \\n &lt;/p&gt;\n&lt;p class=\"text\"&gt; {Q}&lt;/p&gt;\n&lt;p class=\"text\"&gt; {A}: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n&lt;p class=\"title\"&gt;중요한 것은 꺾이지 않는 &lt;span class=\"highlight\"&gt; {h1} &lt;/span&gt;&lt;/p&gt;\n'''\n\n\n\n\n\ndef show(test):\n    _str = test.html_str.format(\n        tt1 = test.title,\n        url = test.url,\n        Q = test.Q,\n        A = test.A,\n        h1 = test.h1\n    )\n    display(HTML(_str))\n\n\nshow(test)\n\n\n\n\n중요한건 꺽이지 않는 마음\n\n \n \n Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\n A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n중요한 것은 꺾이지 않는  마음"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#단계-도화지-생성",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#단계-도화지-생성",
    "title": "Extra 01. 클래스",
    "section": "",
    "text": "class jkm :\n     pass\n\n\ntest = jkm()\ntest\n\n&lt;__main__.jkm at 0x18dda40e3d0&gt;"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#단계-뼈대-생성",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#단계-뼈대-생성",
    "title": "Extra 01. 클래스",
    "section": "",
    "text": "test.title = \"중요한건 꺽이지 않는 마음\"\n\ntest.url = \"https://github.com/guebin/PP2023/blob/main/posts/03_Class/JungGGuckMa.jpg?raw=true\"\n\ntest.Q = \"Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\"\n\ntest.A = \"A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\"\n\ntest.h1 = \"마음\"\n\ntest.html_str =  '''\n&lt;style&gt;\n    .title {{\n        font-family: \"Times New Roman\", serif;\n        font-size: 30px;\n        font-weight: 900;\n    }}\n    .text {{\n        font-family: \"Arial\", sans-serif;\n        font-size: 20px;\n        font-style: italic;\n    }}\n    .highlight {{\n        font-family: \"Montserrat\", monospace;\n        font-size: 35px;\n        font-weight: 900;\n        text-decoration: underline; ## 밑줄\n        font-style: normal;\n        color: darkblue;\n        background-color: #FFFF00;\n    }}\n&lt;/style&gt;\n\n&lt;p class=\"title\"&gt;{tt1}&lt;/p&gt;\n&lt;img src={url} width=\"600\"&gt;\n&lt;p&gt; \\n &lt;/p&gt;\n&lt;p class=\"text\"&gt; {Q}&lt;/p&gt;\n&lt;p class=\"text\"&gt; {A}: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n&lt;p class=\"title\"&gt;중요한 것은 꺾이지 않는 &lt;span class=\"highlight\"&gt; {h1} &lt;/span&gt;&lt;/p&gt;\n'''"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#단계-show-함수-작성",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#단계-show-함수-작성",
    "title": "Extra 01. 클래스",
    "section": "",
    "text": "def show(test):\n    _str = test.html_str.format(\n        tt1 = test.title,\n        url = test.url,\n        Q = test.Q,\n        A = test.A,\n        h1 = test.h1\n    )\n    display(HTML(_str))\n\n\nshow(test)\n\n\n\n\n중요한건 꺽이지 않는 마음\n\n \n \n Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\n A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n중요한 것은 꺾이지 않는  마음"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#self",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#self",
    "title": "Extra 01. 클래스",
    "section": "self",
    "text": "self\n- self는 밈 클래스에서 생성할 인스턴스의 이름을 대신한다.\n- jkm이라는 클래스에 다음과 같이 show함수를 종속 시키자\n\nclass jkm:\n    def show(self):\n        _str = self.html_str.format(\n            tt1 = self.title,\n            url = self.url,\n            Q = self.Q,\n            A = self.A,\n            h1 = self.h1 )\n        display(HTML(_str))\n\n\ntest  = jkm()\n\n\ntest.title = \"중요한건 꺽이지 않는 마음\"\n\ntest.url = \"https://github.com/guebin/PP2023/blob/main/posts/03_Class/JungGGuckMa.jpg?raw=true\"\n\ntest.Q = \"Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\"\n\ntest.A = \"A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\"\n\ntest.h1 = \"마음\"\n\ntest.html_str =  '''\n&lt;style&gt;\n    .title {{\n        font-family: \"Times New Roman\", serif;\n        font-size: 30px;\n        font-weight: 900;\n    }}\n    .text {{\n        font-family: \"Arial\", sans-serif;\n        font-size: 20px;\n        font-style: italic;\n    }}\n    .highlight {{\n        font-family: \"Montserrat\", monospace;\n        font-size: 35px;\n        font-weight: 900;\n        text-decoration: underline; ## 밑줄\n        font-style: normal;\n        color: darkblue;\n        background-color: #FFFF00;\n    }}\n&lt;/style&gt;\n\n&lt;p class=\"title\"&gt;{tt1}&lt;/p&gt;\n&lt;img src={url} width=\"600\"&gt;\n&lt;p&gt; \\n &lt;/p&gt;\n&lt;p class=\"text\"&gt; {Q}&lt;/p&gt;\n&lt;p class=\"text\"&gt; {A}: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n&lt;p class=\"title\"&gt;중요한 것은 꺾이지 않는 &lt;span class=\"highlight\"&gt; {h1} &lt;/span&gt;&lt;/p&gt;\n'''\n\n\ntest.show()\n\n\n\n\n중요한건 꺽이지 않는 마음\n\n \n \n Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\n A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n중요한 것은 꺾이지 않는  마음"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#init",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#init",
    "title": "Extra 01. 클래스",
    "section": "init",
    "text": "init\n\n모티브\n- 인스턴스를 생성할 떄마다 변수를 선언하는 것이 귀찮음….\n- 초기값을 정의하는 함수 또한 클래스안에 정의해주자\n\n\n뼈대 작성\n\nclass jkm:\n    def __init__(self) :\n        self.title = \"중요한건 꺽이지 않는 마음\"\n\n        self.url = \"https://github.com/guebin/PP2023/blob/main/posts/03_Class/JungGGuckMa.jpg?raw=true\"\n\n        self.Q = \"Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\"\n\n        self.A = \"A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\"\n\n        self.h1 = \"마음\"\n\n        self.html_str =  '''\n                    &lt;style&gt;\n                        .title {{\n                            font-family: \"Times New Roman\", serif;\n                            font-size: 30px;\n                            font-weight: 900;\n                        }}\n                        .text {{\n                            font-family: \"Arial\", sans-serif;\n                            font-size: 20px;\n                            font-style: italic;\n                        }}\n                        .highlight {{\n                            font-family: \"Montserrat\", monospace;\n                            font-size: 35px;\n                            font-weight: 900;\n                            text-decoration: underline; ## 밑줄\n                            font-style: normal;\n                            color: darkblue;\n                            background-color: #FFFF00;\n                        }}\n                    &lt;/style&gt;\n\n                    &lt;p class=\"title\"&gt;{tt1}&lt;/p&gt;\n                    &lt;img src={url} width=\"600\"&gt;\n                    &lt;p&gt; \\n &lt;/p&gt;\n                    &lt;p class=\"text\"&gt; {Q}&lt;/p&gt;\n                    &lt;p class=\"text\"&gt; {A}: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n                    &lt;p class=\"title\"&gt;중요한 것은 꺾이지 않는 &lt;span class=\"highlight\"&gt; {h1} &lt;/span&gt;&lt;/p&gt;\n                    '''\n        \n    def show(self):\n        _str = self.html_str.format(\n            tt1 = self.title,\n            url = self.url,\n            Q = self.Q,\n            A = self.A,\n            h1 = self.h1 )\n        display(HTML(_str))\n\n\ntest = jkm()\n\n\n\nSHOW\n\ntest.show()\n\n\n                    \n\n                    중요한건 꺽이지 않는 마음\n                    \n                     \n \n                     Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\n                     A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n                    중요한 것은 꺾이지 않는  마음"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex1.클래스-내에-hello라는-메소드를-정의하고-출력하라",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex1.클래스-내에-hello라는-메소드를-정의하고-출력하라",
    "title": "Extra 01. 클래스",
    "section": "ex1.클래스 내에 hello라는 메소드를 정의하고 출력하라",
    "text": "ex1.클래스 내에 hello라는 메소드를 정의하고 출력하라\n\nclass ex1 :\n    def hello(self):\n        print(\"안녕하세요\")\n        \nex1 = ex1()\n\n\nex1.hello()\n\n안녕하세요"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex2.-아래의-조건에-맞는-클래스를-구현",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex2.-아래의-조건에-맞는-클래스를-구현",
    "title": "Extra 01. 클래스",
    "section": "ex2. 아래의 조건에 맞는 클래스를 구현",
    "text": "ex2. 아래의 조건에 맞는 클래스를 구현\n1 “클래스 \\(\\to\\) 인스턴스”의 과정에서 변수 a가 True로 초기설정된다.\n2 클래스에는 show()라는 메소드가 정의되어 있으며, show()의 기능은 a의 값을 print하는 기능을 한다.\n\nclass ex2 :\n     def __init__(self) :\n            self.a = True\n     def show(self) :\n         print(self.a)\n\n\nex2 = ex2()\n\n\nex2.show()\n\nTrue"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex3.-아래에-조건에-맞는-클래스를-구현하라.",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex3.-아래에-조건에-맞는-클래스를-구현하라.",
    "title": "Extra 01. 클래스",
    "section": "ex3. 아래에 조건에 맞는 클래스를 구현하라.",
    "text": "ex3. 아래에 조건에 맞는 클래스를 구현하라.\n1 “클래스 \\(\\to\\)인스턴스”의 과정에서 변수 a가 True 로 초기설정된다.\n2. 클래스에는 toggle() 이라는 메소드가 정의되어 있다. 이 기능은 변수 a의 값이 True 이면 False 로, False 이면 True 로 바꾸는 역할을 한다.\n3. 클래스에는 show()라는 메소드가 정의되어 있다. 이 기능은 a의 값을 print 하는 기능을 한다.\n\nclass ex3: \n    def __init__(self) :\n        self.a = True\n    def toggle(self):\n        self.a = not self.a\n    def show(self) :\n        print(self.a)\n\n\ntest = ex3()\n\n\ntest.a\n\nTrue\n\n\n\ntest.toggle()\n\n\ntest.a\n\nFalse\n\n\n\ntest.show()\n\nFalse"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex4.-아래-조건에-맞는-클래스를-구현",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex4.-아래-조건에-맞는-클래스를-구현",
    "title": "Extra 01. 클래스",
    "section": "ex4. 아래 조건에 맞는 클래스를 구현",
    "text": "ex4. 아래 조건에 맞는 클래스를 구현\n1 “클래스 \\(\\to\\) 인스턴스”의 과정에서 변수 a가 0으로 초기설정된다.\n2 클래스에는 up()이라는 메소드가 정의되어 있따. up()의 기능은 a의 값을 1증가 시키는 기능을 한다.\n3 클래스에는 show()라는 메소드가 정의되어 있다. show()의 기능은 a의값을 print하다.\n\nclass ex4: \n    def __init__(self) :\n        self.a = 1\n    def up(self):\n        self.a += 1\n    def show(self) :\n        print(self.a)\n\n\nex4 = ex4()\n\n\nex4.up()\n\n\nex4.a\n\n2\n\n\n\nex4.show()\n\n1"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex5.-아래-조건에-맞는-클래스를-구현하라.",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex5.-아래-조건에-맞는-클래스를-구현하라.",
    "title": "Extra 01. 클래스",
    "section": "ex5. 아래 조건에 맞는 클래스를 구현하라.",
    "text": "ex5. 아래 조건에 맞는 클래스를 구현하라.\n1 클래스 \\(\\to\\) 인스턴스” 과정에서 변수 a의 값이 사용자가 입력한 값으로 초기 설정된다.\n2 클래스에는 show()라는 메소드가 정의되어 있다. show()의 기능은 a의 값을 print한다.\n\nclass ex5 :\n    def __init__(self,value):\n         self.a = value\n    def show(self) :\n         print(self.a)\n\n\nex5 = ex5(1)\n\n\nex5.show()\n\n1"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex6.-다음-조건을-만족하는-클래스를-구현하라.",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex6.-다음-조건을-만족하는-클래스를-구현하라.",
    "title": "Extra 01. 클래스",
    "section": "ex6. 다음 조건을 만족하는 클래스를 구현하라.",
    "text": "ex6. 다음 조건을 만족하는 클래스를 구현하라.\n\n“클래스 인스턴스”의 과정에서 변수 a가 0으로 초기설정된다.\n클래스에는 up()라는 메소드가 정의되어 있다. up()의 기능은 a의 값을 1증가시키는 기능을 한다.\n클래스에는 jump()라는 메소드가 정의되어 있다. jump()는 jump_size 를 입력으로 받으며 a의 값을 jump_size 만큼 증가시키는 기능을 한다.\n클래스에는 show()라는 메소드가 정의되어 있다. show()의 기능은 a의 값을 print 하는 기능을 한다.\n\n\nclass ex6:\n    def __init__(self):\n        self.a = 0\n    def up(self):\n        self.a += 1\n    def jump(self,js) :\n        self.a += js\n    def show(self) :\n        print(self.a)\n\n\nex6 = ex6()\n\n\nex6.up()\n\n\nex6.a\n\n1\n\n\n\nex6.jump(100)\n\n\nex6.a\n\n101\n\n\n\nex6.show()\n\n101"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex7.-아래-조건에-맞는-클래스를-구현",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex7.-아래-조건에-맞는-클래스를-구현",
    "title": "Extra 01. 클래스",
    "section": "ex7. 아래 조건에 맞는 클래스를 구현",
    "text": "ex7. 아래 조건에 맞는 클래스를 구현\n\n“클래스 인스턴스”의 과정에서 변수 a가 0으로 초기설정된다.\n클래스에는 up()라는 메소드가 정의되어 있다. up()의 기능은 a의 값을 1증가시키는 기능을 한다.\n클래스에는 jump()라는 메소드가 정의되어 있다. jump()는 jump_size 를 입력으로 받으며 a의 값을 jump_size 만큼 증가시키는 기능을 한다.\n클래스에는 reset()이라는 메소드가 정의되어 있다. reset()는 a의 값을 0으로 초기화하는 역할을 한다.\n클래스에는 show()라는 메소드가 정의되어 있다. show()의 기능은 a의 값을 print 하는 기능을 한다.\n\n\nclass ex7:\n    def __init__(self):\n        self.a = 0\n    def up(self):\n        self.a += 1\n    def jump(self,js) :\n        self.a += js\n    def reset(self) :\n        self.a = 0\n    def show(self) :\n        print(self.a)\n\n\nex7 = ex7()\n\n\nex7.up()\n\n\nex7.a\n\n1\n\n\n\nex7.reset()\n\n\nex7.a\n\n0"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex8.-이미지-출력",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex8.-이미지-출력",
    "title": "Extra 01. 클래스",
    "section": "ex8. 이미지 출력",
    "text": "ex8. 이미지 출력\n\nurl = 'https://github.com/guebin/PP2023/blob/main/posts/03_Class/burgerking.png?raw=true'\nhtml_str = '&lt;img src={url} width=\"600\"&gt;'.format(url=url)\ndisplay(HTML(html_str))\n\n\n\n\n\n“클래스 \\(\\to\\) 인스턴스”의 과정에서 변수 url이 위에서 제시된 값으로 초기화된다.\n클래스에는 show()라는 함수가 있어서 url에 해당하는 이미지를 출력해주는 기능을 가진다.\n\n\nclass ex8:\n    def __init_(self) :\n        self.url = 'https://github.com/guebin/PP2023/blob/main/posts/03_Class/burgerking.png?raw=true'\n    def show(self):\n        self.html_str = '&lt;img src={url} width=\"600\"&gt;'.format(url=url)\n        display(HTML(self.html_str))\n\n\nex8= ex8()\n\n\nex8.show()"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex9.-이미지-출력-횟수기록",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex9.-이미지-출력-횟수기록",
    "title": "Extra 01. 클래스",
    "section": "ex9. 이미지 출력 + 횟수기록",
    "text": "ex9. 이미지 출력 + 횟수기록\n\n“클래스 \\(\\to\\)인스턴스”의 과정에서 변수 url이 위에서 제시된 값으로 초기화된다.\n클래스에는 show()라는 함수가 있어서 (1) url에 해당하는 이미지를 출력하고 (2) “당신은 이 그림을 \\(n\\)번 보았습니다” 를 출력하는 기능을 한다. 여기에서 \\(n\\)은 그림을 본 횟수\n\n\nclass ex9:\n    def __init__(self) :\n        self.n = 0\n        self.url = 'https://github.com/guebin/PP2023/blob/main/posts/03_Class/burgerking.png?raw=true'\n    def show(self):\n        self.html_str = '&lt;img src={url} width=\"600\"&gt;'.format(url=self.url)\n        display(HTML(self.html_str))\n        self.n += 1\n        print(\"당신은 이 그림을 {}번 보았습니다.\".format(self.n))\n\n\nex9 = ex9()\n\n\nex9.show()\n\n\n\n\n당신은 이 그림을 1번 보았습니다."
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex10.-예제-9에서-만든-클래스를-이용하여-아래의-url에-해당하는-이미지를-출려가하라.",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex10.-예제-9에서-만든-클래스를-이용하여-아래의-url에-해당하는-이미지를-출려가하라.",
    "title": "Extra 01. 클래스",
    "section": "ex10. 예제 9에서 만든 클래스를 이용하여 아래의 url에 해당하는 이미지를 출려가하라.",
    "text": "ex10. 예제 9에서 만든 클래스를 이용하여 아래의 url에 해당하는 이미지를 출려가하라.\n\ni1 =  ex9()\ni2 =  ex9()\n\n\ni2.url = \"https://github.com/guebin/PP2023/blob/main/posts/03_Class/JungGGuckMa.jpg?raw=true\"\n\n\ni1.show()\n\n\n\n\n당신은 이 그림을 1번 보았습니다.\n\n\n\ni2.show()\n\n\n\n\n당신은 이 그림을 1번 보았습니다."
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex11.-stock-이라는-이름의-클래스를-만들고-아래의-기능을-넣어라",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex11.-stock-이라는-이름의-클래스를-만들고-아래의-기능을-넣어라",
    "title": "Extra 01. 클래스",
    "section": "ex11. Stock 이라는 이름의 클래스를 만들고 아래의 기능을 넣어라",
    "text": "ex11. Stock 이라는 이름의 클래스를 만들고 아래의 기능을 넣어라\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport yfinance as yf\n\n(1) crawling 메소드: crawling 메소드는 start_date, end_date, code 를 입력으로 받는 함수이며, code 에 대응하는 주식의 주가를 크롤링하는 기능을 가진다. 크롤링된 주식의 가격은 numpy array 형태로 저장되어 있다.\nhint\n\nstart_date = \"2023-01-01\"\nend_date = \"2023-05-02\"\ncode = \"005930.KS\"\ny = yf.download(code, start=start_date, end=end_date)['Adj Close'].to_numpy()\n\n[*********************100%***********************]  1 of 1 completed\n\n\n(2) smoothing 메소드 : smoothing는 크롤링된 주가를 아래의 수식을 통하여 \\(n\\)회 변환하는 기능을 한다.\n\n\\(\\overset{\\sim}{y_1} : \\frac 14(3y_1 + y_2)\\)\n\\(\\overset{\\sim}{y_i} : \\frac 14(y_{i-1} + 2y_i + y_{i+1})\\quad i=2,3 \\dots, n-1\\)\n\\(\\overset{\\sim}{y_n} : \\frac 14(y_{n-1} + 3y_n)\\)\n\nhint\n\nT = len(y)\nM = (np.eye(T) + np.array([abs(i-j)&lt;2 for i in range(T) for j in range(T)]).reshape(T,T))/4\nM[0,0] = 3/4; M[-1,-1]= 3/4 \n#np.linalg.matrix_power(M,50)@y\n\n\n풀이\n\nclass stock :\n    def __init__(self) :\n        self.y = None\n        self.sy = None\n    def crawling(self,code, start_date,end_date):\n        self.y = yf.download(code, start_date,end_date)['Adj Close'].to_numpy()\n    def smoothing(self,n):\n        T = len(self.y)\n        self.n = n\n        M = (np.eye(T) + np.array([abs(i-j)&lt;2 for i in range(T) for j in range(T)]).reshape(T,T))/4\n        M[0,0] = 3/4; M[-1,-1]= 3/4\n        self.sy = np.linalg.matrix_power(M,50)@self.y\n    def plot(self) : \n        plt.plot(self.y,label=r\"$y$\")\n        plt.plot(self.sy,\"--\",label =f\"$M^{self.n}@y$\")\n        plt.legend()\n\n\nex11 = stock()\n\n\nstart_date = \"2023-01-01\"\nend_date = \"2023-05-02\"\ncode = \"005930.KS\"\nex11.crawling(code, start_date,end_date)\n\n[*********************100%***********************]  1 of 1 completed\n\n\n\nex11.smoothing(50)\n\n\nex11.plot()"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex12.-ex11에서-만든-stock-클래스에서-kakao-인스턴스를-생성하라.-생성된-kakao-인스턴스에서-crawling-메소드를-이용하여-아래의-조건에-맞는-주식을-긁어오라.",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex12.-ex11에서-만든-stock-클래스에서-kakao-인스턴스를-생성하라.-생성된-kakao-인스턴스에서-crawling-메소드를-이용하여-아래의-조건에-맞는-주식을-긁어오라.",
    "title": "Extra 01. 클래스",
    "section": "ex12. ex11에서 만든 Stock 클래스에서 kakao 인스턴스를 생성하라. 생성된 kakao 인스턴스에서 crawling 메소드를 이용하여 아래의 조건에 맞는 주식을 긁어오라.",
    "text": "ex12. ex11에서 만든 Stock 클래스에서 kakao 인스턴스를 생성하라. 생성된 kakao 인스턴스에서 crawling 메소드를 이용하여 아래의 조건에 맞는 주식을 긁어오라.\n\ncode: ‘035720.KS’ (카카오)\nstart_date = “2023-01-01”\nend_date = “2023-05-26”\n\n이후 .smoothing 메소드를 이용하여 \\(n=50\\)회 스무딩하고 .plot 메소드를 이용하여 결과를 시각화하라.\n\n풀이\n\nkakao = stock()\n\n\ncode = \"035720.KS\"\nstart_date = \"2023-01-01\"\nend_date = \"2023-05-26\"\n\n\nkakao.crawling(code,start_date, end_date)\n\n[*********************100%***********************]  1 of 1 completed\n\n\n\nkakao.smoothing(50)\n\n\nkakao.plot()"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex13.-linearregression이라는-이름의-클래스를-만들고-아래의-기능을-넣어라",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex13.-linearregression이라는-이름의-클래스를-만들고-아래의-기능을-넣어라",
    "title": "Extra 01. 클래스",
    "section": "ex13. LinearRegression이라는 이름의 클래스를 만들고 아래의 기능을 넣어라",
    "text": "ex13. LinearRegression이라는 이름의 클래스를 만들고 아래의 기능을 넣어라\n(1) “클래스 \\(\\to\\) 인스턴스” 인 시점에 길이가 \\(n\\)인 numpy array \\(\\bf{x} = (x_1\\dots, x_n),\\bf{y} = (y_1\\dots, y_n)\\) 을 입력으로 받아 내부에 저장한다.\n(2) fit 메소드 : fit은 내부에 저장된 \\(\\bf{x,y}\\)를 이용하여 아래의 수식을 계산한다.\n\\[\\bf{\\hat{y}} = X(X^{T}X)^{-1}X^{T}y,\\quad X = \\begin{bmatrix}1 & x_1 \\\\ \\dots & \\dots \\\\ 1 & x_n \\end{bmatrix}\\]\n(3) plot 메소드 작성\n\n풀이\n\nclass LinearRegression:\n        def __init__(self,x,y):\n            self.x = x\n            self.y = y\n        def fit(self):\n            n = len(self.x)\n            self.X = np.stack([np.ones(n),self.x],axis=1)\n            self.yhat = self.X@np.linalg.inv(self.X.T@self.X)@self.X.T@self.y     \n        \n        def plot(self) :\n            plt.plot(self.x,self.y,\"o\",label = r\"$(x,y)$\")\n            plt.plot(self.x,self.yhat,\"--\",label = r\"$(x,\\hat y)$\")\n            plt.legend()\n\n\n\nCode\nx =  np.array([0.00983, 0.01098, 0.02951, 0.0384 , 0.03973, 0.04178, 0.0533 ,\n               0.058  , 0.09454, 0.1103 , 0.1328 , 0.1412 , 0.1497 , 0.1664 ,\n               0.1906 , 0.1923 , 0.198  , 0.2141 , 0.2393 , 0.2433 , 0.3157 ,\n               0.3228 , 0.3418 , 0.3552 , 0.3918 , 0.3962 , 0.4    , 0.4482 ,\n               0.496  , 0.507  , 0.53   , 0.5654 , 0.582  , 0.5854 , 0.5854 ,\n               0.6606 , 0.7007 , 0.723  , 0.7305 , 0.7383 , 0.7656 , 0.7725 ,\n               0.831  , 0.8896 , 0.9053 , 0.914  , 0.949  , 0.952  , 0.9727 ,\n               0.982  ])\ny =  np.array([0.7381, 0.7043, 0.3937, 0.1365, 0.3784, 0.3028, 0.1037, 0.3846,\n               0.706 , 0.7572, 0.2421, 0.232 , 0.9855, 1.162 , 0.4653, 0.6791,\n               0.6905, 0.6865, 0.9757, 0.7665, 0.9522, 0.4641, 0.5498, 1.1509,\n               0.5288, 1.1195, 1.1659, 1.4341, 1.2779, 1.1648, 1.4002, 0.7472,\n               0.9142, 0.9658, 1.0707, 1.4501, 1.6758, 0.8778, 1.3384, 0.7476,\n               1.3086, 1.7537, 1.5559, 1.2928, 1.3832, 1.3115, 1.3382, 1.536 ,           \n               1.9177, 1.2069])\n\n\n\nex13 = LinearRegression(x,y)\n\n\nex13.fit()\n\n\nex13.plot()"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex14.-ex13에서-작성한-클래스를-이용하여-아래의-자료를-분석하고-시각화해라.",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-09-Extra 01. 클래스.html#ex14.-ex13에서-작성한-클래스를-이용하여-아래의-자료를-분석하고-시각화해라.",
    "title": "Extra 01. 클래스",
    "section": "ex14. ex13에서 작성한 클래스를 이용하여 아래의 자료를 분석하고 시각화해라.",
    "text": "ex14. ex13에서 작성한 클래스를 이용하여 아래의 자료를 분석하고 시각화해라.\n\n\nCode\nx = np.array(\n    [0.007, 0.008, 0.008, 0.011, 0.037, 0.047, 0.059, 0.07 , 0.072,\n     0.075, 0.078, 0.08 , 0.082, 0.11 , 0.114, 0.117, 0.133, 0.15 ,\n     0.161, 0.163, 0.172, 0.208, 0.209, 0.221, 0.229, 0.231, 0.234,\n     0.235, 0.249, 0.251, 0.256, 0.269, 0.269, 0.273, 0.275, 0.298,\n     0.305, 0.309, 0.34 , 0.362, 0.371, 0.374, 0.382, 0.387, 0.388,\n     0.394, 0.395, 0.397, 0.401, 0.404, 0.419, 0.433, 0.436, 0.466,\n     0.481, 0.492, 0.495, 0.508, 0.511, 0.512, 0.554, 0.57 , 0.574,\n     0.575, 0.584, 0.6  , 0.601, 0.615, 0.618, 0.623, 0.629, 0.633,\n     0.646, 0.65 , 0.654, 0.662, 0.673, 0.686, 0.702, 0.744, 0.754,\n     0.766, 0.772, 0.781, 0.798, 0.8  , 0.807, 0.836, 0.837, 0.871,\n     0.873, 0.877, 0.879, 0.889, 0.891, 0.902, 0.904, 0.923, 0.952,\n     0.981]\n)\n\n\ny = np.array(\n    [4.004, 4.189, 5.483, 4.902, 5.174, 4.468, 4.95 , 4.463, 5.476,\n     4.446, 4.764, 5.244, 4.357, 4.796, 5.464, 4.196, 5.244, 4.868,\n     5.358, 4.493, 4.831, 4.716, 4.929, 4.588, 4.718, 4.389, 4.985,\n     4.266, 4.291, 3.697, 4.248, 4.88 , 5.126, 4.563, 4.131, 4.728,\n     4.168, 4.584, 3.953, 4.747, 3.592, 5.023, 4.601, 3.904, 4.092,\n     4.37 , 3.922, 4.145, 4.576, 4.25 , 4.051, 3.616, 4.634, 3.496,\n     4.631, 4.025, 4.197, 4.226, 4.808, 3.676, 3.834, 3.197, 4.36 ,\n     3.547, 3.956, 3.522, 4.26 , 3.443, 3.97 , 4.068, 4.186, 3.262,\n     3.452, 3.946, 3.875, 3.444, 3.501, 3.959, 3.843, 2.679, 3.266,\n     3.506, 2.916, 3.714, 4.007, 2.795, 3.329, 2.756, 3.72 , 2.381,\n     2.798, 3.035, 3.492, 3.22 , 3.073, 3.85 , 3.233, 3.396, 3.264,\n     2.986]\n)    \n\n\n\nex14 = LinearRegression(x,y)\nex14.fit()\nex14.plot()"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html",
    "title": "05. Python Basic (6)",
    "section": "",
    "text": "- 홈 디렉토리를 불러오는 명령어\n\nfrom pathlib import Path\nprint(Path.home())\n\nC:\\Users\\user\n\n\n- 현재 작업 디렉토리 확인\n\nprint(Path.cwd())\n\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\n\n\n\nPath.cwd().glob() \\(\\to\\) 해당 경로안에 있는 파일들의 목록을 확인\n\n\nfrom pathlib import Path\n\nfiles = Path.cwd().glob('*')\n\nfor f in files:\n     print(f)\n\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\.ipynb_checkpoints\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\2023-08-09-00. Python Basic (1).ipynb\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\2023-08-10-01. Python Basic (2) .ipynb\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\2023-08-11-02. Python Basic (3) .ipynb\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\2023-08-14-03. Python Basic (4).ipynb\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\2023-08-16-04. Python Basic (5).ipynb\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\2023-08-17-05. Python Basic (6).ipynb\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\extra\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\repr.png\n\n\n\n\n\n\n\nf = open(\"gc.txt\", \"w\")\n\nf.write(\"gc test\\n\")\n\nf.close()\n\n- 파일 생성 확인\n\n- 디렉토리 만들기\n\nexist_ok = True : 아래와 같이 Files이라는 폴더가 존재하면 있는 폴더를 쓰고 없을 경우 만들어서 씀\n\n\nPath(\"Files\").mkdir(exist_ok = True)\n\n- 에러문 확인!\n\nPath(\"Files\").mkdir(exist_ok = False)\n\nFileExistsError: [WinError 183] 파일이 이미 있으므로 만들 수 없습니다: 'Files'\n\n\n- 생성한 디렉토리에 파일을 쓰기\n\nf = open(\"Files/gc.txt\", \"w\")\n\nf.write(\"gc test\\n\")\n\nf.close()\n\n\n\n\n\nf = open(\"Files/gc.txt\",\"r\")\n\nprint(f.read())\n\nf.close()\n\ngc test\n\n\n\n\n\n\n- 지정한 파일이 없으면 새로운 파일을 생성한다.\n\nf = open(\"Files/gc.txt\",\"a\")\n\nf.write(\"test를 확인 중입니다.\")\n\nf.close()\n\n\nf = open('Files/gc.txt', 'r')\nprint(f.read())\nf.close()\n\ngc test\ntest를 확인 중입니다.\n\n\n\n\n\n- [Errno 17] File exists: ‘Files/gc.txt’\n\nf = open('Files/gc.txt', 'x')\n\nFileExistsError: [Errno 17] File exists: 'Files/gc.txt'\n\n\n\n\n\ntry : \n    f = open('Files/gc.txt', 'x')\nexcept FileExistsError :\n    print(\"이미 파일이 존재합니다.\")\nelse : \n    print (\"파일 쓰기 성공!\")\n\n이미 파일이 존재합니다.\n\n\n\n\n\n\n\n\n\nf = open(\"test.txt\",\"w\")\nf.close()\n\n\n\n\n\n\nf = open(\"test.txt\",\"a\")\n\nf.write(\"이름 : 이강철\\n 나이 : 28세\")\n\nf.close()\n\n\n\n\n\nf = open(\"test.txt\",\"r\")\n\nprint(f.read())\n\n이름 : 이강철\n 나이 : 28세\n\n\n\n\n\n\n\n\nl = [\"이강철\\n\",\"28세\\n\", \"통계학 전공\\n\"]\n\nf = open(\"test2.txt\",\"w\")\n\nf.writelines(l)\nf.close()\n\n\nf = open(\"test2.txt\",\"r\")\nprint(f.read())\n\n이강철\n28세\n통계학 전공\n\n\n\n\n\n\n\nf = open(\"test2.txt\",\"r\")\nresult = f.readlines() \nprint(result)\n\n['이강철\\n', '28세\\n', '통계학 전공\\n']\n\n\n\nfor txt in result:\n    print(txt,end=\"\")\n\n이강철\n28세\n통계학 전공\n\n\n\n\n\n\nf = open(\"test2.txt\",\"r\")\n\nresult = f.readline()\nwhile result : \n    print(result,end=\"\")\n    result = f.readline()\nf.close()\n\n이강철\n28세\n통계학 전공"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#경로-설정",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#경로-설정",
    "title": "05. Python Basic (6)",
    "section": "",
    "text": "- 홈 디렉토리를 불러오는 명령어\n\nfrom pathlib import Path\nprint(Path.home())\n\nC:\\Users\\user\n\n\n- 현재 작업 디렉토리 확인\n\nprint(Path.cwd())\n\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\n\n\n\nPath.cwd().glob() \\(\\to\\) 해당 경로안에 있는 파일들의 목록을 확인\n\n\nfrom pathlib import Path\n\nfiles = Path.cwd().glob('*')\n\nfor f in files:\n     print(f)\n\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\.ipynb_checkpoints\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\2023-08-09-00. Python Basic (1).ipynb\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\2023-08-10-01. Python Basic (2) .ipynb\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\2023-08-11-02. Python Basic (3) .ipynb\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\2023-08-14-03. Python Basic (4).ipynb\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\2023-08-16-04. Python Basic (5).ipynb\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\2023-08-17-05. Python Basic (6).ipynb\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\extra\nC:\\projects\\mysite2\\posts\\DX\\0. 데이터 다루기\\repr.png"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#파일-쓰기w-write",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#파일-쓰기w-write",
    "title": "05. Python Basic (6)",
    "section": "",
    "text": "f = open(\"gc.txt\", \"w\")\n\nf.write(\"gc test\\n\")\n\nf.close()\n\n- 파일 생성 확인\n\n- 디렉토리 만들기\n\nexist_ok = True : 아래와 같이 Files이라는 폴더가 존재하면 있는 폴더를 쓰고 없을 경우 만들어서 씀\n\n\nPath(\"Files\").mkdir(exist_ok = True)\n\n- 에러문 확인!\n\nPath(\"Files\").mkdir(exist_ok = False)\n\nFileExistsError: [WinError 183] 파일이 이미 있으므로 만들 수 없습니다: 'Files'\n\n\n- 생성한 디렉토리에 파일을 쓰기\n\nf = open(\"Files/gc.txt\", \"w\")\n\nf.write(\"gc test\\n\")\n\nf.close()"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#파일-읽기-r-read",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#파일-읽기-r-read",
    "title": "05. Python Basic (6)",
    "section": "",
    "text": "f = open(\"Files/gc.txt\",\"r\")\n\nprint(f.read())\n\nf.close()\n\ngc test"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#파일-추가-a-append",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#파일-추가-a-append",
    "title": "05. Python Basic (6)",
    "section": "",
    "text": "- 지정한 파일이 없으면 새로운 파일을 생성한다.\n\nf = open(\"Files/gc.txt\",\"a\")\n\nf.write(\"test를 확인 중입니다.\")\n\nf.close()\n\n\nf = open('Files/gc.txt', 'r')\nprint(f.read())\nf.close()\n\ngc test\ntest를 확인 중입니다."
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#파일-존재-유무-확인-x",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#파일-존재-유무-확인-x",
    "title": "05. Python Basic (6)",
    "section": "",
    "text": "- [Errno 17] File exists: ‘Files/gc.txt’\n\nf = open('Files/gc.txt', 'x')\n\nFileExistsError: [Errno 17] File exists: 'Files/gc.txt'\n\n\n\n\n\ntry : \n    f = open('Files/gc.txt', 'x')\nexcept FileExistsError :\n    print(\"이미 파일이 존재합니다.\")\nelse : \n    print (\"파일 쓰기 성공!\")\n\n이미 파일이 존재합니다."
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#excercise",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#excercise",
    "title": "05. Python Basic (6)",
    "section": "",
    "text": "f = open(\"test.txt\",\"w\")\nf.close()\n\n\n\n\n\n\nf = open(\"test.txt\",\"a\")\n\nf.write(\"이름 : 이강철\\n 나이 : 28세\")\n\nf.close()\n\n\n\n\n\nf = open(\"test.txt\",\"r\")\n\nprint(f.read())\n\n이름 : 이강철\n 나이 : 28세"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#파일-쓰기-writelines",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#파일-쓰기-writelines",
    "title": "05. Python Basic (6)",
    "section": "",
    "text": "l = [\"이강철\\n\",\"28세\\n\", \"통계학 전공\\n\"]\n\nf = open(\"test2.txt\",\"w\")\n\nf.writelines(l)\nf.close()\n\n\nf = open(\"test2.txt\",\"r\")\nprint(f.read())\n\n이강철\n28세\n통계학 전공"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#파일-읽기readlines",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#파일-읽기readlines",
    "title": "05. Python Basic (6)",
    "section": "",
    "text": "f = open(\"test2.txt\",\"r\")\nresult = f.readlines() \nprint(result)\n\n['이강철\\n', '28세\\n', '통계학 전공\\n']\n\n\n\nfor txt in result:\n    print(txt,end=\"\")\n\n이강철\n28세\n통계학 전공"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#파일-읽기-readline-한-행씩",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#파일-읽기-readline-한-행씩",
    "title": "05. Python Basic (6)",
    "section": "",
    "text": "f = open(\"test2.txt\",\"r\")\n\nresult = f.readline()\nwhile result : \n    print(result,end=\"\")\n    result = f.readline()\nf.close()\n\n이강철\n28세\n통계학 전공"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#패키지-설치",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#패키지-설치",
    "title": "05. Python Basic (6)",
    "section": "패키지 설치",
    "text": "패키지 설치\n\n#!pip install wordcloud\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#워드클라우드-생성",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#워드클라우드-생성",
    "title": "05. Python Basic (6)",
    "section": "워드클라우드 생성",
    "text": "워드클라우드 생성\n\n%config InlineBackend.figure_format='retina' ## 이미지 포맷\n\n# 워드 클라우드 만들기\nwordcloud = WordCloud(font_path = 'C:/Windiws/fonts/HMKMRHD.TTF',  ## 글씨 폰트\n                      width=2000,\n                      height=1000,\n                      background_color='white').generate_from_frequencies(w_c) ##우리가 만든 워드 카운트를전달\n\n# 표시하기\nplt.figure(figsize=(12, 6))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.tight_layout(pad=0)\nplt.show()"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#extra-이미지-파일",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#extra-이미지-파일",
    "title": "05. Python Basic (6)",
    "section": "extra : 이미지 파일",
    "text": "extra : 이미지 파일\n- 이미지 파일을 사용해 워드클라우드의 프레임 변셩\n\nimport\n\n#pip install opencv-python\n\n\nimport numpy as np\nfrom PIL import Image ## 이미지를 불러오기 위한 모듈\nimport cv2 as cv\n\n\n\n해당 이미지 확인\n\nh = cv.imread(\"human.jpg\")\nplt.imshow(h)\n\n&lt;matplotlib.image.AxesImage at 0x1701cf10bd0&gt;\n\n\n\n\n\n\n\n워드클라우드와 함께 그리기\n\nm_image = np.array(Image.open(\"human.jpg\"))\n\nwordcloud = WordCloud(font_path = 'C:/Windiws/fonts/HMKMRHD.TTF',\n                      width=2000, \n                      height=1000, \n                      mask=m_image,\n                      background_color='white').generate_from_frequencies(w_c)\n\n\nfig, axes = plt.subplots(1,2,figsize=(12,8))\n\nax1,ax2 = axes\n\nax1.imshow(h)\nax2.imshow(wordcloud)\nfig.tight_layout()\n\n\n\n\n- 원래 강아지 사진으로 하려고 했는데 강아지 모양이 안나왔다.\n\n아마 해당 사진에 위 사진처럼 흰색의 공간이 없어서 그런것 같다..ㅜㅜ\n개인적으로 워드클라우드를 선호하지 않으니 쓰는 방법만 기록해두자!"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#꽃-사진으로-워드클라우드",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#꽃-사진으로-워드클라우드",
    "title": "05. Python Basic (6)",
    "section": "꽃 사진으로 워드클라우드!",
    "text": "꽃 사진으로 워드클라우드!\n\nflower=  cv.imread(\"flower.png\")\n\n\nm_image = np.array(Image.open(\"flower.png\"))\n\nwordcloud = WordCloud(font_path = 'C:/Windiws/fonts/HMKMRHD.TTF',\n                      width=2000, \n                      height=1000, \n                      mask=m_image,\n                      background_color='white').generate_from_frequencies(w_c)\n\n\nfig, axes = plt.subplots(1,2,figsize=(12,8))\n\nax1,ax2 = axes\n\nax1.imshow(flower)\nax2.imshow(wordcloud)\nfig.tight_layout()"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#파일-load",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#파일-load",
    "title": "05. Python Basic (6)",
    "section": "파일 Load",
    "text": "파일 Load\n\ns1 = wb[\"Sheet1\"]\n\n\n셀이름으로 값 확인\n\ns1[\"A1\"].value\n\n'date'\n\n\n\n\n행과 열 변호로 셀 값확인\n\ns1.cell(row=1,column =1).value\n\n'date'\n\n\n\ns1.cell(row=2,column =6).value\n\n'F'\n\n\n\n\n데이터 영역 확인\n\nprint(s1.min_row,s1.max_row)\nprint(s1.min_column,s1.max_column)\n\n1 21\n1 6\n\n\n\n\nex1. 반복문을 이용해서 데이터를 출력\n\nfor i in range(s1.min_row,s1.max_row+1) :\n    for j in range(s1.min_column,s1.max_column+1) :\n        print(s1.cell(row = i, column=j).value,end=\" | \")\n    print(\"\\n\")\n\ndate | A | B | C | D | sex | \n\n2020-12-25 | 1.624345363663242 | -0.6117564136500754 | -0.5281717522634557 | -1.072968622156171 | F | \n\n2020-12-26 | 0.8654076293246785 | -2.301538696880283 | 1.74481176421648 | -0.7612069008951028 | M | \n\n2020-12-27 | 0.3190390960570985 | -0.2493703754774101 | 1.462107937044974 | -2.060140709497654 | F | \n\n2020-12-28 | -0.3224172040135075 | -0.3840543546684156 | 1.133769442335437 | -1.099891267314031 | M | \n\n2020-12-29 | -0.1724282075504357 | -0.8778584179213718 | 0.0422137467155928 | 0.5828152137158222 | F | \n\n2020-12-30 | -1.100619177212921 | 1.144723709839614 | 0.9015907205927955 | 0.5024943389018682 | M | \n\n2020-12-31 | 0.9008559492644118 | -0.6837278591743331 | -0.1228902255186481 | -0.9357694342590688 | F | \n\n2021-01-01 | -0.2678880796260159 | 0.530355466738186 | -0.691660751725309 | -0.3967535268559773 | M | \n\n2021-01-02 | -0.6871727001195994 | -0.8452056414987196 | -0.671246130836819 | -0.0126645989189013 | F | \n\n2021-01-03 | -1.117310348635278 | 0.2344156978170921 | 1.65980217710987 | 0.7420441605773356 | M | \n\n2021-01-04 | -0.1918355523616149 | -0.8876289640848363 | -0.7471582937508376 | 1.692454601027747 | F | \n\n2021-01-05 | 0.0508077547760289 | -0.6369956465693534 | 0.190915484667466 | 2.100255136478842 | M | \n\n2021-01-06 | 0.1201589524816291 | 0.6172031097074192 | 0.3001703199558275 | -0.3522498464935186 | F | \n\n2021-01-07 | -1.14251819802214 | -0.3493427224128775 | -0.2088942333747781 | 0.5866231911821976 | M | \n\n2021-01-08 | 0.8389834138745049 | 0.9311020813035572 | 0.2855873252542588 | 0.8851411642707281 | F | \n\n2021-01-09 | -0.7543979409966528 | 1.252868155233288 | 0.5129298204180088 | -0.2980928351027156 | M | \n\n2021-01-10 | 0.488518146537497 | -0.0755717130210557 | 1.131629387451427 | 1.519816816422199 | F | \n\n2021-01-11 | 2.185575406533161 | -1.396496335488138 | -1.444113805429589 | -0.5044658629464512 | M | \n\n2021-01-12 | 0.1600370694478304 | 0.8761689211162249 | 0.3156349472416052 | -2.022201215824003 | F | \n\n2021-01-13 | -0.3062040126283718 | 0.8279746426072462 | 0.2300947353643834 | 0.7620111803120247 | M | \n\n\n\n- 원데이터 확인\n\n_df = pd.read_excel(\"df.xlsx\")\n_df\n\n\n\n\n\n\n\n\ndate\nA\nB\nC\nD\nsex\n\n\n\n\n0\n2020-12-25\n1.624345\n-0.611756\n-0.528172\n-1.072969\nF\n\n\n1\n2020-12-26\n0.865408\n-2.301539\n1.744812\n-0.761207\nM\n\n\n2\n2020-12-27\n0.319039\n-0.249370\n1.462108\n-2.060141\nF\n\n\n3\n2020-12-28\n-0.322417\n-0.384054\n1.133769\n-1.099891\nM\n\n\n4\n2020-12-29\n-0.172428\n-0.877858\n0.042214\n0.582815\nF\n\n\n5\n2020-12-30\n-1.100619\n1.144724\n0.901591\n0.502494\nM\n\n\n6\n2020-12-31\n0.900856\n-0.683728\n-0.122890\n-0.935769\nF\n\n\n7\n2021-01-01\n-0.267888\n0.530355\n-0.691661\n-0.396754\nM\n\n\n8\n2021-01-02\n-0.687173\n-0.845206\n-0.671246\n-0.012665\nF\n\n\n9\n2021-01-03\n-1.117310\n0.234416\n1.659802\n0.742044\nM\n\n\n10\n2021-01-04\n-0.191836\n-0.887629\n-0.747158\n1.692455\nF\n\n\n11\n2021-01-05\n0.050808\n-0.636996\n0.190915\n2.100255\nM\n\n\n12\n2021-01-06\n0.120159\n0.617203\n0.300170\n-0.352250\nF\n\n\n13\n2021-01-07\n-1.142518\n-0.349343\n-0.208894\n0.586623\nM\n\n\n14\n2021-01-08\n0.838983\n0.931102\n0.285587\n0.885141\nF\n\n\n15\n2021-01-09\n-0.754398\n1.252868\n0.512930\n-0.298093\nM\n\n\n16\n2021-01-10\n0.488518\n-0.075572\n1.131629\n1.519817\nF\n\n\n17\n2021-01-11\n2.185575\n-1.396496\n-1.444114\n-0.504466\nM\n\n\n18\n2021-01-12\n0.160037\n0.876169\n0.315635\n-2.022201\nF\n\n\n19\n2021-01-13\n-0.306204\n0.827975\n0.230095\n0.762011\nM"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#엑셀값-수정",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#엑셀값-수정",
    "title": "05. Python Basic (6)",
    "section": "엑셀값 수정",
    "text": "엑셀값 수정\n\ndate \\(\\to\\) 날짜로 ㄹ바꿔보자\n\n\ns1[\"A1\"].value = \"날짜\"\n\n\ns1.cell(row=1,column=1).value\n\n'날짜'\n\n\n- 그러나 아직 파일에는 반영이 되지 않았음\n\n원본에 파일 반영하여 저장\n\nwb.save(\"df.xlsx\")\n\n- 다시 load후 결과 확인\n\nwb = xl.load_workbook(\"df.xlsx\")\n\n\ns1 = wb[\"Sheet1\"]\n\n\ns1.cell(row=1,column=1).value\n\n'날짜'\n\n\n\n\nex1. sex \\(\\to\\) 성별\n\ns1.cell(row=1,column=6).value\n\n'sex'\n\n\n\ns1[\"F1\"].value = \"성별\"\n\n\nwb.save(\"df.xlsx\")\n\n\nwb = xl.load_workbook(\"df.xlsx\")\ns1 = wb[\"Sheet1\"]\ns1.cell(row=1,column=6).value\n\n'성별'\n\n\n\n\n행 추가\n- 워크북 오브젝트 생성\n\nwb = xl.load_workbook(\"df.xlsx\")\n\n\ns1 = wb[\"Sheet1\"]\n\n- 두 번째 행에 빈 행 추가\n\ns1.insert_rows(2)\n\n- 빈 값이 들어간 것을 확인\n\nprint(s1.cell(2, 1).value, s1.cell(2, 2).value)b\n\nNone None\n\n\n\n\n열 추가\n\ns1.insert_cols(7)\n\n- 빈 값이 들어간 것을 확인\n\nprint(s1.cell(1, 7).value, s1.cell(2, 7).value)\n\nNone None\n\n\n- 전체 데이터 확인\n\nfor i in range(s1.min_row,s1.max_row+1) :\n    for j in range(s1.min_column,s1.max_column+1) :\n        print(s1.cell(row = i, column=j).value,end=\" | \")\n    print(\"\\n\")\n\n날짜 | A | B | C | D | 성별 | None | \n\nNone | None | None | None | None | None | None | \n\n2020-12-25 | 1.624345363663242 | -0.6117564136500754 | -0.5281717522634557 | -1.072968622156171 | F | None | \n\n2020-12-26 | 0.8654076293246785 | -2.301538696880283 | 1.74481176421648 | -0.7612069008951028 | M | None | \n\n2020-12-27 | 0.3190390960570985 | -0.2493703754774101 | 1.462107937044974 | -2.060140709497654 | F | None | \n\n2020-12-28 | -0.3224172040135075 | -0.3840543546684156 | 1.133769442335437 | -1.099891267314031 | M | None | \n\n성별 | -0.1724282075504357 | -0.8778584179213718 | 0.0422137467155928 | 0.5828152137158222 | F | None | \n\n2020-12-30 | -1.100619177212921 | 1.144723709839614 | 0.9015907205927955 | 0.5024943389018682 | M | None | \n\n2020-12-31 | 0.9008559492644118 | -0.6837278591743331 | -0.1228902255186481 | -0.9357694342590688 | F | None | \n\n2021-01-01 | -0.2678880796260159 | 0.530355466738186 | -0.691660751725309 | -0.3967535268559773 | M | None | \n\n2021-01-02 | -0.6871727001195994 | -0.8452056414987196 | -0.671246130836819 | -0.0126645989189013 | F | None | \n\n2021-01-03 | -1.117310348635278 | 0.2344156978170921 | 1.65980217710987 | 0.7420441605773356 | M | None | \n\n2021-01-04 | -0.1918355523616149 | -0.8876289640848363 | -0.7471582937508376 | 1.692454601027747 | F | None | \n\n2021-01-05 | 0.0508077547760289 | -0.6369956465693534 | 0.190915484667466 | 2.100255136478842 | M | None | \n\n2021-01-06 | 0.1201589524816291 | 0.6172031097074192 | 0.3001703199558275 | -0.3522498464935186 | F | None | \n\n2021-01-07 | -1.14251819802214 | -0.3493427224128775 | -0.2088942333747781 | 0.5866231911821976 | M | None | \n\n2021-01-08 | 0.8389834138745049 | 0.9311020813035572 | 0.2855873252542588 | 0.8851411642707281 | F | None | \n\n2021-01-09 | -0.7543979409966528 | 1.252868155233288 | 0.5129298204180088 | -0.2980928351027156 | M | None | \n\n2021-01-10 | 0.488518146537497 | -0.0755717130210557 | 1.131629387451427 | 1.519816816422199 | F | None | \n\n2021-01-11 | 2.185575406533161 | -1.396496335488138 | -1.444113805429589 | -0.5044658629464512 | M | None | \n\n2021-01-12 | 0.1600370694478304 | 0.8761689211162249 | 0.3156349472416052 | -2.022201215824003 | F | None | \n\n2021-01-13 | -0.3062040126283718 | 0.8279746426072462 | 0.2300947353643834 | 0.7620111803120247 | M | None | \n\n\n\n\n\n위에서 추가한 빈 행과 열을 삭제\n\ns1.delete_rows(2)\ns1.delete_cols(7)\n\n- 삭제 후 확인\n\nfor i in range(s1.min_row,s1.max_row+1) :\n    for j in range(s1.min_column,s1.max_column+1) :\n        print(s1.cell(row = i, column=j).value,end=\" | \")\n    print(\"\\n\")\n\n날짜 | A | B | C | D | 성별 | \n\n2020-12-25 | 1.624345363663242 | -0.6117564136500754 | -0.5281717522634557 | -1.072968622156171 | F | \n\n2020-12-26 | 0.8654076293246785 | -2.301538696880283 | 1.74481176421648 | -0.7612069008951028 | M | \n\n2020-12-27 | 0.3190390960570985 | -0.2493703754774101 | 1.462107937044974 | -2.060140709497654 | F | \n\n2020-12-28 | -0.3224172040135075 | -0.3840543546684156 | 1.133769442335437 | -1.099891267314031 | M | \n\n성별 | -0.1724282075504357 | -0.8778584179213718 | 0.0422137467155928 | 0.5828152137158222 | F | \n\n2020-12-30 | -1.100619177212921 | 1.144723709839614 | 0.9015907205927955 | 0.5024943389018682 | M | \n\n2020-12-31 | 0.9008559492644118 | -0.6837278591743331 | -0.1228902255186481 | -0.9357694342590688 | F | \n\n2021-01-01 | -0.2678880796260159 | 0.530355466738186 | -0.691660751725309 | -0.3967535268559773 | M | \n\n2021-01-02 | -0.6871727001195994 | -0.8452056414987196 | -0.671246130836819 | -0.0126645989189013 | F | \n\n2021-01-03 | -1.117310348635278 | 0.2344156978170921 | 1.65980217710987 | 0.7420441605773356 | M | \n\n2021-01-04 | -0.1918355523616149 | -0.8876289640848363 | -0.7471582937508376 | 1.692454601027747 | F | \n\n2021-01-05 | 0.0508077547760289 | -0.6369956465693534 | 0.190915484667466 | 2.100255136478842 | M | \n\n2021-01-06 | 0.1201589524816291 | 0.6172031097074192 | 0.3001703199558275 | -0.3522498464935186 | F | \n\n2021-01-07 | -1.14251819802214 | -0.3493427224128775 | -0.2088942333747781 | 0.5866231911821976 | M | \n\n2021-01-08 | 0.8389834138745049 | 0.9311020813035572 | 0.2855873252542588 | 0.8851411642707281 | F | \n\n2021-01-09 | -0.7543979409966528 | 1.252868155233288 | 0.5129298204180088 | -0.2980928351027156 | M | \n\n2021-01-10 | 0.488518146537497 | -0.0755717130210557 | 1.131629387451427 | 1.519816816422199 | F | \n\n2021-01-11 | 2.185575406533161 | -1.396496335488138 | -1.444113805429589 | -0.5044658629464512 | M | \n\n2021-01-12 | 0.1600370694478304 | 0.8761689211162249 | 0.3156349472416052 | -2.022201215824003 | F | \n\n2021-01-13 | -0.3062040126283718 | 0.8279746426072462 | 0.2300947353643834 | 0.7620111803120247 | M |"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#import-1",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#import-1",
    "title": "05. Python Basic (6)",
    "section": "import",
    "text": "import\n\nimport smtplib\nfrom email.mime.text import MIMEText"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#step1.-기본-셋팅",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#step1.-기본-셋팅",
    "title": "05. Python Basic (6)",
    "section": "step1. 기본 셋팅",
    "text": "step1. 기본 셋팅\n\n지메일, 모든 설정 \\(\\to\\) 전달 및 POP/IMAP \\(\\to\\) IMAP 엑세스(IMAP 사용 체크) \\(\\to\\) 변경사항 저장\n구글 계정 괸리 클랙 \\(\\to\\) 보안 \\(\\to\\) 2단계 인증 클릭 \\(\\to\\) 앱 비밀번호 \\(\\to\\) windows, 컴퓨터 메일 오픈\n컴퓨터용 앱 비밀번호 복사\n복사 후 첫 번째 인자에는 나의 이메일을, 두 번째 인자에는 복사한 비밀번호를 기입 후 실행\n\n\n# smtp 주소\ns = smtplib.SMTP('smtp.gmail.com', 587)\n\n# TLS 보안 시작\ns.starttls() \n\n## 로그인\ns.login('rkdcjf8232@gmail.com', 'zfkdrzytshqsucln') \n\n(235, b'2.7.0 Accepted')"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#step2.-메일-내용구성",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#step2.-메일-내용구성",
    "title": "05. Python Basic (6)",
    "section": "step2. 메일 내용구성",
    "text": "step2. 메일 내용구성\n\n## 본문\nm = MIMEText('''\n메일 보내기 테스트 테스트\n'''\n)\n\n## 제목\nm[\"Subject\"] = \"gc test\""
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#step3.-메일-보내기",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#step3.-메일-보내기",
    "title": "05. Python Basic (6)",
    "section": "step3. 메일 보내기",
    "text": "step3. 메일 보내기\n- s.sendmail(발신주소, 수신주소, 메일)\n\ns.sendmail(\"rkdcjf8232@gmail.com\",\"rkdcjf202150256@gmail.com\",m.as_string())\ns.quit()\n\n(221,\n b'2.0.0 closing connection s11-20020a62e70b000000b006888029fd63sm2245220pfh.9 - gsmtp')"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#step4.-메일-확인",
    "href": "posts/DX/00. 데이터 다루기/2023-08-17-05. Python Basic (6).html#step4.-메일-확인",
    "title": "05. Python Basic (6)",
    "section": "step4. 메일 확인",
    "text": "step4. 메일 확인"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html",
    "href": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html",
    "title": "03. Python Basic (4)",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex1.-특정-수보다-크거나-같으면-10-더하기",
    "href": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex1.-특정-수보다-크거나-같으면-10-더하기",
    "title": "03. Python Basic (4)",
    "section": "ex1. 특정 수보다 크거나 같으면 10 더하기",
    "text": "ex1. 특정 수보다 크거나 같으면 10 더하기\n\nv = int(input(\"기준값을 입력하시오 : \"))\ns = int(input(\"비교값을 입력하시오 : \"))\nif s&gt;= v:\n    s1 = s+10\n    print(f\"입력값 {v}보다 크거나 같은 숫자가 입력되었습니다. {s}에 10을 더한값은 {s1}입니다.\")\nelse:\n    print(f\"입력값 {v}보다 작은 숫자입니다.\")\n\n기준값을 입력하시오 :  70\n비교값을 입력하시오 :  60\n\n\n입력값 70보다 작은 숫자입니다.\n\n\n\nv = int(input(\"기준값을 입력하시오 : \"))\ns = int(input(\"비교값을 입력하시오 : \"))\nif s&gt;= v:\n    s1 = s+10\n    print(f\"입력값 {v}보다 크거나 같은 숫자가 입력되었습니다. {s}에 10을 더한값은 {s1}입니다.\")\nelse:\n    print(f\"입력값 {v}보다 작은 숫자입니다.\")\n\n기준값을 입력하시오 :  70\n비교값을 입력하시오 :  70\n\n\n입력값 70보다 크거나 같은 숫자가 입력되었습니다. 70에 10을 더한값은 80입니다."
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex2.-리스트-요소-확인",
    "href": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex2.-리스트-요소-확인",
    "title": "03. Python Basic (4)",
    "section": "ex2. 리스트 요소 확인",
    "text": "ex2. 리스트 요소 확인\n\ns = [1,2,3,4,5]\nif s :\n    print(s)\nelse :\n    print(\"요소 없음\")\n\n[1, 2, 3, 4, 5]\n\n\n\ns = []\nif s :\n    print(s)\nelse :\n    print(\"요소 없음\")\n\n요소 없음\n\n\n\ns = [1,2,3,4,5]\nif s :\n    pass ## 나중에 먼가 내가 조건문일 때 정의를 남기려고 `pass`!\nelse :\n    print(\"요소 없음\")"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex1.-학점",
    "href": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex1.-학점",
    "title": "03. Python Basic (4)",
    "section": "ex1. 학점",
    "text": "ex1. 학점\n\nimport numpy as np\n\n\ns = list(range(0,100,10))\n\n\ndef grade(s) :\n    if s &gt;= 90:\n        return \"A\"\n    elif s&gt;=80:\n        return \"B\"\n    elif s&gt;=70:\n        return \"C\"\n    elif s&gt;=60:\n        return \"D\"\n    else :\n        return \"F\"        \n\n\ns\n\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n\n\n\n[grade(i) for i in s]\n\n['F', 'F', 'F', 'F', 'F', 'F', 'D', 'C', 'B', 'A']"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex2.-아래-인코딩을-수행",
    "href": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex2.-아래-인코딩을-수행",
    "title": "03. Python Basic (4)",
    "section": "ex2. 아래 인코딩을 수행",
    "text": "ex2. 아래 인코딩을 수행\n\n\n\n숫자\n요일\n\n\n\n\n0\n월요일\n\n\n1\n화요일\n\n\n2\n수요일\n\n\n3\n목요일\n\n\n4\n금요일\n\n\n5\n토요일\n\n\n6\n일요일\n\n\n\n\nnum = list(np.random.randint(0,7,20))\n\n\ndef days(n) :\n    if n == 0 :\n        return \"월\"\n    elif n == 1 :\n        return \"화\"\n    elif n == 2 :\n        return \"수\"\n    elif n == 3 :\n        return \"목\"\n    elif n == 4 :\n        return \"금\"\n    elif n == 5 :\n        return \"토\"\n    else :\n        return \"일\"\n\n\nweek = [days(n) for n in num]\n\n\nprint(week)\n\n['월', '일', '토', '수', '월', '금', '일', '목', '월', '월', '토', '금', '일', '수', '화', '월', '수', '목', '일', '일']"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex3.-60점-이하-과락",
    "href": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex3.-60점-이하-과락",
    "title": "03. Python Basic (4)",
    "section": "ex3. 60점 이하 과락",
    "text": "ex3. 60점 이하 과락\n\ns = [62,59,70]\n\n\nfor i in s :\n    if i &lt;60 :\n        print (i,\"과락\")\n    else :\n        print(i)\n\n62\n59 과락\n70"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex1-for-if-to-짝수만-출력",
    "href": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex1-for-if-to-짝수만-출력",
    "title": "03. Python Basic (4)",
    "section": "ex1) for + if \\(\\to\\) 짝수만 출력",
    "text": "ex1) for + if \\(\\to\\) 짝수만 출력\n\ns = list(np.random.randint(1,100,size=10))\ns\n\n[37, 10, 35, 31, 70, 28, 40, 74, 69, 55]\n\n\n\ns2 = [i for i in s if i%2==0]\n\n\nprint(f\"짝수 list는 {s2}, 합은 {sum(s2)}\")\n\n짝수 list는 [10, 70, 28, 40, 74], 합은 222"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex2-리스트안에-원소-출력",
    "href": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex2-리스트안에-원소-출력",
    "title": "03. Python Basic (4)",
    "section": "ex2) 리스트안에 원소 출력",
    "text": "ex2) 리스트안에 원소 출력\n\nlst = [1,2, \"강철\",True, 1+2j]\n\n\n[i for i in lst]\n\n[1, 2, '강철', True, (1+2j)]"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex3-문자열-리스트-출력",
    "href": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex3-문자열-리스트-출력",
    "title": "03. Python Basic (4)",
    "section": "ex3) 문자열 리스트 출력",
    "text": "ex3) 문자열 리스트 출력\n\nl = list(\"abc\")\n\nfor i in l:\n    print(i)\n\na\nb\nc"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex4-구구단-구현",
    "href": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex4-구구단-구현",
    "title": "03. Python Basic (4)",
    "section": "ex4) 구구단 구현",
    "text": "ex4) 구구단 구현\n\nlst = list(range(2,10))\n\n\nfor i in lst :\n    for j in range(1,10) : \n        print (f\"{i} x {j} = {i*j}\")\n\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n6 x 1 = 6\n6 x 2 = 12\n6 x 3 = 18\n6 x 4 = 24\n6 x 5 = 30\n6 x 6 = 36\n6 x 7 = 42\n6 x 8 = 48\n6 x 9 = 54\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n8 x 1 = 8\n8 x 2 = 16\n8 x 3 = 24\n8 x 4 = 32\n8 x 5 = 40\n8 x 6 = 48\n8 x 7 = 56\n8 x 8 = 64\n8 x 9 = 72\n9 x 1 = 9\n9 x 2 = 18\n9 x 3 = 27\n9 x 4 = 36\n9 x 5 = 45\n9 x 6 = 54\n9 x 7 = 63\n9 x 8 = 72\n9 x 9 = 81"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex5-enumerate-to-짝수번째-인덱스만-출력",
    "href": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex5-enumerate-to-짝수번째-인덱스만-출력",
    "title": "03. Python Basic (4)",
    "section": "ex5) enumerate \\(\\to\\) 짝수번째 인덱스만 출력",
    "text": "ex5) enumerate \\(\\to\\) 짝수번째 인덱스만 출력\n- 컨테이너 자료형(문자열(str), 튜플(tuple), 리스트(list), 딕셔터리(dictionary), 집합(set))을 입력받아, 순번과 요소를 포함하는 오브젝트를 출력\n\nlst = list(\"abcdefghi\")\n\n\nlist(enumerate(lst))\n\n[(0, 'a'),\n (1, 'b'),\n (2, 'c'),\n (3, 'd'),\n (4, 'e'),\n (5, 'f'),\n (6, 'g'),\n (7, 'h'),\n (8, 'i')]\n\n\n\nfor i,j in enumerate(lst) :\n    if i%2==0 :\n        print(f\"index : {i}, str = {j}\")\n\nindex : 0, str = a\nindex : 2, str = c\nindex : 4, str = e\nindex : 6, str = g\nindex : 8, str = i"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex6-여러개의-값을-입력받아-짝수들의-제곱을-구하기",
    "href": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex6-여러개의-값을-입력받아-짝수들의-제곱을-구하기",
    "title": "03. Python Basic (4)",
    "section": "ex6) 여러개의 값을 입력받아 짝수들의 제곱을 구하기",
    "text": "ex6) 여러개의 값을 입력받아 짝수들의 제곱을 구하기\n\nnum_list = list(map(int, input(\"숫자를 입력하세요 : \").split()))\n\n\ns_list = [i**2 for i in num_list if i % 2 == 0]\n\ns_list\n\n숫자를 입력하세요 :  1 2 3 4 5 6\n\n\n[4, 16, 36]"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex1-기본-반복문",
    "href": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex1-기본-반복문",
    "title": "03. Python Basic (4)",
    "section": "ex1) 기본 반복문",
    "text": "ex1) 기본 반복문\n\ns = dict(a=100,b=55,c=74,d=87)\ns.items()\n\ndict_items([('a', 100), ('b', 55), ('c', 74), ('d', 87)])\n\n\n\nfor i,j in s.items() :\n    print(i,j)\n\na 100\nb 55\nc 74\nd 87"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex2-기준값을-입력받은후-특정값보다-큰-keyvalue를-추출",
    "href": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex2-기준값을-입력받은후-특정값보다-큰-keyvalue를-추출",
    "title": "03. Python Basic (4)",
    "section": "ex2) 기준값을 입력받은후 특정값보다 큰 key,value를 추출",
    "text": "ex2) 기준값을 입력받은후 특정값보다 큰 key,value를 추출\n\nnum = int(input(\"숫자를 입력하시오 : \"))\n\nfor i,j in s.items() :\n    if j&gt;num :\n        print (i,j)\n\n숫자를 입력하시오 :  60\n\n\na 100\nc 74\nd 87"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex3-합구하기",
    "href": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex3-합구하기",
    "title": "03. Python Basic (4)",
    "section": "ex3) 합구하기",
    "text": "ex3) 합구하기\n\ns = {\"a\" : [1,2,3,4],\n     \"b\" : [5,6,7,8],\n     \"c\" : [6,7,8,9]}\n\n\n{i : sum(j) for i,j in s.items()}\n\n{'a': 10, 'b': 26, 'c': 30}"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex2.-break",
    "href": "posts/DX/00. 데이터 다루기/2023-08-14-03. Python Basic (4).html#ex2.-break",
    "title": "03. Python Basic (4)",
    "section": "ex2. break",
    "text": "ex2. break\n- 짝수합 구하기\n\ns,i =0,0\n\nwhile True :\n    i+=1\n    if i&gt;100 :\n        break ## 100d을 넘어가면 break\n    if i%2==0 :\n        s += i\n    else :\n        continue ## 다시 처음으로"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html",
    "title": "01. Python Basic (2)",
    "section": "",
    "text": "from google.colab import drive\ndrive.mount('/content/drive')\n\nMounted at /content/drive\n\n\n\ncd /content/drive/MyDrive/Colab Notebooks/DX/1wk\n\n/content/drive/MyDrive/Colab Notebooks/DX/1wk\n\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#슬라이싱-1",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#슬라이싱-1",
    "title": "01. Python Basic (2)",
    "section": "슬라이싱 1",
    "text": "슬라이싱 1\n\nn = len(txt)\ntxt[2:n]\n\n' 이름은 이강철입니다.'\n\n\n- 참고 역슬레시는 인데싱에서 제외된다.\n\nprint(\"he's\")\nprint(\"he\\'s\")\n\nhe's\nhe's"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#슬라이싱-2",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#슬라이싱-2",
    "title": "01. Python Basic (2)",
    "section": "슬라이싱 2",
    "text": "슬라이싱 2\n- 구조 : txt[start : end : stride]\n\ntxt\n\n'나의 이름은 이강철입니다.'\n\n\n\nprint(txt[0:n:2])\nprint(txt[::2])\nprint(txt[::3])\nprint(txt[::-1])\nprint(txt[::-2])\n\n나 름 강입다\n나 름 강입다\n나이 철다\n.다니입철강이 은름이 의나\n.니철이은이의"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#count",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#count",
    "title": "01. Python Basic (2)",
    "section": "Count",
    "text": "Count\n\ntxt\n\n'나의 이름은 이강철입니다.'\n\n\n- 공백 세기\n\ntxt.count(\" \")\n\n2\n\n\n- 특장 문자 세기\n\ntxt.count(\"이\")\n\n2\n\n\n- 리스트나 튜플로 넘겨주면 에러가 발생\n\ntxt.count((\"이\",\" \"))\n\nTypeError: ignored\n\n\n- 문자가 아닌 문자열 카운트\n\nprint(txt)\nprint(txt.count(\"이강철\"))\n\n나의 이름은 이강철입니다.\n1"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#find",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#find",
    "title": "01. Python Basic (2)",
    "section": "find",
    "text": "find\n- 특정 문자의 인덱싱을 반환\n\nprint(txt)\nprint(txt.find(\"이\"))\nprint(txt.find(\"이강철\"))\n\n나의 이름은 이강철입니다.\n3\n7\n\n\n- find함수에 문제점은 범위를 지정해주지 않으면 찾고자 하는 문자의 첫 인덱스만 반환한다.\n- 특정 문자열을 찾을때 문자열 시작지점과 끝지점을 정해서 인덱싱\n\nprint(txt)\nprint(txt.find(\"이\",6,n))\n\n나의 이름은 이강철입니다.\n7"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#잠깐-다른-이야기",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#잠깐-다른-이야기",
    "title": "01. Python Basic (2)",
    "section": "잠깐 다른 이야기!",
    "text": "잠깐 다른 이야기!\n- 아래를 잘 살펴보자.\n\na = 3\nb = 3\nprint(id(a),id(b))\na +=1\nprint(id(a))\na *=2\nprint(id(a))\na =a-5\nprint(id(a))\n\n138123241308464 138123241308464\n138123241308496\n138123241308624\n138123241308464\n\n\n- a변수와 b변수에 3이라는 값을 할당하고, 각 메모리 주소를 출력하였다.\n- 질문 1 : 사칙 연산시 메모리 주소가 바뀐다?\n- 질문 2 : 그런데 동일한 값을 할당하면 같은 주소가 할당된다?\n- 질문 3 : 그런데 마지막에 a에서 5를 빼서 처음에 할당한 3과 동일하게 했더니 처음과 동일한 주소가 나왔다?\n- 내 생각 : 각각의 값(할당한 정수)들은 이미 각자의 고유한 주소를 가지고 있고, 변수들은 그 값들을 참조하는 포인터 역할을 하는 것 같다. 또한, 이는 정수 뿐이 아니라 단일 값을 가지는 모든 형태의 해당된다.\n\n문자열 주소확인\n\ns = \"apple\"\nprint(s)\nprint(id(s))\n\nprint(s.upper())\nprint(id(s.upper()))\n\napple\n138121951987056\nAPPLE\n138121951989872\n\n\n\n\n그렇다면 리스트도?\n\na = list(range(5))\nprint(a)\nprint(id(a))\na[1] = 100\nprint(a)\nprint(id(a))\n\n[0, 1, 2, 3, 4]\n138121952117504\n[0, 100, 2, 3, 4]\n138121952117504\n\n\n- 리스트는 바뀌지 않았다!!"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#capitalize-title",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#capitalize-title",
    "title": "01. Python Basic (2)",
    "section": "capitalize & title",
    "text": "capitalize & title\n- 첫글자만 대문자로 변환\n\na=\"i like apple\"\n\nprint(a.capitalize())\nprint(a.title())\n\nI like apple\nI Like Apple"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#rjust-ljust-center",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#rjust-ljust-center",
    "title": "01. Python Basic (2)",
    "section": "rjust, ljust, center",
    "text": "rjust, ljust, center\n- 각각, 오른쪽, 왼쪽, 중앙정렬을 하고 공백을 만든다\n\na = \"apple\"\nprint(\"[\"+a.rjust(7)+\"]\",sep=\"\")\nprint(\"[\",a.ljust(7),\"]\",sep=\"\")\nprint(\"[\",a.center(7),\"]\",sep=\"\")\n\n[  apple]\n[apple  ]\n[ apple ]\n\n\n- 근데 문장 단위로는 적용되지 않는다….\n\na = \"I like apple\"\nprint(\"[\"+a.rjust(7)+\"]\",sep=\"\")\nprint(\"[\",a.ljust(7),\"]\",sep=\"\")\nprint(\"[\",a.center(7),\"]\",sep=\"\")\n\n[I like apple]\n[I like apple]\n[I like apple]\n\n\n- 핳 근데 문장길이가 7보다 커서 그런거였당\n\na = \"I like apple\"\nprint(\"[\"+a.rjust(19)+\"]\",sep=\"\")\nprint(\"[\",a.ljust(19),\"]\",sep=\"\")\nprint(\"[\",a.center(19),\"]\",sep=\"\")\n\n[       I like apple]\n[I like apple       ]\n[    I like apple   ]\n\n\n- 즉, 전달되는 매개변수는 전체공간을 의미하고, 각각의 메소드는 어디로 정렬할지 정해준다!"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#replace",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#replace",
    "title": "01. Python Basic (2)",
    "section": "replace",
    "text": "replace\n- 값을 바꾼다고 객체가 변환되지는 않는다.\n\ntxt = \"사과\"\nprint(txt.replace(\"사과\",\"바나나\"))\nprint(txt)\n\n바나나\n사과\n\n\n- replace 함수를 자주 사용하는 이유!\n- 실제 데이터 전처리 시 아래와 같은 구조가 많다.\nnumber = \"123,456\"\n이러한 상황이 발생했을 때 replace 함수를 사용\n\nnumber =\"123,456\"\n\nint(number.replace(\",\",\"\"))\n\n123456"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#strip",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#strip",
    "title": "01. Python Basic (2)",
    "section": "strip",
    "text": "strip\n- 텍스트 문자열에서 양쪽 끝에 특정 문자(공백포함)를 제거\n\ntxt = \"  ###사과%%%%  \"\nprint(txt)\nprint(txt.strip(\" \"))\nprint(txt.strip(\"#%\"))  ## 공백이 포함되어 있어서 지워지지 않는 것 같다.\nprint(txt.strip(\" #%\")) ## 공백을 포함하니 깔끔하게 지워졌다.\n\n  ###사과%%%%  \n###사과%%%%\n  ###사과%%%%  \n사과"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#split",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#split",
    "title": "01. Python Basic (2)",
    "section": "split",
    "text": "split\n\n\nCode\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/covid19_20211202.csv\").iloc[1:,:]\ndf = df.set_index(\"일자\").iloc[:,1:18]\n\ndf = df.reset_index()\ndt = df[\"일자\"].tolist()\n\n\n\ndt[:5]\n\n['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24']\n\n\n\nyear = [i.split(\"-\")[0] for i in dt]\nmonth = [i.split(\"-\")[1] for i in dt]\nday = [i.split(\"-\")[2] for i in dt]\n\n\nnew_df = pd.DataFrame({\"year\": year,\n                       \"month\": month,\n                       \"day\" : day})\nnew_df.head()\n\n\n\n  \n    \n      \n\n\n\n\n\n\nyear\nmonth\nday\n\n\n\n\n0\n2020\n01\n20\n\n\n1\n2020\n01\n21\n\n\n2\n2020\n01\n22\n\n\n3\n2020\n01\n23\n\n\n4\n2020\n01\n24"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#join",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#join",
    "title": "01. Python Basic (2)",
    "section": "join",
    "text": "join\n\ndate = [(\"-\").join([year[i],month[i],day[i]]) for i in range(len(dt))]\n\n\ndate[:5]\n\n['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24']"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#리스트-basic",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#리스트-basic",
    "title": "01. Python Basic (2)",
    "section": "리스트 Basic",
    "text": "리스트 Basic\n\n[], list(), list(range(start,end)) 방법으로 리스트를 선언할 수 있다.\n\n\n리스트 선언 & 기본 method\n\na = [1,2,3,4,5]\nb = list((1,2,3,4,5))\nc = list(range(1,6))\n\n\nprint(f'''\n  a= {a}\n  b= {b}\n  c= {c}\n''')\n\n\n  a= [1, 2, 3, 4, 5]\n  b= [1, 2, 3, 4, 5]\n  c= [1, 2, 3, 4, 5]    \n\n\n\n- 선언한 리스트의 합을 구하기\n\nsum(a)\n\n15\n\n\n- 최대값과 최소값\n\nmin(a), max(a)\n\n(1, 5)\n\n\n- 특정 요소 카운트\n\nlst =  np.concatenate([np.ones(2), np.zeros(2)]).tolist()\nlst\n\n[1.0, 1.0, 0.0, 0.0]\n\n\n\nlst.count(0),lst.count(1)\n\n(2, 2)\n\n\n- 인덱스 반환\n\n리스트는 인덱스 반환 시, 맨 처음 인덱스만 반환한다 \\(\\to\\) 문자열.find 함수와 동일!\n\n\nlst.index(0)\n\n2\n\n\n\n그럼 다른 범위에 있는 “원소” 찾을때도 방법이 같지 않을까…???\n\n\nlst.index(0,3,5)\n\n3\n\n\n- 또한, 리스트는 자료형이 같지 않아도 다양한 자료형을 가질 수 있다.\n\n_lst = [True, 3.14, 1, \"에이블\"]\n\n\n[type(i) for i in _lst]\n\n[bool, float, int, str]\n\n\n\n\n리스트 중첩\n- 리스트안에 리스트를 집어넣을 수 있다.\n\nimport numpy as np\n\n\nX = np.arange(1,16).reshape(5,-1)\nprint(\n    f'''\n    X.shape = {X.shape}\n    listX = {X.tolist()}\n   '''\n)\n\n\n    X.shape = (5, 3)\n    listX = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\n   \n\n\n\n_X = X.tolist()\n\n\nlen(_X) ## 길이가 5인리스트로 인식됌\n\n5\n\n\n\n\n중첩된 리스트 flatten\n1 리스트 컴프리헨션\n\n[ j for i in _X for j in i ]\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n\n2 numpy 이용\n\nnp.array(_X).flatten().tolist()\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#리스트-연산",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#리스트-연산",
    "title": "01. Python Basic (2)",
    "section": "리스트 연산",
    "text": "리스트 연산\n- 리스트의 연산은 더하기와 곱하기만 지원한다.\n\n+ : 2개의 리스트를 이어붙임, R에서 처럼 브로드캐스팅이 수행되지 않음\n\n\na = [1,2]\nb = [3,4]\n\n\na+b\n\n[1, 2, 3, 4]\n\n\n\n\\(\\times\\) 는 특정 리스트를 얼마나 반복할지 결정해줌\n\n\na*2\n\n[1, 2, 1, 2]\n\n\n\na*0\n\n[]\n\n\n\na*(-2)\n\n[]"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#리스트-원소-추가",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#리스트-원소-추가",
    "title": "01. Python Basic (2)",
    "section": "리스트 원소 추가",
    "text": "리스트 원소 추가\n\nappend\n\na=[]\n\nfor i in range(3):\n    a += [i]\n\na\n\n[0, 1, 2]\n\n\n\nappend 주의!\n- 아래와 같은 연산은 수행되지 않는다.\n\na.append(0).append(1).append(2)\n\nAttributeError: ignored\n\n\n- 또한, 매개변수로 리스트를 전달 시 아래처럼 수행된다.\n\na = [1,2,3]\nb = [4,5]\na.append(b)\na\n\n[1, 2, 3, [4, 5]]\n\n\n\n\nappend를 쓰지않고…\n\na=[]\n\nfor i in range(3):\n    a += [i]\na\n\n[0, 1, 2]\n\n\n\n\n+ 와 .append의 차이\n- append 함수의 경우 연산 수행 후 연산 대상 객체가 변화한다.\n\na = []\na.append(1)\na\n\n[1]\n\n\n- +는 그렇지 않음\n\na = []\na + [1]\na\n\n[]\n\n\n\n\n\nextend\n- 두개의 리스트를 더할 때 extend함수를 사용한다. (append는 리스트 오브 리스트로 붙여준다는점에서 차이가 명확함)\n- append처럼 +와의 차이가 같음.\n\na = [1,2]\nb = [3,4]\na.extend(b)\nprint(f'''\n      a.extend(b) = {a}\n      a = {a}\n      ''')\n\n\n      a.extend(b) = [1, 2, 3, 4]\n      a = [1, 2, 3, 4]\n      \n\n\n\na = [1,2]\nb = [3,4]\na+b\nprint(f'''\n      a + b = {a}\n      a = {a}\n      ''')\n\n\n      a + b = [1, 2]\n      a = [1, 2]\n      \n\n\n\n\ninsert\n- 원하는 인덱스의 요소를 추가한다.\n\na = list(np.round(np.random.normal(size=10),2))\na\n\n[0.51, -0.52, -0.57, -1.48, 0.57, -1.32, 1.71, 0.03, 0.18, 0.97]\n\n\n- 0과 2인덱스의 해당 값을 추가\n\na.insert(0,100)\na.insert(2,77)\n\n\nfor i in range(len(a)) :\n    print(f\"index : {i},  value : {a[i]}\")\n\nindex : 0,  value : 100\nindex : 1,  value : 0.51\nindex : 2,  value : 77\nindex : 3,  value : -0.52\nindex : 4,  value : -0.57\nindex : 5,  value : -1.48\nindex : 6,  value : 0.57\nindex : 7,  value : -1.32\nindex : 8,  value : 1.71\nindex : 9,  value : 0.03\nindex : 10,  value : 0.18\nindex : 11,  value : 0.97"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#리스트-원소-삭제",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#리스트-원소-삭제",
    "title": "01. Python Basic (2)",
    "section": "리스트 원소 삭제",
    "text": "리스트 원소 삭제\n\na = list(range(5))\na\n\n[0, 1, 2, 3, 4]\n\n\n\n단일 원소삭제\n\na = list(range(5))\na\n\ndel a[0]\n\n\na\n\n[1, 2, 3, 4]\n\n\n\n\n범위 삭제\n\na = list(range(5))\na\n\ndel a[0:2]\na\n\n[2, 3, 4]\n\n\n\n\nremove\n- 특정 원소를 삭제\n\na = list(range(5))\na\n\n[0, 1, 2, 3, 4]\n\n\n\na.remove(3)\n\n\na\n\n[0, 1, 2, 4]\n\n\n\n\npop\n- 특정 index값을 받아 해당 인덱스의 값을 출력하고, 리스트에서 제거된다. \\(\\to\\) 나머지 원소들은 자동으로 인덱스가 앞으로 땅겨짐\n\na = [1,2,3,4]\n\n\na.pop(0)\n\n1\n\n\n\na.pop(0)\n\n2\n\n\n\n\nclear\n- 전체 원소 삭제\n\na = [1,2,3,4]\na\n\n[1, 2, 3, 4]\n\n\n\na.clear()\na\n\n[]"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#리스트-정렬",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#리스트-정렬",
    "title": "01. Python Basic (2)",
    "section": "리스트 정렬",
    "text": "리스트 정렬\n\na = [1,3,2,4]\na\n\n[1, 3, 2, 4]\n\n\n\na.sort()\na\n\n[1, 2, 3, 4]\n\n\n\na.sort(reverse= True)\na\n\n[4, 3, 2, 1]\n\n\n\na.reverse()\na\n\n[1, 2, 3, 4]\n\n\n리스트 카피\n- 카피함수를 사용하는 이유는 아래와 같은 경우를 방지하기 위함이다.\n\na = list(range(4))\nb = a\n\n\nid(a) == id(b)\n\nTrue\n\n\n- 위와 같이 같은 메모리 공간을 참조하고 있으면….\n\na.append(5)\n\n\na\n\n[0, 1, 2, 3, 5]\n\n\n\nb\n\n[0, 1, 2, 3, 5]\n\n\n- 이러한 경우를 방지하기 위해 copy함수를 사용\n\na = list(range(4))\nb = a.copy()\n\nid(a) == id(b)\n\nFalse\n\n\n\na.append(5)\n\n\nprint(a,b)\n\n[0, 1, 2, 3, 5] [0, 1, 2, 3]"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#exercise-link",
    "href": "posts/DX/00. 데이터 다루기/2023-08-10-01. Python Basic (2) .html#exercise-link",
    "title": "01. Python Basic (2)",
    "section": "exercise Link",
    "text": "exercise Link\n- exercise 1\n- exercise 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DX track",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nAug 28, 2023\n\n\n00. 데이터 분석 (1)\n\n\nGC \n\n\n\n\nAug 24, 2023\n\n\n00. MP (1)\n\n\nGC \n\n\n\n\nAug 23, 2023\n\n\n04. numpy & pandas (5)\n\n\nGC \n\n\n\n\nAug 22, 2023\n\n\n03. numpy & pandas (4)\n\n\nGC \n\n\n\n\nAug 21, 2023\n\n\n02. numpy & pandas (3)\n\n\nGC \n\n\n\n\nAug 19, 2023\n\n\n01. Plotly test\n\n\nGC \n\n\n\n\nAug 18, 2023\n\n\n00. numpy & pandas (1)\n\n\nGC \n\n\n\n\nAug 18, 2023\n\n\n01. numpy & pandas (2)\n\n\nGC \n\n\n\n\nAug 17, 2023\n\n\n05. Python Basic (6)\n\n\nGC \n\n\n\n\nAug 16, 2023\n\n\n04. Python Basic (5)\n\n\nGC \n\n\n\n\nAug 15, 2023\n\n\nExtra 04. 클래스 탐구 (3)\n\n\nGC \n\n\n\n\nAug 14, 2023\n\n\n03. Python Basic (4)\n\n\nGC \n\n\n\n\nAug 14, 2023\n\n\nExtra 03. 클래스 탐구 (2)\n\n\nGC \n\n\n\n\nAug 11, 2023\n\n\n02. Python Basic (3)\n\n\nGC \n\n\n\n\nAug 10, 2023\n\n\n01. Python Basic (2)\n\n\nGC \n\n\n\n\nAug 10, 2023\n\n\nExtra 02. 클래스 탐구 (1)\n\n\nGC \n\n\n\n\nAug 9, 2023\n\n\n00. Python Basic (1)\n\n\nGC \n\n\n\n\nAug 9, 2023\n\n\nExtra 01. 클래스\n\n\nGC \n\n\n\n\nAug 8, 2023\n\n\nExtra 00. 밈\n\n\nGC \n\n\n\n\nJul 31, 2023\n\n\n00. Intro & setting\n\n\nGC \n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About Me",
    "section": "Education",
    "text": "Education\n- 전북대학교 통계학과 학사(부전공: 컴퓨터공학) 졸업 | 3.67 / 4.50 | 2015. 03 ~ 2021. 02\n- 전북대학교 통계학과 석사 졸업 | 4.44 / 4.50 | 2021. 03 ~ 2023. 02"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "About Me",
    "section": "Experience",
    "text": "Experience\n- 국민연금공단 빅데이터부 현장실습 | 2020. 03 ~ 2020. 06\n- 지역 문화산업 융복합 데이터 전문가 과정 | 과학기술정보통신부, 한국데이터산업진흥원 | 2021. 06 ~ 2021. 08\n- 빅데이터 혁신공유대학사업 서포터즈 |전북대학교 빅데이터 현신공유대학사업| 2021. 07. 01 ~ 2021. 10. 31\n- KT AIVLE School DX Consultant Track | KT | 2023. 08 ~"
  },
  {
    "objectID": "about.html#publications",
    "href": "about.html#publications",
    "title": "About Me",
    "section": "Publications",
    "text": "Publications\n- 데이터 분석을 통한 지역별 고령친화도 시각화\n`-` 김영선, 강민구, 이강철 등  | 문화융복합아카이빙연구소 | 2021. 10 | 기록관리/보존 \n- 핵심어 추출 및 데이터 증강기법을 이용한 텍스트 분류 모델 성능 개선\n`-` 이강철, 안정용 | 한국자료분석학회 | 한국자료분석학회 | 2022. 10 | 통계학"
  },
  {
    "objectID": "about.html#certificate",
    "href": "about.html#certificate",
    "title": "About Me",
    "section": "Certificate",
    "text": "Certificate\n- 워드프로세서 | 대한상공회의소 | 19-19-017981 | 2019. 08. 30\n- 데이터분석준전문가(ADsP) | 한국데이터진흥원 | ADsP-0223898 | 2019. 10. 01\n- 사회조사분석사 2급 | 한국산업인력공단 | 19201142418N | 2019. 10. 01"
  },
  {
    "objectID": "about.html#conctact",
    "href": "about.html#conctact",
    "title": "About Me",
    "section": "Conctact",
    "text": "Conctact\n- rkdcjf8232@gmail.com"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html",
    "href": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html",
    "title": "00. Python Basic (1)",
    "section": "",
    "text": "from google.colab import drive\ndrive.mount('/content/drive')\n\nDrive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n\n\n\ncd /content/drive/MyDrive/Colab Notebooks/DX/1wk\n\n/content/drive/MyDrive/Colab Notebooks/DX/1wk"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#ex1-홀수-짝수-구분",
    "href": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#ex1-홀수-짝수-구분",
    "title": "00. Python Basic (1)",
    "section": "ex1) 홀수 짝수 구분",
    "text": "ex1) 홀수 짝수 구분\n\nlst = list(range(1,10))\nlst\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nsol\n\nodd = [i for i in lst if i % 2 == 1]\nevn = [i for i in lst if i % 2 == 0]\n\n\nodd\n\n[1, 3, 5, 7, 9]\n\n\n\nevn\n\n[2, 4, 6, 8]"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#ex2-특정-숫자가-입력되었을-때-각-자리의-숫자를-구하기",
    "href": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#ex2-특정-숫자가-입력되었을-때-각-자리의-숫자를-구하기",
    "title": "00. Python Basic (1)",
    "section": "ex2) 특정 숫자가 입력되었을 때 각 자리의 숫자를 구하기",
    "text": "ex2) 특정 숫자가 입력되었을 때 각 자리의 숫자를 구하기\n\nsol\n\nnum  = int(input())\n\na = num // 100\n\nb = (num - a*100) // 10\n\nc = num-(a*100+b*10)\n\nprint(\"백의자리는 {}, 십의자리는 {}, 일의 자리는 {}\".format(a,b,c))\n\n254\n백의자리는 2, 십의자리는 5, 일의 자리는 4"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#ex3-합과-평균",
    "href": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#ex3-합과-평균",
    "title": "00. Python Basic (1)",
    "section": "ex3) 합과 평균",
    "text": "ex3) 합과 평균\n\nsol\n\nimport numpy as np\n\n\ns = list(range(1,10))\n\n\nsumm = sum(s)\n\nave = np.mean(s)\n\n\nprint(\"합 : {}, 평균: {}\".format(summ,ave))\n\n합 : 45, 평균: 5.0"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#ex4-비교-연산자",
    "href": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#ex4-비교-연산자",
    "title": "00. Python Basic (1)",
    "section": "ex4) 비교 연산자",
    "text": "ex4) 비교 연산자\n- 숫자 비교\n\na = list(range(1,11))\nb = list(range(11,21))\n\n\na, b\n\n([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n\n\n\n[a[i] == b[i] for i in range(10)]\n\n[False, False, False, False, False, False, False, False, False, False]\n\n\n- 문자 비교\n\n(\"A\" == \"a\"), (\"A\" &gt;\"a\")\n\n(False, False)\n\n\n\nord(\"A\"), ord(\"a\")\n\n(65, 97)"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#대표적인-자료형",
    "href": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#대표적인-자료형",
    "title": "00. Python Basic (1)",
    "section": "대표적인 자료형",
    "text": "대표적인 자료형\n\n\n\nint\nfloat\nbool\nstr\ncomplex\n\n\n\n\n3\n3.14\nTrue\n“강철”\n3+2j\n\n\n5\n3.141551\nFalse\n“이강철”\n2-2j"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#형태변환",
    "href": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#형태변환",
    "title": "00. Python Basic (1)",
    "section": "형태변환",
    "text": "형태변환\n\nfloat \\(\\to\\) int\n- 아래의 경우는 형태변환이 되었으나 정보의 손실이 발생한 것임\n\na = 3.4\n\n_a = int(a)\n\n\ntype(a), type(_a)\n\n(float, int)\n\n\n\n\n\\(\\text{bool} \\to \\text{(float, int)}\\,\\text{and}\\, \\text{(float, int)} \\to \\text{bool}\\)\n- bool \\(\\to\\) int, float\n\na = True\n_a1 = float(a)\n_a2 = int(a)\n\n\ntype(a), type(_a1), type(_a2)\n\n(bool, float, int)\n\n\n- int, float \\(\\to\\) bool\n\na1 = 1\na2 = 1.0\n\n_a1 = bool(a1)\n_a2 = bool(a2)\n\n\n_a1, _a2, type(_a1), type(_a2)\n\n(True, True, bool, bool)\n\n\n- str \\(\\to\\) bool\n\nbool(\"강철\")\n\nTrue\n\n\n\nbool(\"\")\n\nFalse\n\n\n\n\n암묵적 형변환\n\nTrue +1\n\n2\n\n\n\n1*1.0\n\n1.0\n\n\n\nTrue + True\n\n2\n\n\n\n\n형태변환이 불가능한 경우\n\ncomplex1 = 3+ 0j\ncomplex1\n\n(3+0j)\n\n\nfloat(complex1) ## 에러 발생\n\n\n문자열의 사칙연산(O)\n\n\"X\" + \"2\"\n\n'X2'\n\n\n\n\"X\"*2\n\n'XX'\n\n\n\n\n문자열의 사칙연산(x)\n\"X\" * \"Y\"\n\n\"X\" - \"2\"\n\n\"X\" / \"y\"\n\n- 즉 더하기를 제외한 나머지 사칙연산은 문자형 변수에 적용되지 않는다."
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#날짜형-자료",
    "href": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#날짜형-자료",
    "title": "00. Python Basic (1)",
    "section": "날짜형 자료",
    "text": "날짜형 자료\n\nfrom datetime import datetime\n\n\nnow = datetime.now()\n\n\nnow\n\ndatetime.datetime(2023, 8, 9, 5, 45, 24, 616085)\n\n\n\nprint(now)\n\n2023-08-09 05:45:24.616085\n\n\n\nprint(\"{}년 {}월 {}일 {}시 {}분 {}초\".format(now.year,now.month,now.day,now.hour,now.minute,now.second))\n\n2023년 8월 9일 5시 45분 24초"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#기타-연산",
    "href": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#기타-연산",
    "title": "00. Python Basic (1)",
    "section": "기타 연산",
    "text": "기타 연산\n\na = \"ABCD\"\nb = \"efgh\"\n\n\na.lower(),b.upper()\n\n('abcd', 'EFGH')"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#f-string요즘-쓰는-방식",
    "href": "posts/DX/00. 데이터 다루기/2023-08-09-00. Python Basic (1).html#f-string요즘-쓰는-방식",
    "title": "00. Python Basic (1)",
    "section": "f-string(요즘 쓰는 방식)",
    "text": "f-string(요즘 쓰는 방식)\n\nex1\n\nn = \"이강철\"\na = 28\ns = 100.213141\n\n\nprint(f\"{a}살의 {n}의 점수는 {s:.2f}입니다. \")\n\n28살의 이강철의 점수는 100.00입니다. \n\n\n\n\nex2\n\nn = \"이강철\"\na = 28\ns1 = 100.2\ns2 = 100.3\ns3 = 100.4\ns4 = 100.5\ns5 = 100.6\n\n\ntxt= f'''\n이름 : {n}\n\n연령대 : {age}\n\n점수 : {s1},{s2},{s3},{s4},{s5}\n\n합계 : {ts:,.0f} /평균 : {avg:,.2f}\n'''`\n\nprint(txt)\n\n\n이름 : 이강철\n\n연령대 : 20\n\n점수 : 100.2,100.3,100.4,100.5,100.6\n\n합계 : 502 /평균 : 100.40"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html",
    "title": "02. Python Basic (3)",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#why-use1",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#why-use1",
    "title": "02. Python Basic (3)",
    "section": "why use(1)?",
    "text": "why use(1)?\n- 빠르고 다중 작업에 유리\n- 메모리 관리측면에서도 좋음, 또한 소괄호 생략이 가능하다."
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-1-여러개의-변수를-동시-출력-및-할당",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-1-여러개의-변수를-동시-출력-및-할당",
    "title": "02. Python Basic (3)",
    "section": "예제 1 : 여러개의 변수를 동시 출력 및 할당",
    "text": "예제 1 : 여러개의 변수를 동시 출력 및 할당\n\nn,a,s,h,w = 1,2,3,4,5\n\n\nn,a,s,h,w\n\n(1, 2, 3, 4, 5)\n\n\n\na = 3.1,\na\n\n(3.1,)"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-2.-서로-다른-타입의-원소들로-튜플",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-2.-서로-다른-타입의-원소들로-튜플",
    "title": "02. Python Basic (3)",
    "section": "예제 2. 서로 다른 타입의 원소들로 튜플?",
    "text": "예제 2. 서로 다른 타입의 원소들로 튜플?\n\ns = 90,80,70,\"A\",\"B\"\ns\n\n(90, 80, 70, 'A', 'B')"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-3-튜플-중첩",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-3-튜플-중첩",
    "title": "02. Python Basic (3)",
    "section": "예제 3: 튜플 중첩",
    "text": "예제 3: 튜플 중첩\n\ns = 90,80,70,(\"A\",\"B\")\ns\n\n(90, 80, 70, ('A', 'B'))"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-4-두-변수의-값을-교환",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-4-두-변수의-값을-교환",
    "title": "02. Python Basic (3)",
    "section": "예제 4 : 두 변수의 값을 교환",
    "text": "예제 4 : 두 변수의 값을 교환\n\na,b = 1,2\n\n\na,b\n\n(1, 2)\n\n\n\na,b = b,a\n\n\na,b\n\n(2, 1)"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-5-for문",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-5-for문",
    "title": "02. Python Basic (3)",
    "section": "예제 5: for문",
    "text": "예제 5: for문\n\nlst = [['gc', 2021502565, 'M'],\n       ['iu',202254321, 'F'],\n       ['hodong', 202011223, 'M']]\nlst\n\n[['gc', 2021502565, 'M'], ['iu', 202254321, 'F'], ['hodong', 202011223, 'M']]\n\n\n\nfor name, s, sex in lst :\n    print(name,s,sex)\n\ngc 2021502565 M\niu 202254321 F\nhodong 202011223 M"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-6-range-함수를-사용해-만들기",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-6-range-함수를-사용해-만들기",
    "title": "02. Python Basic (3)",
    "section": "예제 6 : range 함수를 사용해 만들기",
    "text": "예제 6 : range 함수를 사용해 만들기\n\ntest = tuple(range(1,11))\ntest\n\n(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-7-for-tuple-_",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-7-for-tuple-_",
    "title": "02. Python Basic (3)",
    "section": "예제 7 : for +  tuple + \"_\"",
    "text": "예제 7 : for +  tuple + \"_\"\n\nlst\n\n[['gc', 2021502565, 'M'], ['iu', 202254321, 'F'], ['hodong', 202011223, 'M']]\n\n\n\nfor _,s,_ in lst :\n    print(s)\n\n2021502565\n202254321\n202011223\n\n\n\nfor _,_,s in lst :\n    print(s)\n\nM\nF\nM"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-8-언패킹-연산자-for-starstar",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-8-언패킹-연산자-for-starstar",
    "title": "02. Python Basic (3)",
    "section": "예제 8 : 언패킹 연산자(*) + for (\\(\\star\\star\\))",
    "text": "예제 8 : 언패킹 연산자(*) + for (\\(\\star\\star\\))\n\n*는 특정하지 않은 여러개의 인자를 튜플 형태로 받는다.\n\n\nfor n,*a in lst :\n    print(n,*a)\n\ngc 2021502565 M\niu 202254321 F\nhodong 202011223 M\n\n\n\nfor n,*a in lst :\n    print(n,a)\n\ngc [2021502565, 'M']\niu [202254321, 'F']\nhodong [202011223, 'M']\n\n\n\nfor n,*a in lst :\n    print(n)\n\ngc\niu\nhodong\n\n\n\nh,b,*t = range(1,11)\n\n\nh,b,t\n\n(1, 2, [3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\nh,b,*t\n\n(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n\n\nt\n\n[3, 4, 5, 6, 7, 8, 9, 10]\n\n\n- 언패킹 연산자를 아래처럼 단일값으로 쓸수는 없다. 대신 print문을 이욯아여 출력!\n\n*t\n\nSyntaxError: can't use starred expression here (3801933867.py, line 1)\n\n\n\nprint(*t)\n\n3 4 5 6 7 8 9 10\n\n\n\ntemp = h,b,t\n\n\ntemp\n\n(1, 2, [3, 5, 5, 6, 7, 8, 9, 10])\n\n\n- 튜플안에 선언한 리스트는 수정할 수 있다!\n\ntemp[2][1]=4\n\n\ntemp\n\n(1, 2, [3, 4, 5, 6, 7, 8, 9, 10])\n\n\n- 단, 튜플안에 선언된 리스트 통째?로는 바꿀 수 없음\n\ntemp[2] = d\n\nNameError: name 'd' is not defined\n\n\n\ntemp[2] = [1,2,3]\n\nTypeError: 'tuple' object does not support item assignment"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-9-함수",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#예제-9-함수",
    "title": "02. Python Basic (3)",
    "section": "예제 9 : 함수",
    "text": "예제 9 : 함수\n\n아래의 함수는 여러개의 값을 리턴하는 것처럼 보이나 사실은 길이가 4인, 튜플 1개만을 return한다."
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#왜-튜플만이-괄호를-생략",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#왜-튜플만이-괄호를-생략",
    "title": "02. Python Basic (3)",
    "section": "왜 튜플만이 괄호를 생략?",
    "text": "왜 튜플만이 괄호를 생략?\n\n튜플을 먼저 만들고, 괄호를 생략하는 문법을 추가한 것은 아닐것이다.\n원래는 괄호없이 벡터를 만들고 싶었을 것임\n차피 벡터는 한,두번 쓰고 버리는 경우가 많고, 대부분 이름도 필요없음 \\(\\to\\) (즉, 원소에 접근해서 sorting하고… 순서를 바꿀 필요가 없다는 것임)\n데이터를 분석하면서 우리에게 필요한것은, 데이터가 벡터 형태로 모여, 하나이 DataFrame을 구축하기만 하면된다."
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#원소-추가",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#원소-추가",
    "title": "02. Python Basic (3)",
    "section": "원소 추가",
    "text": "원소 추가\n\ns = {\"a\",\"b\"}\n\n\ns.add(\"c\")\ns\n\n{'a', 'b', 'c'}\n\n\n\ns.update([\"c\",\"d\"])\ns\n\n{'a', 'b', 'c', 'd'}"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#원소-삭제",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#원소-삭제",
    "title": "02. Python Basic (3)",
    "section": "원소 삭제",
    "text": "원소 삭제\n\ns\n\n{'a', 'b', 'c', 'd'}\n\n\n\ns.remove(\"c\")\n\n\ns\n\n{'a', 'b', 'd'}\n\n\n- discard로 삭제시 에러메세지를 반환하지 않음\n\ns.remove(\"z\")\n\nKeyError: 'z'\n\n\n\ns.discard(\"z\")\n\n- 모든 원소 삭제\n\ns.clear()\n\n\ns\n\nset()"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#in",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#in",
    "title": "02. Python Basic (3)",
    "section": "in",
    "text": "in\n\n\"a\" in s\n\nTrue\n\n\n\n합,교,차 집합\n\nset1 = {\"a\",\"b\",\"c\"}\nset2 = {\"b\",\"c\",\"d\"}\n\n- 합집합\n\nset1|set2\n\n{'a', 'b', 'c', 'd'}\n\n\n\nset1.union(set2)\n\n{'a', 'b', 'c', 'd'}\n\n\n- 교집합\n\nset1 & set2\n\n{'b', 'c'}\n\n\n\nset1.intersection(set2)\n\n{'b', 'c'}\n\n\n- 차집합\n\nset1,set2\n\n({'a', 'b', 'c'}, {'b', 'c', 'd'})\n\n\n\nset2-set1\n\n{'d'}\n\n\n\n\n부분 집합\n\nset3 = set1|set2\n\n\nset2&lt;set3\n\nTrue"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#for문",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#for문",
    "title": "02. Python Basic (3)",
    "section": "for문",
    "text": "for문\n- 다음에 txt에서 각 알파벳이 몇 번 사용됬는지 구하기\n\ntxt = 'asdkflkjahsdlkjfhlaksglkjdhflkgjhlskdfjhglkajhsdlkfjhalsdkf'\ntxt\n\n'asdkflkjahsdlkjfhlaksglkjdhflkgjhlskdfjhglkajhsdlkfjhalsdkf'\n\n\n\n{i : list(txt).count(i) for i in set(txt)}\n\n{'l': 9, 'h': 7, 's': 6, 'd': 6, 'a': 5, 'g': 3, 'j': 7, 'f': 6, 'k': 10}"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#선언",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#선언",
    "title": "02. Python Basic (3)",
    "section": "선언",
    "text": "선언\n\n방법 1. 가장 일반적\n\ndct=  {\"a\" : 1, \"b\":2}\ndct\n\n{'a': 1, 'b': 2}\n\n\n\n\n방법 2. dict(\\(\\star\\star\\))\n\ndct = dict(a=1, b=2)\ndct\n\n{'a': 1, 'b': 2}\n\n\n\n\n방법 3. 중첩된 리스트\n\ndct = dict([[\"a\",1],[\"b\",2]])\ndct\n\n{'a': 1, 'b': 2}\n\n\n\n\n방법 4. 튜플\n\ndct = (\"a\",1),(\"b\",2)\ndict(dct)\n\n{'a': 1, 'b': 2}"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#원소-추출",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#원소-추출",
    "title": "02. Python Basic (3)",
    "section": "원소 추출",
    "text": "원소 추출\n- 딕셔너리는 key값을 이용해서 추출해야한다. (value로 key를 찾는 것은 불가!)\n\ndct =dict(dct)\n\n\ndct[\"a\"], dct[\"b\"]\n\n(1, 2)\n\n\n\nex1. 딕셔너리를 쓰는 이유?\n- 아래와 같은 구조가 있다고 하자.\n\nlst = [[\"a\",1],[\"b\",2]]\nlst\n\n[['a', 1], ['b', 2]]\n\n\n- 여기에서 a의 값을 알려면?\n\n[s for n,s in lst if n==\"a\"]\n\n[1]\n\n\n- 딕셔너리를 이용한 풀이\n\ndict(lst)[\"a\"]\n\n1"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#원소-추가-1",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#원소-추가-1",
    "title": "02. Python Basic (3)",
    "section": "원소 추가",
    "text": "원소 추가\n\ndct\n\n{'a': 1, 'b': 2}\n\n\n\ndct[\"c\"]=3\n\n\ndct\n\n{'a': 1, 'b': 2, 'c': 3}"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#원소-삭제-1",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#원소-삭제-1",
    "title": "02. Python Basic (3)",
    "section": "원소 삭제",
    "text": "원소 삭제\n- 방법 1\n\ndel dct[\"a\"]\n\n\ndct\n\n{'b': 2, 'c': 3}\n\n\n- 방법 2\n\ndct.pop(\"b\")\n\n2\n\n\n\ndct\n\n{'c': 3}"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#연산",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#연산",
    "title": "02. Python Basic (3)",
    "section": "연산",
    "text": "연산\n\ndct = dict(a=1,b=2,c=3)\n\n\ndct\n\n{'a': 1, 'b': 2, 'c': 3}\n\n\n\n\"a\" in dct\n\nTrue"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#특수-기능",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#특수-기능",
    "title": "02. Python Basic (3)",
    "section": "특수 기능",
    "text": "특수 기능\n\ndct\n\n{'a': 1, 'b': 2, 'c': 3}\n\n\n\ndct.keys()\n\ndict_keys(['a', 'b', 'c'])\n\n\n\ndct.values()\n\ndict_values([1, 2, 3])\n\n\n\ndct.items()\n\ndict_items([('a', 1), ('b', 2), ('c', 3)])"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#for-dictstarstar",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#for-dictstarstar",
    "title": "02. Python Basic (3)",
    "section": "for + dict(\\(\\star\\star\\))",
    "text": "for + dict(\\(\\star\\star\\))\n\nfor k in dct.keys() :\n    print(k)\n\na\nb\nc\n\n\n- 아 딕셔너리는 루프에서 객체 자체로 전달시 key값을 반환한다.\n\nfor k in dct:\n    print(k)\n\na\nb\nc\n\n\n- value 접근\n\nfor i in dct.values():\n    print(i)\n\n1\n2\n3\n\n\n- key,value 동시 접근\n\nfor i,j in dct.items():\n    print(i,j)\n\na 1\nb 2\nc 3"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#list-to-dict.values",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#list-to-dict.values",
    "title": "02. Python Basic (3)",
    "section": "list \\(\\to\\) dict.values",
    "text": "list \\(\\to\\) dict.values\n- 아래와 같은 원핫인코딩을 생각\n\n\n\n변환전\n변환후\n\n\n\n\na\n[1,0,0,0]\n\n\nb\n[0,1,0,0]\n\n\nc\n[0,0,1,0]\n\n\nd\n[0,0,0,1]\n\n\n\n- 주어진 리스트를 원핫인코딩하여라\n\nlst = list(\"abcd\")*2\nlst\n\n['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']\n\n\n\nsol\n\ndct = {\"a\": [1,0,0,0],\n      \"b\": [0,1,0,0],\n      \"c\": [0,0,1,0],\n      \"d\": [0,0,0,1]}\n\n\ndct\n\n{'a': [1, 0, 0, 0], 'b': [0, 1, 0, 0], 'c': [0, 0, 1, 0], 'd': [0, 0, 0, 1]}"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#dict.values-to-list",
    "href": "posts/DX/00. 데이터 다루기/2023-08-11-02. Python Basic (3) .html#dict.values-to-list",
    "title": "02. Python Basic (3)",
    "section": "dict.values \\(\\to\\) list",
    "text": "dict.values \\(\\to\\) list\n- 위 원핫인코딩을 다시 변환\n\nsol\n\nvalue = [v for v in dct.values()] *2\nvalue\n\n[[1, 0, 0, 0],\n [0, 1, 0, 0],\n [0, 0, 1, 0],\n [0, 0, 0, 1],\n [1, 0, 0, 0],\n [0, 1, 0, 0],\n [0, 0, 1, 0],\n [0, 0, 0, 1]]\n\n\n\n[i for v in value for i,j in dct.items() if j == v]\n\n['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-16-04. Python Basic (5).html",
    "href": "posts/DX/00. 데이터 다루기/2023-08-16-04. Python Basic (5).html",
    "title": "04. Python Basic (5)",
    "section": "",
    "text": "*은 여러개의 인수를 튜플로 입력받아 처리해주는 메소드이다.\n\n\ndef a(*alpha) :\n    for a in alpha : \n        print(f\"입력된 문자는 {a}입니다.\")\n\n\na(\"A\",\"B\")\n\n입력된 문자는 A입니다.\n입력된 문자는 B입니다.\n\n\n- 또한, 임의의 매개변수를 여러개 전달받고, 고정변수를 따로 전달받아 아래와 같이 작성할 수 있다.\n\ndef a(*alpha,v) :\n    for a in alpha : \n        print(f\"입력된 문자는 {a}이며 종류는 {v}입니다.\")\n\n\na(\"A\",\"B\",v = \"알파벳\")\n\n입력된 문자는 A이며 종류는 알파벳입니다.\n입력된 문자는 B이며 종류는 알파벳입니다.\n\n\n\n단 고정값은 맨뒤에 전달해주어야 한다.\n\n\na(v = \"알파벳\",\"A\",\"B\")\n\nSyntaxError: positional argument follows keyword argument (1027399463.py, line 1)\n\n\n\n\n\n\\[\\text{result} = \\sum_{i=1}^{n} x^2\\]\n\ndef a(*a) :\n    result = sum([i**2 for i in a])\n    return result\n\n\na(1,2,3,4,5)\n\n55\n\n\n\nlst= [2,10,4]\n\n\ndef solution(sides):\n    sides.sort()\n    if sides[-1] &lt; sum(sides[:-1]) :\n        return 1\n    else :\n        return 2\n\n\nsolution(lst)\n\n2\n\n\n\n\n\n- 분수 덧셈후 결과의 기약분수의 분모와 분자를 출력\n\nimport math\n\n\ndef sol(n1,d1,n2,d2) :\n    d = d1*d2 ## 분모 \n    n = n1*d2 + n2*d1 ##분자\n\n    gcd = math.gcd(d,n) ## 최대공약수\n\n    return n//gcd,d//gcd\n\n\nn,d = sol(1,2,3,4)\n\n\nn\n\n5\n\n\n\nd\n\n4\n\n\n\n\n\n\n\n\na = 1\nb = -a\n\na == abs(b)\n\nTrue\n\n\n\n\n\n\na = list(\"abcd\")\n\nall(a)\n\nTrue\n\n\n- 0은 False와 같음\n\n0 == False\n\nTrue\n\n\n\na.append(0)\na\n\n['a', 'b', 'c', 'd', 0]\n\n\n\nall(a)\n\nFalse\n\n\n\n\n\n\na\n\n['a', 'b', 'c', 'd', 0]\n\n\n\nany(a)\n\nTrue\n\n\n\n\n\n\na\n\n['a', 'b', 'c', 'd', 0]\n\n\n\ndir(a)\n\n['__add__',\n '__class__',\n '__class_getitem__',\n '__contains__',\n '__delattr__',\n '__delitem__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__iadd__',\n '__imul__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__reversed__',\n '__rmul__',\n '__setattr__',\n '__setitem__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'append',\n 'clear',\n 'copy',\n 'count',\n 'extend',\n 'index',\n 'insert',\n 'pop',\n 'remove',\n 'reverse',\n 'sort']\n\n\n- 오리지날 메소드만 출력\n\nb = [i for i in dir(a) if i[0] != \"_\"]\n\n\nb\n\n['append',\n 'clear',\n 'copy',\n 'count',\n 'extend',\n 'index',\n 'insert',\n 'pop',\n 'remove',\n 'reverse',\n 'sort']\n\n\n\n\n\n- x를 y로 나눈 몫과 나머지를 튜플로 반환\n\ndivmod(5,2)\n\n(2, 1)\n\n\n\n\n\n- 코드의 실행을 입력받아 결과를 받음.\n\neval('10+20')\n\n30\n\n\n\n\n\n- 함수에 매개변수를 전달해 참인 경우만 결과를 반환 \\(\\to\\) filter(f,a)\n- ex1\n\n\n\ndef f(x) :\n    if x % 2 == 0 :\n        return x\n\n\na = [1,2,3,4,5]\n\n\nlist(filter(f,a))\n\n[2, 4]\n\n\n\n\n\n\nlist(filter(lambda x : x % 2==0,a))\n\n[2, 4]\n\n\n\n\n\n\n- 문자의 아스키 코드반환\n\nord(\"A\")\n\n65\n\n\n\n\n\n- 짝수 선택 예제\n\nimport numpy as np\nimport pandas as pd\n\n\nnp.random.seed(1)\ndf2= pd.DataFrame(np.random.normal(size=(10,4)),columns=list('ABCD'))\ndf2.head()\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n0\n1.624345\n-0.611756\n-0.528172\n-1.072969\n\n\n1\n0.865408\n-2.301539\n1.744812\n-0.761207\n\n\n2\n0.319039\n-0.249370\n1.462108\n-2.060141\n\n\n3\n-0.322417\n-0.384054\n1.133769\n-1.099891\n\n\n4\n-0.172428\n-0.877858\n0.042214\n0.582815\n\n\n\n\n\n\n\n- A열에서 0보다 큰값들만 출력\n\ndf2.iloc[map(lambda x : x&gt;0, df2.A),:]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n0\n1.624345\n-0.611756\n-0.528172\n-1.072969\n\n\n1\n0.865408\n-2.301539\n1.744812\n-0.761207\n\n\n2\n0.319039\n-0.249370\n1.462108\n-2.060141\n\n\n6\n0.900856\n-0.683728\n-0.122890\n-0.935769\n\n\n\n\n\n\n\n- A,C열에서 둘다 0보다 큰값들만 출력\n\ndf2.loc[ map(lambda x,y : (x&gt;0) & (y&gt;0) , df2.A,df2.C),:]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n1\n0.865408\n-2.301539\n1.744812\n-0.761207\n\n\n2\n0.319039\n-0.249370\n1.462108\n-2.060141\n\n\n\n\n\n\n\n- 짝수에는 곱하기2, 홀수에는 곱하기 3\n\na = list(range(1,11))\na\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n\nlist(map(lambda x : x*2 if x%2 ==0 else x*3,a))\n\n[3, 4, 9, 8, 15, 12, 21, 16, 27, 20]\n\n\n\n\n\n- 객체가 해당 자료형의 해당하는 객체인지 확인\n\na = list(\"abcd\")\nb = 1\n\nprint(isinstance(a,list))\nprint(isinstance(b,int))\n\nTrue\nTrue\n\n\n\n\n\n- 두 객체의 요소들을 쌍으로 묶어서 반환해줌\n\na = [1,2,3,4]\nb = [2,4,6,8]\nlist(zip(a,b))\n\n[(1, 2), (2, 4), (3, 6), (4, 8)]\n\n\n- 아래와 같이 인덱스 범위를 넘어가면 그냥 무시한다.\n\na = [1,2,3,4]\nb = [2,4,6,8,9]\nlist(zip(a,b))\n\n[(1, 2), (2, 4), (3, 6), (4, 8)]"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-16-04. Python Basic (5).html#ex1.-여러개-인수를-입력받아-처리하는-함수",
    "href": "posts/DX/00. 데이터 다루기/2023-08-16-04. Python Basic (5).html#ex1.-여러개-인수를-입력받아-처리하는-함수",
    "title": "04. Python Basic (5)",
    "section": "",
    "text": "*은 여러개의 인수를 튜플로 입력받아 처리해주는 메소드이다.\n\n\ndef a(*alpha) :\n    for a in alpha : \n        print(f\"입력된 문자는 {a}입니다.\")\n\n\na(\"A\",\"B\")\n\n입력된 문자는 A입니다.\n입력된 문자는 B입니다.\n\n\n- 또한, 임의의 매개변수를 여러개 전달받고, 고정변수를 따로 전달받아 아래와 같이 작성할 수 있다.\n\ndef a(*alpha,v) :\n    for a in alpha : \n        print(f\"입력된 문자는 {a}이며 종류는 {v}입니다.\")\n\n\na(\"A\",\"B\",v = \"알파벳\")\n\n입력된 문자는 A이며 종류는 알파벳입니다.\n입력된 문자는 B이며 종류는 알파벳입니다.\n\n\n\n단 고정값은 맨뒤에 전달해주어야 한다.\n\n\na(v = \"알파벳\",\"A\",\"B\")\n\nSyntaxError: positional argument follows keyword argument (1027399463.py, line 1)"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-16-04. Python Basic (5).html#ex2.-아래를-만족하는-함수를-작성하라.",
    "href": "posts/DX/00. 데이터 다루기/2023-08-16-04. Python Basic (5).html#ex2.-아래를-만족하는-함수를-작성하라.",
    "title": "04. Python Basic (5)",
    "section": "",
    "text": "\\[\\text{result} = \\sum_{i=1}^{n} x^2\\]\n\ndef a(*a) :\n    result = sum([i**2 for i in a])\n    return result\n\n\na(1,2,3,4,5)\n\n55\n\n\n\nlst= [2,10,4]\n\n\ndef solution(sides):\n    sides.sort()\n    if sides[-1] &lt; sum(sides[:-1]) :\n        return 1\n    else :\n        return 2\n\n\nsolution(lst)\n\n2"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-16-04. Python Basic (5).html#ex3.-여러-개의-값-return",
    "href": "posts/DX/00. 데이터 다루기/2023-08-16-04. Python Basic (5).html#ex3.-여러-개의-값-return",
    "title": "04. Python Basic (5)",
    "section": "",
    "text": "- 분수 덧셈후 결과의 기약분수의 분모와 분자를 출력\n\nimport math\n\n\ndef sol(n1,d1,n2,d2) :\n    d = d1*d2 ## 분모 \n    n = n1*d2 + n2*d1 ##분자\n\n    gcd = math.gcd(d,n) ## 최대공약수\n\n    return n//gcd,d//gcd\n\n\nn,d = sol(1,2,3,4)\n\n\nn\n\n5\n\n\n\nd\n\n4"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-16-04. Python Basic (5).html#내장함수",
    "href": "posts/DX/00. 데이터 다루기/2023-08-16-04. Python Basic (5).html#내장함수",
    "title": "04. Python Basic (5)",
    "section": "",
    "text": "a = 1\nb = -a\n\na == abs(b)\n\nTrue\n\n\n\n\n\n\na = list(\"abcd\")\n\nall(a)\n\nTrue\n\n\n- 0은 False와 같음\n\n0 == False\n\nTrue\n\n\n\na.append(0)\na\n\n['a', 'b', 'c', 'd', 0]\n\n\n\nall(a)\n\nFalse\n\n\n\n\n\n\na\n\n['a', 'b', 'c', 'd', 0]\n\n\n\nany(a)\n\nTrue\n\n\n\n\n\n\na\n\n['a', 'b', 'c', 'd', 0]\n\n\n\ndir(a)\n\n['__add__',\n '__class__',\n '__class_getitem__',\n '__contains__',\n '__delattr__',\n '__delitem__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__iadd__',\n '__imul__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__reversed__',\n '__rmul__',\n '__setattr__',\n '__setitem__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'append',\n 'clear',\n 'copy',\n 'count',\n 'extend',\n 'index',\n 'insert',\n 'pop',\n 'remove',\n 'reverse',\n 'sort']\n\n\n- 오리지날 메소드만 출력\n\nb = [i for i in dir(a) if i[0] != \"_\"]\n\n\nb\n\n['append',\n 'clear',\n 'copy',\n 'count',\n 'extend',\n 'index',\n 'insert',\n 'pop',\n 'remove',\n 'reverse',\n 'sort']\n\n\n\n\n\n- x를 y로 나눈 몫과 나머지를 튜플로 반환\n\ndivmod(5,2)\n\n(2, 1)\n\n\n\n\n\n- 코드의 실행을 입력받아 결과를 받음.\n\neval('10+20')\n\n30\n\n\n\n\n\n- 함수에 매개변수를 전달해 참인 경우만 결과를 반환 \\(\\to\\) filter(f,a)\n- ex1\n\n\n\ndef f(x) :\n    if x % 2 == 0 :\n        return x\n\n\na = [1,2,3,4,5]\n\n\nlist(filter(f,a))\n\n[2, 4]\n\n\n\n\n\n\nlist(filter(lambda x : x % 2==0,a))\n\n[2, 4]\n\n\n\n\n\n\n- 문자의 아스키 코드반환\n\nord(\"A\")\n\n65\n\n\n\n\n\n- 짝수 선택 예제\n\nimport numpy as np\nimport pandas as pd\n\n\nnp.random.seed(1)\ndf2= pd.DataFrame(np.random.normal(size=(10,4)),columns=list('ABCD'))\ndf2.head()\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n0\n1.624345\n-0.611756\n-0.528172\n-1.072969\n\n\n1\n0.865408\n-2.301539\n1.744812\n-0.761207\n\n\n2\n0.319039\n-0.249370\n1.462108\n-2.060141\n\n\n3\n-0.322417\n-0.384054\n1.133769\n-1.099891\n\n\n4\n-0.172428\n-0.877858\n0.042214\n0.582815\n\n\n\n\n\n\n\n- A열에서 0보다 큰값들만 출력\n\ndf2.iloc[map(lambda x : x&gt;0, df2.A),:]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n0\n1.624345\n-0.611756\n-0.528172\n-1.072969\n\n\n1\n0.865408\n-2.301539\n1.744812\n-0.761207\n\n\n2\n0.319039\n-0.249370\n1.462108\n-2.060141\n\n\n6\n0.900856\n-0.683728\n-0.122890\n-0.935769\n\n\n\n\n\n\n\n- A,C열에서 둘다 0보다 큰값들만 출력\n\ndf2.loc[ map(lambda x,y : (x&gt;0) & (y&gt;0) , df2.A,df2.C),:]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n1\n0.865408\n-2.301539\n1.744812\n-0.761207\n\n\n2\n0.319039\n-0.249370\n1.462108\n-2.060141\n\n\n\n\n\n\n\n- 짝수에는 곱하기2, 홀수에는 곱하기 3\n\na = list(range(1,11))\na\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n\nlist(map(lambda x : x*2 if x%2 ==0 else x*3,a))\n\n[3, 4, 9, 8, 15, 12, 21, 16, 27, 20]\n\n\n\n\n\n- 객체가 해당 자료형의 해당하는 객체인지 확인\n\na = list(\"abcd\")\nb = 1\n\nprint(isinstance(a,list))\nprint(isinstance(b,int))\n\nTrue\nTrue\n\n\n\n\n\n- 두 객체의 요소들을 쌍으로 묶어서 반환해줌\n\na = [1,2,3,4]\nb = [2,4,6,8]\nlist(zip(a,b))\n\n[(1, 2), (2, 4), (3, 6), (4, 8)]\n\n\n- 아래와 같이 인덱스 범위를 넘어가면 그냥 무시한다.\n\na = [1,2,3,4]\nb = [2,4,6,8,9]\nlist(zip(a,b))\n\n[(1, 2), (2, 4), (3, 6), (4, 8)]"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-16-04. Python Basic (5).html#sub",
    "href": "posts/DX/00. 데이터 다루기/2023-08-16-04. Python Basic (5).html#sub",
    "title": "04. Python Basic (5)",
    "section": "sub",
    "text": "sub\n\np = \"강철 : 961230-1111111 호연 : 961231-1111111\" \n\n\nimport re\n\n- 해당 패턴을 아래와 같이 기억\n\nmask = re.compile(\"(\\d{6})[-]\\d{7}\")\n\n- g&lt;?&gt; : 그룹을 의미하며 위 컴파일에서 ()로 구분한다. \\(\\to\\) g&lt;0&gt;은 전체 패턴을 의미\n- () : g&lt;1&gt;\n\nmask.sub(\"\\g&lt;1&gt;-XXXXXXX\",p)\n\n'강철 : 961230-XXXXXXX 호연 : 961231-XXXXXXX'\n\n\n- ()[-] : g&lt;0&gt;\n\nmask.sub(\"\\g&lt;0&gt;-XXXXXXX\",p)\n\n'강철 : 961230-1111111-XXXXXXX 호연 : 961231-1111111-XXXXXXX'\n\n\n- 아래와 같이 1명만 바꿀 수 있음\n\nmask.sub(\"\\g&lt;1&gt;-XXXXXXX\",p,count=1)\n\n'강철 : 961230-XXXXXXX 호연 : 961231-1111111'"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/2023-08-16-04. Python Basic (5).html#basic",
    "href": "posts/DX/00. 데이터 다루기/2023-08-16-04. Python Basic (5).html#basic",
    "title": "04. Python Basic (5)",
    "section": "basic",
    "text": "basic\n\nimport re\n\n\nmatch\n- 문자열의 첫 글자가 정규식과 일치하는지 확인\n\ns = \"I am gc\"\n\n\nresult = re.match(\"I\",s)\nif result:\n    print(\"o\")\nelse :\n    print(\"x\")\n\no\n\n\n\n\nsearch\n- 문자열 전체에서 정규식과 일치하는 확인\n\ns = \"I am gcg\"\n\n\nresult = re.search(\"gc\",s)\n\n\nif result:\n    print(\"o\")\nelse :\n    print(\"x\")\n\no\n\n\n- 매치된 결과를 다음과 같은 메소드로 확인할 수 있다.\n\ns = \"I am gc\"\nresult = re.search(\"g\",s)\n\n\ngroup() : 매치된 문자열을 반환\n\n\nresult.group()\n\n'g'\n\n\n\nstart(),end() : 매치된 문자열의 시작과 끝의 위치를 반환\n\nend() : 끝위치-1을 반환한다.\n\n\n\nresult.start()\n\n5\n\n\n\nresult.end()\n\n6\n\n\n\ns[5]\n\n'g'\n\n\n\ns[6]\n\n'c'\n\n\n\nspan() : 매치된 문자열의 시작, 끝을 튜플로 반환\n\n\nresult.span()\n\n(5, 6)\n\n\n\n\nfindall\n- 정규식과 매치되는 모든 문자열을 리스트로 반환\n\ns= 'I am gc gc'\n\n\nre.findall(\"g\",s)\n\n['g', 'g']\n\n\n\nre.findall(\"gc\",s)\n\n['gc', 'gc']\n\n\n\n\nfinditer\n- 정규식과 매치되는 모든 문자열을 반복 가능한 객체로 변환\n\ns\n\n'I am gc gc'\n\n\n\nresult = re.finditer(\"gc\",s)\n\n\nfor i in result : \n    print(i)\n\n&lt;re.Match object; span=(5, 7), match='gc'&gt;\n&lt;re.Match object; span=(8, 10), match='gc'&gt;\n\n\n\n\n나열된 문자 포함여부 확인\n\ns\n\n'I am gc gc'\n\n\n\nre.findall(\"[gc]\",s)\n\n['g', 'c', 'g', 'c']\n\n\n- 같은 문자 한번만 표시\n\nlist(set(re.findall(\"[gc]\",s)))\n\n['c', 'g']\n\n\n\n^ : 해당 문자열을 제외한 문자들을 리스트로 출력\n\n\ns\n\n'I am gc gc'\n\n\n\nlist(set(re.findall(\"[^gc]\",s)))\n\n[' ', 'm', 'a', 'I']\n\n\n\nlist(set(re.findall(\"[^ gc]\",s))) ## 공백 제거\n\n['m', 'a', 'I']\n\n\n\n\n범위안에 문자 포함여부확인\n\ns\n\n'I am gc gc'\n\n\n- 소문자만 출력\n\nre.findall(\"[a-z]\",s)\n\n['a', 'm', 'g', 'c', 'g', 'c']\n\n\n- 대문자만 출력\n\nre.findall(\"[A-Z]\",s)\n\n['I']\n\n\n- 대,소문자 둘다 출력\n\nre.findall(\"[A-Za-z]\",s)\n\n['I', 'a', 'm', 'g', 'c', 'g', 'c']\n\n\n- 숫자 찾기\n\ns = \"gc is 28 years\"\n\n\nre.findall(\"[0-9]\",s)\n\n['2', '8']\n\n\n\n\n두 문자 사이의 포함 여부 확인\n\ns = \"sabe\"\n\n\n.은 한글자를 대체하는 단어로 다음과 같은 패턴으로 활용할 수 있다.\n\n\ns\n\n'sabe'\n\n\n\nre.findall(\"a.e\",s) \n\n['abe']\n\n\n\n\n문자 반복 확인\n- 일정한 패턴이 얼마나 반복되는지 아래와 같은 형식으로 확인할 수 있다.\n\ns = \"gc gcc\"\n\n\ns\n\n'gc gcc'\n\n\n\nc가 0회이상 반복\n\n\nre.findall(\"g*c\",s)\n\n['gc', 'gc', 'c']\n\n\n\nc가 1회 이상 반복\n\n\nre.findall(\"gc{1}\",s)\n\n['gc', 'gc']\n\n\n\nc가 1~2회 반복\n\n\nre.findall(\"gc{1,2}\",s)\n\n['gc', 'gcc']\n\n\n\nc가 0에서 1회 반복\n\n\nre.findall(\"gc?\",s)\n\n['gc', 'gc']"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-08-Extra 00. 밈.html",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-08-Extra 00. 밈.html",
    "title": "Extra 00. 밈",
    "section": "",
    "text": "- 점프투파이썬 : 클래스는 과자틀과 비슷하다. 클래스란 똑같은 무엇인가를 계속 만들어 낼 수도 잇는 설계도면이고 객체란 클래스로 만든 피조물을 뜻한다.\n- 위키피디아 : 객체지향 프로그래밍에서 클래스는 상태(멤버 변수) 및 동작 구현(멤버 함수 또는 메서드)에 대한 초기값을 제공하는 객체 생성을 위한 확장 가능한 프로그램 코드 템플릿이다.\n- TCP 스쿨 : 클래스란 객체를 정의하는 틀 또는 설계도와 같은 의미로 사용\n- 교수님 생각 : 클래스는 복제, 변형, 재생산을 용이하게 하기 위해 만들어진 확장가능한 프로그램이 코드 단위(extensible program-code-template)이다.\n\n\nfrom IPython.core.display import HTML"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-08-Extra 00. 밈.html#sum_i15-ai-quad-a0.5",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-08-Extra 00. 밈.html#sum_i15-ai-quad-a0.5",
    "title": "Extra 00. 밈",
    "section": "\\(\\sum_{i=1}^{5} a^{i} \\quad a=0.5\\)",
    "text": "\\(\\sum_{i=1}^{5} a^{i} \\quad a=0.5\\)\n- 방법1\n\na = 0.5\n\n\na + a**2 + a**3 + a**4 +a**5\n\n0.96875\n\n\n- 방법2\n\na + \\\na**2 \\\n+ a**3 \\\n+ a**4\\\n+a**5\n\n0.96875\n\n\n\n```으로 선언하는 문자열\n- 에시 1\n\nstring = '\\n1. asdf\\n2. sdfa\\n3. dfas\\n4. fasd\\n'\nprint(string)\n\n\n1. asdf\n2. sdfa\n3. dfas\n4. fasd\n\n\n\n\nstring = \\\n'''\n1. asdf\n2. sdfa\n3. dfas\n4. fasd\n'''\nprint(string)\n\n\n1. asdf\n2. sdfa\n3. dfas\n4. fasd\n\n\n\n- 예시 2\n\nstring = \\\n'''\n1. asdf\n2. sdfa\n3. dfas\n4. fasd\n5. {}\n6. {}\n'''\n\n\nprint(string.format(\"aaa\",\"bbb\"))\n\n\n1. asdf\n2. sdfa\n3. dfas\n4. fasd\n5. aaa\n6. bbb\n\n\n\n\n\nHTML\n- 예제1. 텍스트 출력\n\nhtml_str = '''\n&lt;p&gt; 파이썬 프로그래밍 &lt;/p&gt;\n'''\n\n\nHTML(html_str)\n\n\n 파이썬 프로그래밍 \n\n\n- 예제 2 : 스타일 변경\n\nhtml_str = '''\n&lt;style&gt;\n    .title {\n         font-family : \"Times New Roman\", sefif;\n         font-size : 30px;\n         font-weight : 900;\n        }\n&lt;/style&gt;\n&lt;p class=\"title\"&gt; 파이썬 프로그래밍 &lt;/p&gt;\n'''\n\n\nHTML(html_str)\n\n\n\n 파이썬 프로그래밍 \n\n\n- 예제 3 : 이미지 삽입\n\nhtml_str = '''\n\n&lt;img src = \"hani.jpeg\" width = 300&gt;\n'''\n\n\nHTML(html_str)\n\n\n\n\n\n\n\ndisplay(HTML(html_str))"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-08-Extra 00. 밈.html#단계-밈의-구상",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-08-Extra 00. 밈.html#단계-밈의-구상",
    "title": "Extra 00. 밈",
    "section": "1단계 : 밈의 구상",
    "text": "1단계 : 밈의 구상\n\ntitle : 타이틀에 해당하는 텍스트\nimg : 데프트의 인터뷰 이미지\nQ : 인터뷰 질문에 해당하는 텍스트 (.text)\nA : 인터뷰 답변에 해당하는 텍스트 (.text)\nhighlight : “마음”\n\n\nhtml_str = '''\n&lt;style&gt;\n    .title {\n        font-family: \"Times New Roman\", serif;\n        font-size: 30px;\n        font-weight: 900;\n    }\n    .text {\n        font-family: \"Arial\", sans-serif;\n        font-size: 20px;\n        font-style: italic;\n    }\n    .highlight {\n        font-family: \"Montserrat\", monospace;\n        font-size: 35px;\n        font-weight: 900;\n        text-decoration: underline; ## 밑줄\n        font-style: normal;\n        color: darkblue;\n        background-color: #FFFF00;\n    }\n&lt;/style&gt;\n\n&lt;p class=\"title\"&gt;RGE전 패배는 괜찮다.&lt;/p&gt;\n&lt;img src=https://github.com/guebin/PP2023/blob/main/posts/03_Class/JungGGuckMa.jpg?raw=true width=\"600\"&gt;\n&lt;p&gt; \\n &lt;/p&gt;\n&lt;p class=\"text\"&gt; Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까?&lt;/p&gt;\n&lt;p class=\"text\"&gt; A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n&lt;p class=\"title\"&gt;중요한 것은 꺾이지 않는 &lt;span class=\"highlight\"&gt;마음&lt;/span&gt;&lt;/p&gt;\n'''\n\n\ndisplay(HTML(html_str))\n\n\n\n\nRGE전 패배는 괜찮다.\n\n \n \n Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까?\n A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n중요한 것은 꺾이지 않는 마음"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-08-Extra 00. 밈.html#단계-양식틀의-완성함수-이용",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-08-Extra 00. 밈.html#단계-양식틀의-완성함수-이용",
    "title": "Extra 00. 밈",
    "section": "2단계 : 양식틀의 완성(함수 이용)",
    "text": "2단계 : 양식틀의 완성(함수 이용)\n\nhtml_str = '''\n&lt;style&gt;\n    .title {{\n        font-family: \"Times New Roman\", serif;\n        font-size: 30px;\n        font-weight: 900;\n    }}\n    .text {{\n        font-family: \"Arial\", sans-serif;\n        font-size: 20px;\n        font-style: italic;\n    }}\n    .highlight {{\n        font-family: \"Montserrat\", monospace;\n        font-size: 35px;\n        font-weight: 900;\n        text-decoration: underline; ## 밑줄\n        font-style: normal;\n        color: darkblue;\n        background-color: #FFFF00;\n    }}\n&lt;/style&gt;\n\n&lt;p class=\"title\"&gt;{tt1}&lt;/p&gt;\n&lt;img src={url} width=\"600\"&gt;\n&lt;p&gt; \\n &lt;/p&gt;\n&lt;p class=\"text\"&gt; {Q}&lt;/p&gt;\n&lt;p class=\"text\"&gt; {A}: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n&lt;p class=\"title\"&gt;중요한 것은 꺾이지 않는 &lt;span class=\"highlight\"&gt; {h1} &lt;/span&gt;&lt;/p&gt;\n'''\n\n\ntitle = \"중요한건 꺽이지 않는 마음\"\n\nurl = \"https://github.com/guebin/PP2023/blob/main/posts/03_Class/JungGGuckMa.jpg?raw=true\"\n\nQ = \"Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\"\n\nA = \"A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\"\n\nh1 = \"마음\"\n\n\n_str = html_str.format(\n    tt1 = title,\n    url = url,\n    Q = Q,\n    A = A,\n    h1 = h1\n)\ndisplay(HTML(_str))\n\n\n\n\n중요한건 꺽이지 않는 마음\n\n \n \n Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\n A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n중요한 것은 꺾이지 않는  마음"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-08-Extra 00. 밈.html#단계-밈놀이함수",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-08-Extra 00. 밈.html#단계-밈놀이함수",
    "title": "Extra 00. 밈",
    "section": "3단계 : 밈놀이(함수)",
    "text": "3단계 : 밈놀이(함수)\n\ndef JM (html_str,title,url,Q,A,h1) : \n    _str = html_str.format(\n        tt1 = title,\n        url = url,\n        Q = Q,\n        A = A,\n        h1 = h1\n    )\n    display(HTML(_str))\n\n\nJM(html_str,title,url,Q,A,h1)\n\n\n\n\n중요한건 꺽이지 않는 마음\n\n \n \n Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\n A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n중요한 것은 꺾이지 않는  마음 \n\n\n\n이러한 코드들의 비판\n- 변수들이 정리가 되어있지 않고 산만함"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-08-Extra 00. 밈.html#단계-밈놀이-클래스",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-08-Extra 00. 밈.html#단계-밈놀이-클래스",
    "title": "Extra 00. 밈",
    "section": "4단계 밈놀이 (클래스)",
    "text": "4단계 밈놀이 (클래스)\n- 클래스 선언 : 도화지 만들기\n\nclass jkm :\n     pass\n\n\ntest = jkm()\ntest\n\n&lt;__main__.jkm at 0x1c07fdfa2d0&gt;\n\n\n\n뼈대 생성\n\ntest.title = \"중요한건 꺽이지 않는 마음\"\n\ntest.url = \"https://github.com/guebin/PP2023/blob/main/posts/03_Class/JungGGuckMa.jpg?raw=true\"\n\ntest.Q = \"Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\"\n\ntest.A = \"A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\"\n\ntest.h1 = \"마음\"\n\ntest.html_str =  '''\n&lt;style&gt;\n    .title {{\n        font-family: \"Times New Roman\", serif;\n        font-size: 30px;\n        font-weight: 900;\n    }}\n    .text {{\n        font-family: \"Arial\", sans-serif;\n        font-size: 20px;\n        font-style: italic;\n    }}\n    .highlight {{\n        font-family: \"Montserrat\", monospace;\n        font-size: 35px;\n        font-weight: 900;\n        text-decoration: underline; ## 밑줄\n        font-style: normal;\n        color: darkblue;\n        background-color: #FFFF00;\n    }}\n&lt;/style&gt;\n\n&lt;p class=\"title\"&gt;{tt1}&lt;/p&gt;\n&lt;img src={url} width=\"600\"&gt;\n&lt;p&gt; \\n &lt;/p&gt;\n&lt;p class=\"text\"&gt; {Q}&lt;/p&gt;\n&lt;p class=\"text\"&gt; {A}: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n&lt;p class=\"title\"&gt;중요한 것은 꺾이지 않는 &lt;span class=\"highlight\"&gt; {h1} &lt;/span&gt;&lt;/p&gt;\n'''\n\n\n\nshow 함수선언\n\ndef show(test):\n    _str = test.html_str.format(\n        tt1 = test.title,\n        url = test.url,\n        Q = test.Q,\n        A = test.A,\n        h1 = test.h1\n    )\n    display(HTML(_str))\n\n\nshow(test)\n\n\n\n\n중요한건 꺽이지 않는 마음\n\n \n \n Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\n A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n중요한 것은 꺾이지 않는  마음"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-10-Extra 02. 클래스 탐구 (1).html",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-10-Extra 02. 클래스 탐구 (1).html",
    "title": "Extra 02. 클래스 탐구 (1)",
    "section": "",
    "text": "from IPython.core.display import HTML\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\n\n\nclass jkm:\n    def __init__(self) :\n        self.title = \"중요한건 꺽이지 않는 마음\"\n\n        self.url = \"https://github.com/guebin/PP2023/blob/main/posts/03_Class/JungGGuckMa.jpg?raw=true\"\n\n        self.Q = \"Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\"\n\n        self.A = \"A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\"\n\n        self.h1 = \"마음\"\n\n        self.html_str =  '''\n                    &lt;style&gt;\n                        .title {{\n                            font-family: \"Times New Roman\", serif;\n                            font-size: 30px;\n                            font-weight: 900;\n                        }}\n                        .text {{\n                            font-family: \"Arial\", sans-serif;\n                            font-size: 20px;\n                            font-style: italic;\n                        }}\n                        .highlight {{\n                            font-family: \"Montserrat\", monospace;\n                            font-size: 35px;\n                            font-weight: 900;\n                            text-decoration: underline; ## 밑줄\n                            font-style: normal;\n                            color: darkblue;\n                            background-color: #FFFF00;\n                        }}\n                    &lt;/style&gt;\n\n                    &lt;p class=\"title\"&gt;{tt1}&lt;/p&gt;\n                    &lt;img src={url} width=\"600\"&gt;\n                    &lt;p&gt; \\n &lt;/p&gt;\n                    &lt;p class=\"text\"&gt; {Q}&lt;/p&gt;\n                    &lt;p class=\"text\"&gt; {A}: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n                    &lt;p class=\"title\"&gt;중요한 것은 꺾이지 않는 &lt;span class=\"highlight\"&gt; {h1} &lt;/span&gt;&lt;/p&gt;\n                    '''\n        \n    def show(self):\n        _str = self.html_str.format(\n            tt1 = self.title,\n            url = self.url,\n            Q = self.Q,\n            A = self.A,\n            h1 = self.h1 )\n        display(HTML(_str))\n\n\ntest = jkm()\n\n\ntest.show()\n\n\n                    \n\n                    중요한건 꺽이지 않는 마음\n                    \n                     \n \n                     Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\n                     A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n                    중요한 것은 꺾이지 않는  마음 \n                    \n\n\n\n\n\n- 아래처럼 우리가 생성한 test의 타입을 확인하니 type 이 jkm 으로 나온다.\n\ntest?\n\n\nType:        jkm\nString form: &lt;__main__.jkm object at 0x000001E17B1E7850&gt;\nDocstring:   &lt;no docstring&gt;\n\n\n\n- 아래의 리스트, 튜플, 리스트(튜플)의 타입을 확인해보자.\n\ntype([1,2,3])\n\nlist\n\n\n\ntype((1,2,3))\n\ntuple\n\n\n\ntype(list((1,2,3)))\n\nlist\n\n\n- 깨달음1. 우리가 어떤 인스턴스 객체를 생성할 떄 그 자료형은 파이썬 내부, 혹은 우리가 작성한 클래스의 이름이다.\n\n\n\n\na = \"123\"\nlist(a)\n\n['1', '2', '3']\n\n\n\na = list()\n\na.__init__(\"123\")\na\n\n['1', '2', '3']\n\n\n\na = list()\na.__init__('123') \na.__init__() # 리스트 최기화\na\n\n[]\n\n\n- 깨달음 2. 우리가 list(\"123\") 과 같은 메소드를 입력할 때 사실 자료형을 변환하는 것이 아니라, list 라는 클래스의 __init__()으로 인스턴스를 생성하는 것이었다.\n\n\n\n- 아래의 클래스를 관찰하자\n\nclass UpJump:\n    def __init__(self):\n        self.reset()\n    def up(self):\n        self.a = self.a + 1  \n        print(\"a의 값이 1 증가합니다.\")\n    def jump(self,jump_size):\n        self.a = self.a + jump_size      \n        print(\"a의 값이 {} 증가합니다.\".format(jump_size))\n    def show(self):\n        print('a={}'.format(self.a))\n    def reset(self):\n        self.a = 0\n        print(\"a의 값이 0으로 초기화 되었습니다.\")\n\n\na = UpJump()\n\na의 값이 0으로 초기화 되었습니다.\n\n\n\na?\n\n\nType:        UpJump\nString form: &lt;__main__.UpJump object at 0x000001E17A4FE650&gt;\nDocstring:   &lt;no docstring&gt;\n\n\n\n\na.up()\n\na의 값이 1 증가합니다.\n\n\n\na.jump(-2)\n\na의 값이 -2 증가합니다.\n\n\n\na.reset()\n\na의 값이 0으로 초기화 되었습니다.\n\n\n\na.show()\n\na=0\n\n\n- show 함수를 살펴보자.\n\nshow 함수는 print와 비슷하다 \\(\\to\\) 그렇다면….?\nprint(a)를 하면 a.show() 와 동일한 효과를 내도록 만들 수 있을까?\n\n\nprint(a)\n\n&lt;__main__.UpJump object at 0x000001E17A4FE650&gt;\n\n\n\nprint는 파이썬의 내장기능이다. 내장기능을 우리가 마음대로 변환해서 사용하면 많은 문제들이 생긴다.\n\n\\(\\divideontimes\\) 그런데 a의 자료형에 해당하는 인스턴스들에 한정하여 print를 수정하는 방법이 있다면?\n\n즉, 다른 클래스 오브젝트들은 영향을 받지 않고, UpJump로 생성된 오브젝트들만 가능하게끔 하는 것이다.\n\n\n\n- 아래둘은 같은 역할을 한다. \\(\\to\\) 즉, print(“a”)는 print(\"a\".__str__())의 축약 버전이다.\n\n print(\"a\")\n\na\n\n\n\nprint(\"a\".__str__())\n\na\n\n\n- 우리가 정의한 show함수는 다음과 같다.\ndef show(self):\n        print('a={}'.format(self.a))\n- 즉, 작성한 show함수는 단지 print문을 호출하는 함수이므로, a.__str__()의 기능을 재정의하면? print(a)의 결과도 바뀌지 않을까?\n\n\n\n\ndef f():\n    print(\"강철\")\n    \nf()\n\n강철\n\n\n\ndef f() :\n    print(\"DX 강철\")\nf()\n\nDX 강철\n\n\n- 함수를 덮어씌울 수 있다는 것을 확인하였다.\n\n\n\n\ndef show() \\(\\to\\) def __str__(), print \\(\\to\\) return\n\n\nclass UpJump:\n    def __init__(self):\n        self.reset()\n    def up(self):\n        self.a = self.a + 1  \n        print(\"a의 값이 1 증가합니다.\")\n    def jump(self,jump_size):\n        self.a = self.a + jump_size      \n        print(\"a의 값이 {} 증가합니다.\".format(jump_size))\n    def __str__(self):\n        return 'a={}'.format(self.a)\n    def reset(self):\n        self.a = 0\n        print(\"a의 값이 0으로 초기화 되었습니다.\")\n\n\na = UpJump()\n\na의 값이 0으로 초기화 되었습니다.\n\n\n\na.__str__()\n\n'a=0'\n\n\n\nprint(a) ## 성공했다!!\n\na=0\n\n\n\n\n\n\n- 우리가 어떤 변수를 할당하고 실행할때 사용되는 내장 함수는 __repr__() \\(\\to\\) representation의 약자이다.\n- 그러면 __repr__도 우리가 정의할 수 있지 않을까?\n- __str()__ 과 비교해보자.\n\na = np.arange(4).reshape(2,2)\n\n\na.__str__()\n\n'[[0 1]\\n [2 3]]'\n\n\n\na.__repr__()\n\n'array([[0, 1],\\n       [2, 3]])'\n\n\n- print 문을 사용한 비교.\n\nprint(a.__str__())\n\n[[0 1]\n [2 3]]\n\n\n\nprint(a.__repr__())\n\narray([[0, 1],\n       [2, 3]])\n\n\n\n\ndef __repr__(self):\n    return 'a={}'.format(self.a)\n\nclass UpJump:\n    def __init__(self):\n        self.reset()\n    def up(self):\n        self.a = self.a + 1  \n        print(\"a의 값이 1 증가합니다.\")\n    def jump(self,jump_size):\n        self.a = self.a + jump_size      \n        print(\"a의 값이 {} 증가합니다.\".format(jump_size))\n    def __str__(self):\n        return 'a의 값은 {}입니다.'.format(self.a)\n    def reset(self):\n        self.a = 0\n        print(\"a의 값이 0으로 초기화 되었습니다.\")\n    def __repr__(self):\n        return 'a={}'.format(self.a)  \n\n\na = UpJump()\n\na의 값이 0으로 초기화 되었습니다.\n\n\n\nprint(a)\n\na의 값은 0입니다.\n\n\n\na\n\na=0\n\n\n\n\n\n- 만약 __repr__()만 정의되어 있고 __str__()이 정의되있지 않았다면 __repr__()의 내용이 __str__()의 내용을 대신한다. (단, 역은 성립하지 않음)\n\nclass UpJump:\n    def __init__(self):\n        self.reset()\n    def up(self):\n        self.a = self.a + 1  \n        print(\"a의 값이 1 증가합니다.\")\n    def jump(self,jump_size):\n        self.a = self.a + jump_size      \n        print(\"a의 값이 {} 증가합니다.\".format(jump_size))\n   # def __str__(self):\n    #    return 'a의 값은 {}입니다.'.format(self.a)\n    def reset(self):\n        self.a = 0\n        print(\"a의 값이 0으로 초기화 되었습니다.\")\n    def __repr__(self):\n        return 'a={}'.format(self.a)  \n\n\na = UpJump()\n\na의 값이 0으로 초기화 되었습니다.\n\n\n\na\n\na=0\n\n\n\nclass UpJump:\n    def __init__(self):\n        self.reset()\n    def up(self):\n        self.a = self.a + 1  \n        print(\"a의 값이 1 증가합니다.\")\n    def jump(self,jump_size):\n        self.a = self.a + jump_size      \n        print(\"a의 값이 {} 증가합니다.\".format(jump_size))\n    def __str__(self):\n        return 'a의 값은 {}입니다.'.format(self.a)\n    def reset(self):\n        self.a = 0\n        print(\"a의 값이 0으로 초기화 되었습니다.\")\n   # def __repr__(self):\n    #    return 'a={}'.format(self.a)  \n\n\na = UpJump()\n\na의 값이 0으로 초기화 되었습니다.\n\n\n\na\n\n&lt;__main__.UpJump at 0x1e17b574090&gt;\n\n\n\n\n\n\n\n\n\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\ndf\n\n\n\n\n\n\n\n\na\nb\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n\n\n\n\n\n\nprint(df.__repr__())\n\n   a  b\n0  1  2\n1  2  3\n2  3  4\n\n\n\nprint(df.__str__())\n\n   a  b\n0  1  2\n1  2  3\n2  3  4\n\n\n- 뭔가 이상하다. 앞서 배운대로라면 코드를 실행할 때 나오는 표처럼 예쁘게 나와야 하는데 그렇지 않다…\n- 아래를 살펴보자.\n\ndf._repr_html_()\n\n'&lt;div&gt;\\n&lt;style scoped&gt;\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n&lt;/style&gt;\\n&lt;table border=\"1\" class=\"dataframe\"&gt;\\n  &lt;thead&gt;\\n    &lt;tr style=\"text-align: right;\"&gt;\\n      &lt;th&gt;&lt;/th&gt;\\n      &lt;th&gt;a&lt;/th&gt;\\n      &lt;th&gt;b&lt;/th&gt;\\n    &lt;/tr&gt;\\n  &lt;/thead&gt;\\n  &lt;tbody&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;0&lt;/th&gt;\\n      &lt;td&gt;1&lt;/td&gt;\\n      &lt;td&gt;2&lt;/td&gt;\\n    &lt;/tr&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;1&lt;/th&gt;\\n      &lt;td&gt;2&lt;/td&gt;\\n      &lt;td&gt;3&lt;/td&gt;\\n    &lt;/tr&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;2&lt;/th&gt;\\n      &lt;td&gt;3&lt;/td&gt;\\n      &lt;td&gt;4&lt;/td&gt;\\n    &lt;/tr&gt;\\n  &lt;/tbody&gt;\\n&lt;/table&gt;\\n&lt;/div&gt;'\n\n\n\nHTML(df._repr_html_())\n\n\n\n\n\n\n\n\na\nb\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n\n\n\n\n\n- 깨달음5. 데이터 프레임은 html로 작성되어 있으며 _repr_html_()은 html 구조를 확인할 수 있는 명령어이다!!\n- 그러면 df.__repr__()의 역할은?\n\n아 우리가 대화형 콘솔(anaconda prompt)에서 작성하면 나오는 출력형식을 지원한다!\n\n\n\n\n\n- 초기\ndef show(self):\n        _str = self.html_str.format(\n            tt1 = self.title,\n            url = self.url,\n            Q = self.Q,\n            A = self.A,\n            h1 = self.h1 )\n        display(HTML(_str))\n- 수정후\ndef _repr_html_(self):\n        _str = self.html_str.format(\n            tt1 = self.title,\n            url = self.url,\n            Q = self.Q,\n            A = self.A,\n            h1 = self.h1 )\n        return _str\n\nclass jkm:\n    def __init__(self) :\n        self.title = \"중요한건 꺽이지 않는 마음\"\n\n        self.url = \"https://github.com/guebin/PP2023/blob/main/posts/03_Class/JungGGuckMa.jpg?raw=true\"\n\n        self.Q = \"Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\"\n\n        self.A = \"A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\"\n\n        self.h1 = \"마음\"\n\n        self.html_str =  '''\n                    &lt;style&gt;\n                        .title {{\n                            font-family: \"Times New Roman\", serif;\n                            font-size: 30px;\n                            font-weight: 900;\n                        }}\n                        .text {{\n                            font-family: \"Arial\", sans-serif;\n                            font-size: 20px;\n                            font-style: italic;\n                        }}\n                        .highlight {{\n                            font-family: \"Montserrat\", monospace;\n                            font-size: 35px;\n                            font-weight: 900;\n                            text-decoration: underline; ## 밑줄\n                            font-style: normal;\n                            color: darkblue;\n                            background-color: #FFFF00;\n                        }}\n                    &lt;/style&gt;\n\n                    &lt;p class=\"title\"&gt;{tt1}&lt;/p&gt;\n                    &lt;img src={url} width=\"600\"&gt;\n                    &lt;p&gt; \\n &lt;/p&gt;\n                    &lt;p class=\"text\"&gt; {Q}&lt;/p&gt;\n                    &lt;p class=\"text\"&gt; {A}: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n                    &lt;p class=\"title\"&gt;중요한 것은 꺾이지 않는 &lt;span class=\"highlight\"&gt; {h1} &lt;/span&gt;&lt;/p&gt;\n                    '''\n        \n    def _repr_html_(self):\n                _str = self.html_str.format(\n                    tt1 = self.title,\n                    url = self.url,\n                    Q = self.Q,\n                    A = self.A,\n                    h1 = self.h1)\n                return _str\n\n\na = jkm()\na\n\n\n                    \n\n                    중요한건 꺽이지 않는 마음\n                    \n                     \n \n                     Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\n                     A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n                    중요한 것은 꺾이지 않는  마음"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-10-Extra 02. 클래스 탐구 (1).html#작성한-class-등록",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-10-Extra 02. 클래스 탐구 (1).html#작성한-class-등록",
    "title": "Extra 02. 클래스 탐구 (1)",
    "section": "",
    "text": "class jkm:\n    def __init__(self) :\n        self.title = \"중요한건 꺽이지 않는 마음\"\n\n        self.url = \"https://github.com/guebin/PP2023/blob/main/posts/03_Class/JungGGuckMa.jpg?raw=true\"\n\n        self.Q = \"Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\"\n\n        self.A = \"A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\"\n\n        self.h1 = \"마음\"\n\n        self.html_str =  '''\n                    &lt;style&gt;\n                        .title {{\n                            font-family: \"Times New Roman\", serif;\n                            font-size: 30px;\n                            font-weight: 900;\n                        }}\n                        .text {{\n                            font-family: \"Arial\", sans-serif;\n                            font-size: 20px;\n                            font-style: italic;\n                        }}\n                        .highlight {{\n                            font-family: \"Montserrat\", monospace;\n                            font-size: 35px;\n                            font-weight: 900;\n                            text-decoration: underline; ## 밑줄\n                            font-style: normal;\n                            color: darkblue;\n                            background-color: #FFFF00;\n                        }}\n                    &lt;/style&gt;\n\n                    &lt;p class=\"title\"&gt;{tt1}&lt;/p&gt;\n                    &lt;img src={url} width=\"600\"&gt;\n                    &lt;p&gt; \\n &lt;/p&gt;\n                    &lt;p class=\"text\"&gt; {Q}&lt;/p&gt;\n                    &lt;p class=\"text\"&gt; {A}: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n                    &lt;p class=\"title\"&gt;중요한 것은 꺾이지 않는 &lt;span class=\"highlight\"&gt; {h1} &lt;/span&gt;&lt;/p&gt;\n                    '''\n        \n    def show(self):\n        _str = self.html_str.format(\n            tt1 = self.title,\n            url = self.url,\n            Q = self.Q,\n            A = self.A,\n            h1 = self.h1 )\n        display(HTML(_str))\n\n\ntest = jkm()\n\n\ntest.show()\n\n\n                    \n\n                    중요한건 꺽이지 않는 마음\n                    \n                     \n \n                     Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\n                     A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n                    중요한 것은 꺾이지 않는  마음"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-10-Extra 02. 클래스 탐구 (1).html#깨달음-1.-type-class",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-10-Extra 02. 클래스 탐구 (1).html#깨달음-1.-type-class",
    "title": "Extra 02. 클래스 탐구 (1)",
    "section": "",
    "text": "- 아래처럼 우리가 생성한 test의 타입을 확인하니 type 이 jkm 으로 나온다.\n\ntest?\n\n\nType:        jkm\nString form: &lt;__main__.jkm object at 0x000001E17B1E7850&gt;\nDocstring:   &lt;no docstring&gt;\n\n\n\n- 아래의 리스트, 튜플, 리스트(튜플)의 타입을 확인해보자.\n\ntype([1,2,3])\n\nlist\n\n\n\ntype((1,2,3))\n\ntuple\n\n\n\ntype(list((1,2,3)))\n\nlist\n\n\n- 깨달음1. 우리가 어떤 인스턴스 객체를 생성할 떄 그 자료형은 파이썬 내부, 혹은 우리가 작성한 클래스의 이름이다."
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-10-Extra 02. 클래스 탐구 (1).html#깨달음-2.-__init__",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-10-Extra 02. 클래스 탐구 (1).html#깨달음-2.-__init__",
    "title": "Extra 02. 클래스 탐구 (1)",
    "section": "",
    "text": "a = \"123\"\nlist(a)\n\n['1', '2', '3']\n\n\n\na = list()\n\na.__init__(\"123\")\na\n\n['1', '2', '3']\n\n\n\na = list()\na.__init__('123') \na.__init__() # 리스트 최기화\na\n\n[]\n\n\n- 깨달음 2. 우리가 list(\"123\") 과 같은 메소드를 입력할 때 사실 자료형을 변환하는 것이 아니라, list 라는 클래스의 __init__()으로 인스턴스를 생성하는 것이었다."
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-10-Extra 02. 클래스 탐구 (1).html#깨달음-3.-__str__",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-10-Extra 02. 클래스 탐구 (1).html#깨달음-3.-__str__",
    "title": "Extra 02. 클래스 탐구 (1)",
    "section": "",
    "text": "- 아래의 클래스를 관찰하자\n\nclass UpJump:\n    def __init__(self):\n        self.reset()\n    def up(self):\n        self.a = self.a + 1  \n        print(\"a의 값이 1 증가합니다.\")\n    def jump(self,jump_size):\n        self.a = self.a + jump_size      \n        print(\"a의 값이 {} 증가합니다.\".format(jump_size))\n    def show(self):\n        print('a={}'.format(self.a))\n    def reset(self):\n        self.a = 0\n        print(\"a의 값이 0으로 초기화 되었습니다.\")\n\n\na = UpJump()\n\na의 값이 0으로 초기화 되었습니다.\n\n\n\na?\n\n\nType:        UpJump\nString form: &lt;__main__.UpJump object at 0x000001E17A4FE650&gt;\nDocstring:   &lt;no docstring&gt;\n\n\n\n\na.up()\n\na의 값이 1 증가합니다.\n\n\n\na.jump(-2)\n\na의 값이 -2 증가합니다.\n\n\n\na.reset()\n\na의 값이 0으로 초기화 되었습니다.\n\n\n\na.show()\n\na=0\n\n\n- show 함수를 살펴보자.\n\nshow 함수는 print와 비슷하다 \\(\\to\\) 그렇다면….?\nprint(a)를 하면 a.show() 와 동일한 효과를 내도록 만들 수 있을까?\n\n\nprint(a)\n\n&lt;__main__.UpJump object at 0x000001E17A4FE650&gt;\n\n\n\nprint는 파이썬의 내장기능이다. 내장기능을 우리가 마음대로 변환해서 사용하면 많은 문제들이 생긴다.\n\n\\(\\divideontimes\\) 그런데 a의 자료형에 해당하는 인스턴스들에 한정하여 print를 수정하는 방법이 있다면?\n\n즉, 다른 클래스 오브젝트들은 영향을 받지 않고, UpJump로 생성된 오브젝트들만 가능하게끔 하는 것이다.\n\n\n\n- 아래둘은 같은 역할을 한다. \\(\\to\\) 즉, print(“a”)는 print(\"a\".__str__())의 축약 버전이다.\n\n print(\"a\")\n\na\n\n\n\nprint(\"a\".__str__())\n\na\n\n\n- 우리가 정의한 show함수는 다음과 같다.\ndef show(self):\n        print('a={}'.format(self.a))\n- 즉, 작성한 show함수는 단지 print문을 호출하는 함수이므로, a.__str__()의 기능을 재정의하면? print(a)의 결과도 바뀌지 않을까?\n\n\n\n\ndef f():\n    print(\"강철\")\n    \nf()\n\n강철\n\n\n\ndef f() :\n    print(\"DX 강철\")\nf()\n\nDX 강철\n\n\n- 함수를 덮어씌울 수 있다는 것을 확인하였다.\n\n\n\n\ndef show() \\(\\to\\) def __str__(), print \\(\\to\\) return\n\n\nclass UpJump:\n    def __init__(self):\n        self.reset()\n    def up(self):\n        self.a = self.a + 1  \n        print(\"a의 값이 1 증가합니다.\")\n    def jump(self,jump_size):\n        self.a = self.a + jump_size      \n        print(\"a의 값이 {} 증가합니다.\".format(jump_size))\n    def __str__(self):\n        return 'a={}'.format(self.a)\n    def reset(self):\n        self.a = 0\n        print(\"a의 값이 0으로 초기화 되었습니다.\")\n\n\na = UpJump()\n\na의 값이 0으로 초기화 되었습니다.\n\n\n\na.__str__()\n\n'a=0'\n\n\n\nprint(a) ## 성공했다!!\n\na=0"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-10-Extra 02. 클래스 탐구 (1).html#깨달음-4.-__repr__",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-10-Extra 02. 클래스 탐구 (1).html#깨달음-4.-__repr__",
    "title": "Extra 02. 클래스 탐구 (1)",
    "section": "",
    "text": "- 우리가 어떤 변수를 할당하고 실행할때 사용되는 내장 함수는 __repr__() \\(\\to\\) representation의 약자이다.\n- 그러면 __repr__도 우리가 정의할 수 있지 않을까?\n- __str()__ 과 비교해보자.\n\na = np.arange(4).reshape(2,2)\n\n\na.__str__()\n\n'[[0 1]\\n [2 3]]'\n\n\n\na.__repr__()\n\n'array([[0, 1],\\n       [2, 3]])'\n\n\n- print 문을 사용한 비교.\n\nprint(a.__str__())\n\n[[0 1]\n [2 3]]\n\n\n\nprint(a.__repr__())\n\narray([[0, 1],\n       [2, 3]])\n\n\n\n\ndef __repr__(self):\n    return 'a={}'.format(self.a)\n\nclass UpJump:\n    def __init__(self):\n        self.reset()\n    def up(self):\n        self.a = self.a + 1  \n        print(\"a의 값이 1 증가합니다.\")\n    def jump(self,jump_size):\n        self.a = self.a + jump_size      \n        print(\"a의 값이 {} 증가합니다.\".format(jump_size))\n    def __str__(self):\n        return 'a의 값은 {}입니다.'.format(self.a)\n    def reset(self):\n        self.a = 0\n        print(\"a의 값이 0으로 초기화 되었습니다.\")\n    def __repr__(self):\n        return 'a={}'.format(self.a)  \n\n\na = UpJump()\n\na의 값이 0으로 초기화 되었습니다.\n\n\n\nprint(a)\n\na의 값은 0입니다.\n\n\n\na\n\na=0\n\n\n\n\n\n- 만약 __repr__()만 정의되어 있고 __str__()이 정의되있지 않았다면 __repr__()의 내용이 __str__()의 내용을 대신한다. (단, 역은 성립하지 않음)\n\nclass UpJump:\n    def __init__(self):\n        self.reset()\n    def up(self):\n        self.a = self.a + 1  \n        print(\"a의 값이 1 증가합니다.\")\n    def jump(self,jump_size):\n        self.a = self.a + jump_size      \n        print(\"a의 값이 {} 증가합니다.\".format(jump_size))\n   # def __str__(self):\n    #    return 'a의 값은 {}입니다.'.format(self.a)\n    def reset(self):\n        self.a = 0\n        print(\"a의 값이 0으로 초기화 되었습니다.\")\n    def __repr__(self):\n        return 'a={}'.format(self.a)  \n\n\na = UpJump()\n\na의 값이 0으로 초기화 되었습니다.\n\n\n\na\n\na=0\n\n\n\nclass UpJump:\n    def __init__(self):\n        self.reset()\n    def up(self):\n        self.a = self.a + 1  \n        print(\"a의 값이 1 증가합니다.\")\n    def jump(self,jump_size):\n        self.a = self.a + jump_size      \n        print(\"a의 값이 {} 증가합니다.\".format(jump_size))\n    def __str__(self):\n        return 'a의 값은 {}입니다.'.format(self.a)\n    def reset(self):\n        self.a = 0\n        print(\"a의 값이 0으로 초기화 되었습니다.\")\n   # def __repr__(self):\n    #    return 'a={}'.format(self.a)  \n\n\na = UpJump()\n\na의 값이 0으로 초기화 되었습니다.\n\n\n\na\n\n&lt;__main__.UpJump at 0x1e17b574090&gt;"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-10-Extra 02. 클래스 탐구 (1).html#깨달음-5.-_repr_html_",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-10-Extra 02. 클래스 탐구 (1).html#깨달음-5.-_repr_html_",
    "title": "Extra 02. 클래스 탐구 (1)",
    "section": "",
    "text": "df = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\ndf\n\n\n\n\n\n\n\n\na\nb\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n\n\n\n\n\n\nprint(df.__repr__())\n\n   a  b\n0  1  2\n1  2  3\n2  3  4\n\n\n\nprint(df.__str__())\n\n   a  b\n0  1  2\n1  2  3\n2  3  4\n\n\n- 뭔가 이상하다. 앞서 배운대로라면 코드를 실행할 때 나오는 표처럼 예쁘게 나와야 하는데 그렇지 않다…\n- 아래를 살펴보자.\n\ndf._repr_html_()\n\n'&lt;div&gt;\\n&lt;style scoped&gt;\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n&lt;/style&gt;\\n&lt;table border=\"1\" class=\"dataframe\"&gt;\\n  &lt;thead&gt;\\n    &lt;tr style=\"text-align: right;\"&gt;\\n      &lt;th&gt;&lt;/th&gt;\\n      &lt;th&gt;a&lt;/th&gt;\\n      &lt;th&gt;b&lt;/th&gt;\\n    &lt;/tr&gt;\\n  &lt;/thead&gt;\\n  &lt;tbody&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;0&lt;/th&gt;\\n      &lt;td&gt;1&lt;/td&gt;\\n      &lt;td&gt;2&lt;/td&gt;\\n    &lt;/tr&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;1&lt;/th&gt;\\n      &lt;td&gt;2&lt;/td&gt;\\n      &lt;td&gt;3&lt;/td&gt;\\n    &lt;/tr&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;2&lt;/th&gt;\\n      &lt;td&gt;3&lt;/td&gt;\\n      &lt;td&gt;4&lt;/td&gt;\\n    &lt;/tr&gt;\\n  &lt;/tbody&gt;\\n&lt;/table&gt;\\n&lt;/div&gt;'\n\n\n\nHTML(df._repr_html_())\n\n\n\n\n\n\n\n\na\nb\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n\n\n\n\n\n- 깨달음5. 데이터 프레임은 html로 작성되어 있으며 _repr_html_()은 html 구조를 확인할 수 있는 명령어이다!!\n- 그러면 df.__repr__()의 역할은?\n\n아 우리가 대화형 콘솔(anaconda prompt)에서 작성하면 나오는 출력형식을 지원한다!\n\n\n\n\n\n- 초기\ndef show(self):\n        _str = self.html_str.format(\n            tt1 = self.title,\n            url = self.url,\n            Q = self.Q,\n            A = self.A,\n            h1 = self.h1 )\n        display(HTML(_str))\n- 수정후\ndef _repr_html_(self):\n        _str = self.html_str.format(\n            tt1 = self.title,\n            url = self.url,\n            Q = self.Q,\n            A = self.A,\n            h1 = self.h1 )\n        return _str\n\nclass jkm:\n    def __init__(self) :\n        self.title = \"중요한건 꺽이지 않는 마음\"\n\n        self.url = \"https://github.com/guebin/PP2023/blob/main/posts/03_Class/JungGGuckMa.jpg?raw=true\"\n\n        self.Q = \"Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\"\n\n        self.A = \"A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\"\n\n        self.h1 = \"마음\"\n\n        self.html_str =  '''\n                    &lt;style&gt;\n                        .title {{\n                            font-family: \"Times New Roman\", serif;\n                            font-size: 30px;\n                            font-weight: 900;\n                        }}\n                        .text {{\n                            font-family: \"Arial\", sans-serif;\n                            font-size: 20px;\n                            font-style: italic;\n                        }}\n                        .highlight {{\n                            font-family: \"Montserrat\", monospace;\n                            font-size: 35px;\n                            font-weight: 900;\n                            text-decoration: underline; ## 밑줄\n                            font-style: normal;\n                            color: darkblue;\n                            background-color: #FFFF00;\n                        }}\n                    &lt;/style&gt;\n\n                    &lt;p class=\"title\"&gt;{tt1}&lt;/p&gt;\n                    &lt;img src={url} width=\"600\"&gt;\n                    &lt;p&gt; \\n &lt;/p&gt;\n                    &lt;p class=\"text\"&gt; {Q}&lt;/p&gt;\n                    &lt;p class=\"text\"&gt; {A}: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n                    &lt;p class=\"title\"&gt;중요한 것은 꺾이지 않는 &lt;span class=\"highlight\"&gt; {h1} &lt;/span&gt;&lt;/p&gt;\n                    '''\n        \n    def _repr_html_(self):\n                _str = self.html_str.format(\n                    tt1 = self.title,\n                    url = self.url,\n                    Q = self.Q,\n                    A = self.A,\n                    h1 = self.h1)\n                return _str\n\n\na = jkm()\na\n\n\n                    \n\n                    중요한건 꺽이지 않는 마음\n                    \n                     \n \n                     Q: 로그와 2라운드 재대결, 어떤 점에 유의해야 할까\n                     A: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.: 상대팀에 대해서 더 분석할 건 없는 것 같고, 저희가 저희 플레이 잘하는 게 제일 중요한 것 같고 오늘 지긴 했지만 저희끼리만 안 무너지면 충분히 이길 수 있을 것 같아요.\n                    중요한 것은 꺾이지 않는  마음"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-15-Extra 04. 클래스 탐구 (3).html",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-15-Extra 04. 클래스 탐구 (3).html",
    "title": "Extra 04. 클래스 탐구 (3)",
    "section": "",
    "text": "- 클래스를 조금 수정하고 싶을때, 아래와 같은 문법을 이용하면 편리하다.(지난 챕터 복기!!)\nclass 새로운클래스 (수정할 클래스) :\n    def 수정 및 추가 함수 : \n        return ...\n\n\n\nclass a1 :\n    def __init__(self,v) :\n        ## 여기는 a1클래스\n        print(\"init 클래스에서 정의된 __init__을 실행합니다.\")\n        self.v = v\n\n\nclass a2 (a1):\n    def show(self) :\n        ## 여기는 a2클래스\n        print(\"a2 클래스에서 정의한 show를 실행합니다.\")\n        print(f\"value = {self.v}\")\n\n\na = a2(5)\n\ninit 클래스에서 정의된 __init__을 실행합니다.\n\n\n\na.show()\n\na2 클래스에서 정의한 show를 실행합니다.\nvalue = 5\n\n\n\na.show??\n\n\nSignature: a.show()\nDocstring: &lt;no docstring&gt;\nSource:   \n    def show(self) :\n        ## 여기는 a2클래스\n        print(\"a2 클래스에서 정의한 show를 실행합니다.\")\n        print(f\"value = {self.v}\")\nFile:      c:\\users\\user\\appdata\\local\\temp\\ipykernel_15308\\1064789111.py\nType:      method\n\n\n\n\na.__init__??\n\n\nSignature: a.__init__(v)\nDocstring: Initialize self.  See help(type(self)) for accurate signature.\nSource:   \n    def __init__(self,v) :\n        ## 여기는 a1클래스\n        print(\"init 클래스에서 정의된 __init__을 실행합니다.\")\n        self.v = v\nFile:      c:\\users\\user\\appdata\\local\\temp\\ipykernel_15308\\3688838073.py\nType:      method"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-15-Extra 04. 클래스 탐구 (3).html#ex1",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-15-Extra 04. 클래스 탐구 (3).html#ex1",
    "title": "Extra 04. 클래스 탐구 (3)",
    "section": "",
    "text": "class a1 :\n    def __init__(self,v) :\n        ## 여기는 a1클래스\n        print(\"init 클래스에서 정의된 __init__을 실행합니다.\")\n        self.v = v\n\n\nclass a2 (a1):\n    def show(self) :\n        ## 여기는 a2클래스\n        print(\"a2 클래스에서 정의한 show를 실행합니다.\")\n        print(f\"value = {self.v}\")\n\n\na = a2(5)\n\ninit 클래스에서 정의된 __init__을 실행합니다.\n\n\n\na.show()\n\na2 클래스에서 정의한 show를 실행합니다.\nvalue = 5\n\n\n\na.show??\n\n\nSignature: a.show()\nDocstring: &lt;no docstring&gt;\nSource:   \n    def show(self) :\n        ## 여기는 a2클래스\n        print(\"a2 클래스에서 정의한 show를 실행합니다.\")\n        print(f\"value = {self.v}\")\nFile:      c:\\users\\user\\appdata\\local\\temp\\ipykernel_15308\\1064789111.py\nType:      method\n\n\n\n\na.__init__??\n\n\nSignature: a.__init__(v)\nDocstring: Initialize self.  See help(type(self)) for accurate signature.\nSource:   \n    def __init__(self,v) :\n        ## 여기는 a1클래스\n        print(\"init 클래스에서 정의된 __init__을 실행합니다.\")\n        self.v = v\nFile:      c:\\users\\user\\appdata\\local\\temp\\ipykernel_15308\\3688838073.py\nType:      method"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-15-Extra 04. 클래스 탐구 (3).html#수퍼클래스",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-15-Extra 04. 클래스 탐구 (3).html#수퍼클래스",
    "title": "Extra 04. 클래스 탐구 (3)",
    "section": "수퍼클래스",
    "text": "수퍼클래스\n\n방법 1 : 직접 수퍼클래스 명시\n\nclass a3(a2) :\n    def __init__(self,v) :\n        ## a3클래스 명시\n        print(\"짠~!\")\n        a2.__init__(self,v)\n        print(\"짠짠~!!\")\n\n\ndeco = a3(5)\n\n짠~!\ninit 클래스에서 정의된 __init__을 실행합니다.\n짠짠~!!\n\n\n\ndeco.show??\n\n\nSignature: deco.show()\nDocstring: &lt;no docstring&gt;\nSource:   \n    def show(self) :\n        ## 여기는 a2클래스\n        print(\"a2 클래스에서 정의한 show를 실행합니다.\")\n        print(f\"value = {self.v}\")\nFile:      c:\\users\\user\\appdata\\local\\temp\\ipykernel_15308\\1064789111.py\nType:      method\n\n\n\n\ndeco.__init__??\n\n\nSignature: deco.__init__(v)\nDocstring: Initialize self.  See help(type(self)) for accurate signature.\nSource:   \n    def __init__(self,v) :\n        ## a3클래스 명시\n        print(\"짠~!\")\n        a2.__init__(self,v)\n        print(\"짠짠~!!\")\nFile:      c:\\users\\user\\appdata\\local\\temp\\ipykernel_15308\\1708323518.py\nType:      method\n\n\n\n\n\n방법 2 : super 이용, 생략 x)\n\nclass a3(a2) :\n    def __init__(self,v) :\n        ## a3클래스 명시\n        print(\"짠~!\")\n        super(a3,self).__init__(v)\n        print(\"짠짠~!!\")\n\n\na = a3(5)\n\n짠~!\ninit 클래스에서 정의된 __init__을 실행합니다.\n짠짠~!!\n\n\n\na.show??\n\n\nSignature: a.show()\nDocstring: &lt;no docstring&gt;\nSource:   \n    def show(self) :\n        ## 여기는 a2클래스\n        print(\"a2 클래스에서 정의한 show를 실행합니다.\")\n        print(f\"value = {self.v}\")\nFile:      c:\\users\\user\\appdata\\local\\temp\\ipykernel_15308\\1064789111.py\nType:      method\n\n\n\n\na.__init__??\n\n\nSignature: a.__init__(v)\nDocstring: Initialize self.  See help(type(self)) for accurate signature.\nSource:   \n    def __init__(self,v) :\n        ## a3클래스 명시\n        print(\"짠~!\")\n        super(a3,self).__init__(v)\n        print(\"짠짠~!!\")\nFile:      c:\\users\\user\\appdata\\local\\temp\\ipykernel_15308\\2997847713.py\nType:      method\n\n\n\n\n\n방법 3 : super 이용, 생략 o) (\\(\\star\\star\\star\\))\n\nclass a3(a2) :\n    def __init__(self,v) :\n        ## a3클래스 명시\n        print(\"짠~!\")\n        super().__init__(v)  ## 생략전 -&gt; super(a3,self).__init__(v)\n        print(\"짠짠~!!\")\n\n\na = a3(5)\n\n짠~!\ninit 클래스에서 정의된 __init__을 실행합니다.\n짠짠~!!\n\n\n\na3.show??\n\n\nSignature: a3.show(self)\nDocstring: &lt;no docstring&gt;\nSource:   \n    def show(self) :\n        ## 여기는 a2클래스\n        print(\"a2 클래스에서 정의한 show를 실행합니다.\")\n        print(f\"value = {self.v}\")\nFile:      c:\\users\\user\\appdata\\local\\temp\\ipykernel_15308\\1064789111.py\nType:      function\n\n\n\n\na3.__init__??\n\n\nSignature: a3.__init__(self, v)\nDocstring: Initialize self.  See help(type(self)) for accurate signature.\nSource:   \n    def __init__(self,v) :\n        ## a3클래스 명시\n        print(\"짠~!\")\n        super().__init__(v)  ## 생략전 -&gt; super(a3,self).__init__(v)\n        print(\"짠짠~!!\")\nFile:      c:\\users\\user\\appdata\\local\\temp\\ipykernel_15308\\2474030909.py\nType:      function\n\n\n\n\n\n방법 4 : super()이용, 방법 3을 이해하기위한 코드\n\nclass a4(a2) :\n    def __init__(self,v) :\n        ## a4클래스 \n        print(\"짠~!\")\n        super(__class__,self).__init__(v)  ## 생략전 -&gt; super(a3,self).__init__(v)\n        print(\"짠짠~!!\")\n\n\na = a4(5)\n\n짠~!\ninit 클래스에서 정의된 __init__을 실행합니다.\n짠짠~!!\n\n\n\na.show()\n\na2 클래스에서 정의한 show를 실행합니다.\nvalue = 5\n\n\n\na.show??\n\n\nSignature: a.show()\nDocstring: &lt;no docstring&gt;\nSource:   \n    def show(self) :\n        ## 여기는 a2클래스\n        print(\"a2 클래스에서 정의한 show를 실행합니다.\")\n        print(f\"value = {self.v}\")\nFile:      c:\\users\\user\\appdata\\local\\temp\\ipykernel_15308\\1064789111.py\nType:      method\n\n\n\n\na.__init__??\n\n\nSignature: a.__init__(v)\nDocstring: Initialize self.  See help(type(self)) for accurate signature.\nSource:   \n    def __init__(self,v) :\n        ## a4클래스 \n        print(\"짠~!\")\n        super(__class__,self).__init__(v)  ## 생략전 -&gt; super(a3,self).__init__(v)\n        print(\"짠짠~!!\")\nFile:      c:\\users\\user\\appdata\\local\\temp\\ipykernel_15308\\1093371131.py\nType:      method"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-15-Extra 04. 클래스 탐구 (3).html#다중상속-super-x",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-15-Extra 04. 클래스 탐구 (3).html#다중상속-super-x",
    "title": "Extra 04. 클래스 탐구 (3)",
    "section": "다중상속 (super X)",
    "text": "다중상속 (super X)\n\n일반적인 다중 상속\n- Add 클래스 선언\n\nclass Add:\n    def __init__(self,value):\n        self.value = value \n    def __add__(self,value2):\n        return self.value + value2\n\n- 초기화\n\na = Add(2)\n\n\na.value\n\n2\n\n\n\na + 5 \n\n7\n\n\n- Mul 클래스 선언\n\nclass Mul:\n    def __init__(self,value):\n        self.value = value \n    def __mul__(self,value2):\n        return self.value * value2\n\n\na = Mul(5)\n\n\na.value\n\n5\n\n\n- 더하기는 위에서 정의한적 없음\n\na+2\n\nTypeError: unsupported operand type(s) for +: 'Mul' and 'int'\n\n\n- 곱하기 수행\n\na*2\n\n10\n\n\n- 위 2개의 클래스를 상속\n\nclass am(Add,Mul) :\n      pass\n\n\na = am(5)\na.value\n\n5\n\n\n\na + 2\n\n7\n\n\n\na*5\n\n25\n\n\n\n\n다중상속(__init__이 겹친다…)\n\nclass Add:\n    def __init__(self,value):\n        print(\"Add클래스에서 정의된 __init__ 메소드가 실행됩니다\")\n        self.value = value \n    def __add__(self,value2):\n        return self.value + value2\n              \nclass Mul:\n    def __init__(self,value):\n        print(\"Mul클래스에서 정의된 __init__ 메소드가 실행됩니다\")        \n        self.value = value \n    def __mul__(self,value2):\n        return self.value * value2        \n    \nclass am(Add,Mul):\n    pass     \n\n- 현재 Add클래스가 우선 순위인 것 같다.\n\na = am(5)\n\nAdd클래스에서 정의된 __init__ 메소드가 실행됩니다\n\n\n\n\n믹스인 클래스(\\(\\star\\star\\star\\))\n\nclass Init:\n    def __init__(self,value):\n        ## 여기는 Init 클래스야 \n        print(\"Init클래스에서 정의된 __init__메소드를 실행합니다\")        \n        self.value = value\n\nclass Add(Init):\n    def __add__(self,value2):\n        return self.value + value2\n              \nclass Mul(Init):\n    def __mul__(self,value2):\n        return self.value * value2        \n    \nclass am(Add,Mul):\n    pass     \n\n\na = am(5)\n\nInit클래스에서 정의된 __init__메소드를 실행합니다\n\n\n\na + 2\n\n7\n\n\n\na*5\n\n25"
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-15-Extra 04. 클래스 탐구 (3).html#다중상속-super-o",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-15-Extra 04. 클래스 탐구 (3).html#다중상속-super-o",
    "title": "Extra 04. 클래스 탐구 (3)",
    "section": "다중상속 (super O)",
    "text": "다중상속 (super O)\n\nsuper를 쓰지 않는 좋지 못한 예시\n\nclass Init:\n    def __init__(self,value):\n        ## 여기는 Init 클래스야 \n        print(\"Init클래스에서 정의된 __init__메소드를 실행합니다\")        \n        self.value = value\n\n- 위 intit을 상속 받아서\n\n초기값 = 초기값 x 2\n초기값 = 초기값 + 5\n\n를 객채 생성과 동시 에 수행하는 클래스를 각각 만듬\n\nclass a1(Init):\n    def __init__(self,value):\n        Init.__init__(self,value)\n        self.value = self.value * 2\n\n\na = a1(5)\na.value\n\nInit클래스에서 정의된 __init__메소드를 실행합니다\n\n\n10\n\n\n\nclass a2(Init):\n    def __init__(self,value):\n        Init.__init__(self,value)\n        self.value = self.value + 5\n\n\na = a2(4)\na.value\n\nInit클래스에서 정의된 __init__메소드를 실행합니다\n\n\n9\n\n\n- 근데 초기값 = 초기갑 x 2 + 5를 객체 생성과 동시에 수행해주는 클래스를 만들고 싶음.\n\nclass a3(a1,a2) :\n    print(\"초기값 = 초기값 x2 + 5를 수행ㅎ는 클래스입니다.\")\n    def __init__(self,value) :\n        a1.__init__(self,value)\n        a2.__init__(self,self.value)\n\n초기값 = 초기값 x2 + 5를 수행ㅎ는 클래스입니다.\n\n\n\na = a3(5)\n\nInit클래스에서 정의된 __init__메소드를 실행합니다\nInit클래스에서 정의된 __init__메소드를 실행합니다\n\n\n\na.value\n\n15\n\n\n\n싫은 이유\n\n코드가 지저분함\n먼가 상속이란 단어의 진정성이 없음\n\n\n\n\n\nsuper()을 활용한 좋은 예시\n\nclass Init(object):\n    def __init__(self,value):\n        ## 여기는 Init 클래스야 \n        print(\"Init클래스에서 정의된 __init__메소드를 실행합니다\")        \n        self.value = value\n        \nclass a1(Init):\n    def __init__(self,value):\n        super().__init__(value)\n        self.value = self.value * 2\n        \nclass a2(Init):\n    def __init__(self,value):\n        super().__init__(value)\n        self.value = self.value + 5\n        \nclass a3(a2,a1):\n    def __init__(self,value):\n        super().__init__(value)\n\n\na = a3(5)\n\nInit클래스에서 정의된 __init__메소드를 실행합니다\n\n\n\na.value\n\n15\n\n\n\n\nsuper의 사용방법\n- (“초기값 x 2 + 5) x 2” 를 수행해주는 클래스를 만들고 싶음.\n\nclass Init(object):\n    def __init__(self,value):\n        ## 여기는 Init 클래스야 \n        print(\"Init클래스에서 정의된 __init__메소드를 실행합니다\")        \n        self.value = value\n        \nclass a1(Init):\n    def __init__(self,value):\n        super().__init__(value)\n        self.value = self.value * 2\n        \nclass a2(Init):\n    def __init__(self,value):\n        super().__init__(value)\n        self.value = self.value + 5\n        \nclass a3(a2,a1): ## 파라미터 순서에 따라 mro 상속 순서가 달라짐\n    def __init__(self,value):\n        super().__init__(value)\n        super(a2,self).__init__(self.value)\n\n- super().__init__(value) : 상위 클래스인 init,a1,a2의 __init__를 순서대로 실행하되 중복실행하지 않는다.\n- super(a2,self).__init__(self.value) : a2보다 상위 클래스인 init, a1의 __init__을 순서대로 실행하되 중복실행은 하지 않음.\n\na = a3(5)\na.value\n\nInit클래스에서 정의된 __init__메소드를 실행합니다\nInit클래스에서 정의된 __init__메소드를 실행합니다\n\n\n30\n\n\n\na3.mro()\n\n[__main__.a3, __main__.a2, __main__.a1, __main__.Init, object]\n\n\n- 그냥 이게 더 낫지 않나?\n\nclass Init(object):\n    def __init__(self,value):\n        ## 여기는 Init 클래스야 \n        print(\"Init클래스에서 정의된 __init__메소드를 실행합니다\")        \n        self.value = value\n        \nclass a1(Init):\n    def aa1(self):\n        self.value = self.value * 2\n        \nclass a2(Init):\n    def aa2(self):\n        self.value = self.value + 5\n        \nclass a3(a2,a1):\n    def aa3(self):\n        self.aa1()\n        self.aa2()\n        self.aa1()\n\n\na = a3(5)\n\nInit클래스에서 정의된 __init__메소드를 실행합니다\n\n\n\na.value\n\n5\n\n\n\na.aa3()\n\n\na.value\n\n30\n\n\n- 그래도 이전 방법들을 잘 알아야한다.\n\n어떠한 클래스를 상속 받을때는 “내가 만든 클래스”가 아닐 경우가 대부분이다. 따라서 “애초부터 메소드가 겹치지 않게 클래스들을 깔끔하게 디자인을 하는것”은 불가능한 경우가 많다."
  },
  {
    "objectID": "posts/DX/00. 데이터 다루기/extra/2023-08-15-Extra 04. 클래스 탐구 (3).html#리스트의-상속",
    "href": "posts/DX/00. 데이터 다루기/extra/2023-08-15-Extra 04. 클래스 탐구 (3).html#리스트의-상속",
    "title": "Extra 04. 클래스 탐구 (3)",
    "section": "리스트의 상속",
    "text": "리스트의 상속\n- list와 비슷하면서… 멤버들의 빈도가 계산되는 메소드를 갖는 나만의 list 클래스를 만들고 싶다.\n\nlst = list('asdfasssdfa')\nlst \n\n['a', 's', 'd', 'f', 'a', 's', 's', 's', 'd', 'f', 'a']\n\n\n- 각 원소들의 빈도\n\n{i : lst.count(i) for i in set(lst)}\n\n{'d': 2, 's': 4, 'f': 2, 'a': 3}\n\n\n\nlst.freq()를 수행하면 위의 결과가 나왔으면 좋겠음\n\n\nclass List(list) :\n    def freq(self) :\n        return {i : self.count(i) for i in set(self)}\n\n\nlst2 = List('asdfasssdfa')\n\n\nlst2\n\n['a', 's', 'd', 'f', 'a', 's', 's', 's', 'd', 'f', 'a']\n\n\n\nlst2.freq()\n\n{'d': 2, 's': 4, 'f': 2, 'a': 3}"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html",
    "title": "01. numpy & pandas (2)",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#list-to-df",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#list-to-df",
    "title": "01. numpy & pandas (2)",
    "section": "list \\(\\to\\) df",
    "text": "list \\(\\to\\) df\n\na1 = list(np.random.randint(0,100,10))\na2 = list(np.random.randint(0,100,10))\na3 = list(np.random.randint(0,100,10))\na4= list(np.random.randint(0,100,10))\n\ndf = pd.DataFrame([a1,a2,a3,a4]).T\n\n\ndf.head()\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\n0\n81\n45\n16\n73\n\n\n1\n74\n74\n11\n50\n\n\n2\n0\n85\n13\n77\n\n\n3\n97\n53\n97\n52\n\n\n4\n31\n21\n84\n14\n\n\n\n\n\n\n\n\n날짜 데이터 \\(\\to\\) df.index\n\ndate = pd.date_range(\"2023-08-18\",\"2023-08-27\",freq =\"D\")\n\n\ndf.index = date\n\n\n\n컬럼 이름 생성\n\nname = [\"a\" + str(i) for i in range(len(df.columns))]\n\n\ndf.columns= name\n\n\ndf.head()\n\n\n\n\n\n\n\n\na0\na1\na2\na3\n\n\n\n\n2023-08-18\n81\n45\n16\n73\n\n\n2023-08-19\n74\n74\n11\n50\n\n\n2023-08-20\n0\n85\n13\n77\n\n\n2023-08-21\n97\n53\n97\n52\n\n\n2023-08-22\n31\n21\n84\n14"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#dict-to-df-starstarstar",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#dict-to-df-starstarstar",
    "title": "01. numpy & pandas (2)",
    "section": "dict \\(\\to\\) df (\\(\\star\\star\\star\\))",
    "text": "dict \\(\\to\\) df (\\(\\star\\star\\star\\))\n\nimport random\n\n\ncode = [\"a\" + str(i) for i in range(10)]\nheight = np.linspace(160,180,10)\nweight = np.linspace(60,80,10)\nsmoke = random.choices([True, False],k=10) ## 복원 추출\ndate = pd.date_range(\"2023-08-18\",\"2023-08-27\",freq =\"D\")\n\ndic = {\"code\" : code,\n      \"height\" : height,\n      \"weight\" : weight,\n      \"smoke\" : smoke}\n\ndf = pd.DataFrame(dic,index= date)\n\n\ndf.head()\n\n\n\n\n\n\n\n\ncode\nheight\nweight\nsmoke\n\n\n\n\n2023-08-18\na0\n160.000000\n60.000000\nFalse\n\n\n2023-08-19\na1\n162.222222\n62.222222\nTrue\n\n\n2023-08-20\na2\n164.444444\n64.444444\nTrue\n\n\n2023-08-21\na3\n166.666667\n66.666667\nFalse\n\n\n2023-08-22\na4\n168.888889\n68.888889\nTrue"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#인덱스-정의",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#인덱스-정의",
    "title": "01. numpy & pandas (2)",
    "section": "인덱스 정의",
    "text": "인덱스 정의\n\n_lst = random.choices(\"ABC\",k= len(df)) ## 중복허용\n_n = list(np.random.choice(range(1, len(df)+1), len(df), replace=False)) ## 중복 허용 안함\n\n\nindex = [i + str(j) for i,j in zip(_lst,_n)]\n\n\ndf.index = index"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#인덱스-중복-확인",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#인덱스-중복-확인",
    "title": "01. numpy & pandas (2)",
    "section": "인덱스 중복 확인",
    "text": "인덱스 중복 확인\n\nlen(df) == len(df.index.unique())\n\nTrue"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#인덱스-생성확인",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#인덱스-생성확인",
    "title": "01. numpy & pandas (2)",
    "section": "인덱스 생성확인",
    "text": "인덱스 생성확인\n\ndf.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\nA115\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\nB64\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\nA172\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\nA215\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\nB86\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 234 entries, A115 to C75\nData columns (total 11 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   manufacturer  234 non-null    object \n 1   model         234 non-null    object \n 2   displ         234 non-null    float64\n 3   year          234 non-null    int64  \n 4   cyl           234 non-null    int64  \n 5   trans         234 non-null    object \n 6   drv           234 non-null    object \n 7   cty           234 non-null    int64  \n 8   hwy           234 non-null    int64  \n 9   fl            234 non-null    object \n 10  class         234 non-null    object \ndtypes: float64(1), int64(4), object(6)\nmemory usage: 21.9+ KB"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#df-load-index-1",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#df-load-index-1",
    "title": "01. numpy & pandas (2)",
    "section": "df load + index (1)",
    "text": "df load + index (1)\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/main/posts/mpg.csv\",\n                 index_col=\"manufacturer\")\n\n\ndf.head()\n\n\n\n\n\n\n\n\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\nmanufacturer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#df-load-index-2",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#df-load-index-2",
    "title": "01. numpy & pandas (2)",
    "section": "df load + index (2)",
    "text": "df load + index (2)\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/main/posts/mpg.csv\")\ndf = df.set_index(\"manufacturer\") # == df.set_index(\"manufacturer\",inplace= True)\n\n\ndf.head()\n\n\n\n\n\n\n\n\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\nmanufacturer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\n- 인덱스 이름 삭제\n\ndf.index.name = None\ndf.head()\n\n\n\n\n\n\n\n\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#인덱스-삭제index-버리기-x",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#인덱스-삭제index-버리기-x",
    "title": "01. numpy & pandas (2)",
    "section": "인덱스 삭제(index 버리기 x)",
    "text": "인덱스 삭제(index 버리기 x)\n\n_df = df.reset_index()\n_df.head()\n\n\n\n\n\n\n\n\nindex\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#인덱스-삭제index-버리기-o",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#인덱스-삭제index-버리기-o",
    "title": "01. numpy & pandas (2)",
    "section": "인덱스 삭제(index 버리기 o)",
    "text": "인덱스 삭제(index 버리기 o)\n\n_df = df.reset_index(drop=True)\n_df.head()\n\n\n\n\n\n\n\n\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#import-1",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#import-1",
    "title": "01. numpy & pandas (2)",
    "section": "import",
    "text": "import\n\nimport random\nimport pandas as pd\nimport plotly.express as px\n\n- tip 데이터는 plotly 모듈에서 제공한다.\n\ntip = px.data.tips()\n\n\ntip.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 244 entries, 0 to 243\nData columns (total 7 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   total_bill  244 non-null    float64\n 1   tip         244 non-null    float64\n 2   sex         244 non-null    object \n 3   smoker      244 non-null    object \n 4   day         244 non-null    object \n 5   time        244 non-null    object \n 6   size        244 non-null    int64  \ndtypes: float64(2), int64(1), object(4)\nmemory usage: 13.5+ KB\n\n\n\ntip.shape\n\n(244, 7)\n\n\n\ntip.index\n\nRangeIndex(start=0, stop=244, step=1)\n\n\n- 값 확인\n\ntip.values\n\narray([[16.99, 1.01, 'Female', ..., 'Sun', 'Dinner', 2],\n       [10.34, 1.66, 'Male', ..., 'Sun', 'Dinner', 3],\n       [21.01, 3.5, 'Male', ..., 'Sun', 'Dinner', 3],\n       ...,\n       [22.67, 2.0, 'Male', ..., 'Sat', 'Dinner', 2],\n       [17.82, 1.75, 'Male', ..., 'Sat', 'Dinner', 2],\n       [18.78, 3.0, 'Female', ..., 'Thur', 'Dinner', 2]], dtype=object)\n\n\n- 기초통계정보 확인\n\ntip.describe()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsize\n\n\n\n\ncount\n244.000000\n244.000000\n244.000000\n\n\nmean\n19.785943\n2.998279\n2.569672\n\n\nstd\n8.902412\n1.383638\n0.951100\n\n\nmin\n3.070000\n1.000000\n1.000000\n\n\n25%\n13.347500\n2.000000\n2.000000\n\n\n50%\n17.795000\n2.900000\n2.000000\n\n\n75%\n24.127500\n3.562500\n3.000000\n\n\nmax\n50.810000\n10.000000\n6.000000\n\n\n\n\n\n\n\n\ntip.head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#sort",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#sort",
    "title": "01. numpy & pandas (2)",
    "section": "sort",
    "text": "sort\n- total_bill 기준 오름차순 정렬\n\ntip.sort_values(by = \"total_bill\").head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n67\n3.07\n1.00\nFemale\nYes\nSat\nDinner\n1\n\n\n92\n5.75\n1.00\nFemale\nYes\nFri\nDinner\n2\n\n\n111\n7.25\n1.00\nFemale\nNo\nSat\nDinner\n1\n\n\n172\n7.25\n5.15\nMale\nYes\nSun\nDinner\n2\n\n\n149\n7.51\n2.00\nMale\nNo\nThur\nLunch\n2\n\n\n\n\n\n\n\n- 내림차순 정렬\n\ntip.sort_values(by = \"total_bill\",ascending=False).head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n170\n50.81\n10.00\nMale\nYes\nSat\nDinner\n3\n\n\n212\n48.33\n9.00\nMale\nNo\nSat\nDinner\n4\n\n\n59\n48.27\n6.73\nMale\nNo\nSat\nDinner\n4\n\n\n156\n48.17\n5.00\nMale\nNo\nSun\nDinner\n6\n\n\n182\n45.35\n3.50\nMale\nYes\nSun\nDinner\n3\n\n\n\n\n\n\n\n- 복합열 정렬 : total_bill은 오름차순, tip은 내림차순 기준으로 정렬\n\ntip.sort_values(by = [\"total_bill\",\"tip\"],ascending=[False,True])\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n170\n50.81\n10.00\nMale\nYes\nSat\nDinner\n3\n\n\n212\n48.33\n9.00\nMale\nNo\nSat\nDinner\n4\n\n\n59\n48.27\n6.73\nMale\nNo\nSat\nDinner\n4\n\n\n156\n48.17\n5.00\nMale\nNo\nSun\nDinner\n6\n\n\n182\n45.35\n3.50\nMale\nYes\nSun\nDinner\n3\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n149\n7.51\n2.00\nMale\nNo\nThur\nLunch\n2\n\n\n111\n7.25\n1.00\nFemale\nNo\nSat\nDinner\n1\n\n\n172\n7.25\n5.15\nMale\nYes\nSun\nDinner\n2\n\n\n92\n5.75\n1.00\nFemale\nYes\nFri\nDinner\n2\n\n\n67\n3.07\n1.00\nFemale\nYes\nSat\nDinner\n1\n\n\n\n\n244 rows × 7 columns"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#unique값-확인-범주형-데이터",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#unique값-확인-범주형-데이터",
    "title": "01. numpy & pandas (2)",
    "section": "unique값 확인 (범주형 데이터)",
    "text": "unique값 확인 (범주형 데이터)\n- day열의 unique값 확인\n\n#tip.day\n\n\ntip.day.unique()\n\narray(['Sun', 'Sat', 'Thur', 'Fri'], dtype=object)\n\n\n- unique값 개수 확인\n\ntip.day.value_counts()\n\nSat     87\nSun     76\nThur    62\nFri     19\nName: day, dtype: int64\n\n\n- 시각화\n\ntip.day.value_counts().plot(kind=\"barh\",title=\"count of day\",figsize = (4,4))\n\n&lt;Axes: title={'center': 'count of day'}&gt;\n\n\n\n\n\n- smoker 몇 명이나 있는지 확인\n\ntip.smoker.value_counts()\n\nNo     151\nYes     93\nName: smoker, dtype: int64\n\n\n- 비율 확인\n\ntip.smoker.value_counts() / len(tip) # = tip.smoker.value_counts(normalize = True)\n\nNo     0.618852\nYes    0.381148\nName: smoker, dtype: float64\n\n\n- 비율 시각화\n\n(tip.smoker.value_counts() / len(tip)).plot(kind=\"bar\",title=\"count of smoker\",figsize = (4,4))\n\n&lt;Axes: title={'center': 'count of smoker'}&gt;\n\n\n\n\n\n- total_bill의 lineplot 확인\n\ntip.total_bill.plot(figsize=(4,4))\n\n&lt;Axes: &gt;"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#최빈값",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#최빈값",
    "title": "01. numpy & pandas (2)",
    "section": "최빈값",
    "text": "최빈값\n\ntip.day.value_counts()\n\nSat     87\nSun     76\nThur    62\nFri     19\nName: day, dtype: int64\n\n\n\ntip.day.mode()\n\n0    Sat\nName: day, dtype: object\n\n\n\ntip.smoker.mode()\n\n0    No\nName: smoker, dtype: object"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#df.sum",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-18-01. numpy & pandas (2).html#df.sum",
    "title": "01. numpy & pandas (2)",
    "section": "df.sum",
    "text": "df.sum\n\naxis=0 (개별 컬럼의 합을 계산)\n\ntip.head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4\n\n\n\n\n\n\n\n\ntip.sum(axis=0)\n\ntotal_bill                                              4827.77\ntip                                                      731.58\nsex           FemaleMaleMaleMaleFemaleMaleMaleMaleMaleMaleMa...\nsmoker        NoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNo...\nday           SunSunSunSunSunSunSunSunSunSunSunSunSunSunSunS...\ntime          DinnerDinnerDinnerDinnerDinnerDinnerDinnerDinn...\nsize                                                        627\ndtype: object\n\n\n\n\n평균과 중앙값\n\ntip[[\"total_bill\",\"tip\"]].mean()\n\ntotal_bill    19.785943\ntip            2.998279\ndtype: float64\n\n\n\ntip[[\"total_bill\",\"tip\"]].median()\n\ntotal_bill    17.795\ntip            2.900\ndtype: float64"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html",
    "title": "03. numpy & pandas (4)",
    "section": "",
    "text": "import plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"plotly_mimetype+notebook_connected\"\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#import-및-data-load",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#import-및-data-load",
    "title": "03. numpy & pandas (4)",
    "section": "import 및 data load",
    "text": "import 및 data load\n\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"plotly_mimetype+notebook_connected\"\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n\npath = 'https://raw.githubusercontent.com/Jangrae/csv/master/tips(2).csv'\n\n\ndf = pd.read_csv(path)\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 244 entries, 0 to 243\nData columns (total 7 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   total_bill_amount  244 non-null    float64\n 1   tip                244 non-null    float64\n 2   male_female        244 non-null    object \n 3   smoke_yes_no       244 non-null    object \n 4   week_name          244 non-null    object \n 5   dinner_lunch       244 non-null    object \n 6   size               244 non-null    int64  \ndtypes: float64(2), int64(1), object(4)\nmemory usage: 13.5+ KB"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#컬럼-이름-변경-1.-rename",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#컬럼-이름-변경-1.-rename",
    "title": "03. numpy & pandas (4)",
    "section": "컬럼 이름 변경 1. rename",
    "text": "컬럼 이름 변경 1. rename\n\ndf.rename(columns = {\"total_bill_amount\" : \"total_bill\",\n            \"male_female\" : \"sex\",\n            \"smoke_yes_no\" : \"smoker\",\n            \"week_name\": \"day\",\n             \"dinner_lunch\" : \"time\"},inplace=True) \n\n\ndf\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n239\n29.03\n5.92\nMale\nNo\nSat\nDinner\n3\n\n\n240\n27.18\n2.00\nFemale\nYes\nSat\nDinner\n2\n\n\n241\n22.67\n2.00\nMale\nYes\nSat\nDinner\n2\n\n\n242\n17.82\n1.75\nMale\nNo\nSat\nDinner\n2\n\n\n243\n18.78\n3.00\nFemale\nNo\nThur\nDinner\n2\n\n\n\n\n244 rows × 7 columns"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#컬럼-이름-변경-2.-list",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#컬럼-이름-변경-2.-list",
    "title": "03. numpy & pandas (4)",
    "section": "컬럼 이름 변경 2. list",
    "text": "컬럼 이름 변경 2. list\n\npath = 'https://raw.githubusercontent.com/Jangrae/csv/master/tips(2).csv'\ndf = pd.read_csv(path)\n\n\ndf.columns = ['total_bill', 'tip', 'sex', 'smoker', 'day', 'time', 'size']\n\n\ndf.head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#컬럼-추가-1.-df.eval",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#컬럼-추가-1.-df.eval",
    "title": "03. numpy & pandas (4)",
    "section": "컬럼 추가 1. df.eval",
    "text": "컬럼 추가 1. df.eval\n\ndf = df.eval(\"f_amt = total_bill + tip\")\ndf.head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\nf_amt\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n18.00\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n12.00\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n24.51\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n26.99\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4\n28.20"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#컬럼추가-2.-dff_amt",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#컬럼추가-2.-dff_amt",
    "title": "03. numpy & pandas (4)",
    "section": "컬럼추가 2. df[\"f_amt\"]",
    "text": "컬럼추가 2. df[\"f_amt\"]\n\ndf[\"f_amt\"] = df.total_bill + df.tip\n\n\ndf.head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\nf_amt\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n18.00\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n12.00\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n24.51\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n26.99\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4\n28.20"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#컬럼추가-3.-insert",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#컬럼추가-3.-insert",
    "title": "03. numpy & pandas (4)",
    "section": "컬럼추가 3. insert()",
    "text": "컬럼추가 3. insert()\n\ndf.insert(1,\"div_tb\",df[\"total_bill\"]/df[\"size\"] )\n\n\ndf.head()\n\n\n\n\n\n\n\n\ntotal_bill\ndiv_tb\ntip\nsex\nsmoker\nday\ntime\nsize\nf_amt\n\n\n\n\n0\n16.99\n8.495000\n1.01\nFemale\nNo\nSun\nDinner\n2\n18.00\n\n\n1\n10.34\n3.446667\n1.66\nMale\nNo\nSun\nDinner\n3\n12.00\n\n\n2\n21.01\n7.003333\n3.50\nMale\nNo\nSun\nDinner\n3\n24.51\n\n\n3\n23.68\n11.840000\n3.31\nMale\nNo\nSun\nDinner\n2\n26.99\n\n\n4\n24.59\n6.147500\n3.61\nFemale\nNo\nSun\nDinner\n4\n28.20\n\n\n\n\n\n\n\n- day변수를 이용하여 휴일 변수 holiday열을 만들기\n\ndf.day.value_counts()\n\nday\nSat     87\nSun     76\nThur    62\nFri     19\nName: count, dtype: int64\n\n\n\ndf[\"holiday\"]=[1 if \"S\" in i  else 0 for i in df.day]\n\n\ndf.head()\n\n\n\n\n\n\n\n\ntotal_bill\ndiv_tb\ntip\nsex\nsmoker\nday\ntime\nsize\nf_amt\nholiday\n\n\n\n\n0\n16.99\n8.495000\n1.01\nFemale\nNo\nSun\nDinner\n2\n18.00\n1\n\n\n1\n10.34\n3.446667\n1.66\nMale\nNo\nSun\nDinner\n3\n12.00\n1\n\n\n2\n21.01\n7.003333\n3.50\nMale\nNo\nSun\nDinner\n3\n24.51\n1\n\n\n3\n23.68\n11.840000\n3.31\nMale\nNo\nSun\nDinner\n2\n26.99\n1\n\n\n4\n24.59\n6.147500\n3.61\nFemale\nNo\nSun\nDinner\n4\n28.20\n1"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#컬럼-삭제",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#컬럼-삭제",
    "title": "03. numpy & pandas (4)",
    "section": "컬럼 삭제",
    "text": "컬럼 삭제\n- 단일 열 삭제\n\ndf.drop(\"tip\",axis=1).head()\n\n\n\n\n\n\n\n\ntotal_bill\ndiv_tb\nsex\nsmoker\nday\ntime\nsize\nf_amt\nholiday\n\n\n\n\n0\n16.99\n8.495000\nFemale\nNo\nSun\nDinner\n2\n18.00\n1\n\n\n1\n10.34\n3.446667\nMale\nNo\nSun\nDinner\n3\n12.00\n1\n\n\n2\n21.01\n7.003333\nMale\nNo\nSun\nDinner\n3\n24.51\n1\n\n\n3\n23.68\n11.840000\nMale\nNo\nSun\nDinner\n2\n26.99\n1\n\n\n4\n24.59\n6.147500\nFemale\nNo\nSun\nDinner\n4\n28.20\n1\n\n\n\n\n\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\ntotal_bill\ndiv_tb\ntip\nsex\nsmoker\nday\ntime\nsize\nf_amt\nholiday\n\n\n\n\n0\n16.99\n8.495000\n1.01\nFemale\nNo\nSun\nDinner\n2\n18.00\n1\n\n\n1\n10.34\n3.446667\n1.66\nMale\nNo\nSun\nDinner\n3\n12.00\n1\n\n\n2\n21.01\n7.003333\n3.50\nMale\nNo\nSun\nDinner\n3\n24.51\n1\n\n\n3\n23.68\n11.840000\n3.31\nMale\nNo\nSun\nDinner\n2\n26.99\n1\n\n\n4\n24.59\n6.147500\n3.61\nFemale\nNo\nSun\nDinner\n4\n28.20\n1\n\n\n\n\n\n\n\n- 다중 열 삭제\n\ndf.drop([\"tip\",\"sex\"],axis=1).head()\n\n\n\n\n\n\n\n\ntotal_bill\ndiv_tb\nsmoker\nday\ntime\nsize\nf_amt\nholiday\n\n\n\n\n0\n16.99\n8.495000\nNo\nSun\nDinner\n2\n18.00\n1\n\n\n1\n10.34\n3.446667\nNo\nSun\nDinner\n3\n12.00\n1\n\n\n2\n21.01\n7.003333\nNo\nSun\nDinner\n3\n24.51\n1\n\n\n3\n23.68\n11.840000\nNo\nSun\nDinner\n2\n26.99\n1\n\n\n4\n24.59\n6.147500\nNo\nSun\nDinner\n4\n28.20\n1"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#범주값-변경",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#범주값-변경",
    "title": "03. numpy & pandas (4)",
    "section": "범주값 변경",
    "text": "범주값 변경\n\n1. map\n- 남자는 1, 여자는 0으로 인코딩\n\ndf[\"sex\"] = df[\"sex\"].map({\"Male\":0,\"Female\":1})\n\n\ndf.head()\n\n\n\n\n\n\n\n\ntotal_bill\ndiv_tb\ntip\nsex\nsmoker\nday\ntime\nsize\nf_amt\nholiday\n\n\n\n\n0\n16.99\n8.495000\n1.01\n1\nNo\nSun\nDinner\n2\n18.00\n1\n\n\n1\n10.34\n3.446667\n1.66\n0\nNo\nSun\nDinner\n3\n12.00\n1\n\n\n2\n21.01\n7.003333\n3.50\n0\nNo\nSun\nDinner\n3\n24.51\n1\n\n\n3\n23.68\n11.840000\n3.31\n0\nNo\nSun\nDinner\n2\n26.99\n1\n\n\n4\n24.59\n6.147500\n3.61\n1\nNo\nSun\nDinner\n4\n28.20\n1\n\n\n\n\n\n\n\n\n\n2. replace\n\ndf.sex = df.sex.replace([0,1],[\"Male\",\"Female\"])\n\n\n_df = df\n\n\n_df.sex = df.sex.replace({\"Male\":0,\"Female\":1})\n\n\n_df.head()\n\n\n\n\n\n\n\n\ntotal_bill\ndiv_tb\ntip\nsex\nsmoker\nday\ntime\nsize\nf_amt\nholiday\n\n\n\n\n0\n16.99\n8.495000\n1.01\n1\nNo\nSun\nDinner\n2\n18.00\n1\n\n\n1\n10.34\n3.446667\n1.66\n0\nNo\nSun\nDinner\n3\n12.00\n1\n\n\n2\n21.01\n7.003333\n3.50\n0\nNo\nSun\nDinner\n3\n24.51\n1\n\n\n3\n23.68\n11.840000\n3.31\n0\nNo\nSun\nDinner\n2\n26.99\n1\n\n\n4\n24.59\n6.147500\n3.61\n1\nNo\nSun\nDinner\n4\n28.20\n1\n\n\n\n\n\n\n\n\ndf.time = df.time.replace([\"Dinner\",\"Lunch\"],[0,1])\n\n\ndf.head()\n\n\n\n\n\n\n\n\ntotal_bill\ndiv_tb\ntip\nsex\nsmoker\nday\ntime\nsize\nf_amt\nholiday\n\n\n\n\n0\n16.99\n8.495000\n1.01\n1\nNo\nSun\n0\n2\n18.00\n1\n\n\n1\n10.34\n3.446667\n1.66\n0\nNo\nSun\n0\n3\n12.00\n1\n\n\n2\n21.01\n7.003333\n3.50\n0\nNo\nSun\n0\n3\n24.51\n1\n\n\n3\n23.68\n11.840000\n3.31\n0\nNo\nSun\n0\n2\n26.99\n1\n\n\n4\n24.59\n6.147500\n3.61\n1\nNo\nSun\n0\n4\n28.20\n1\n\n\n\n\n\n\n\n\ndf.smoker = df.smoker.replace([\"No\",\"Yes\"],[0,1])\n\n\ndf.head()\n\n\n\n\n\n\n\n\ntotal_bill\ndiv_tb\ntip\nsex\nsmoker\nday\ntime\nsize\nf_amt\nholiday\n\n\n\n\n0\n16.99\n8.495000\n1.01\n1\n0\nSun\n0\n2\n18.00\n1\n\n\n1\n10.34\n3.446667\n1.66\n0\n0\nSun\n0\n3\n12.00\n1\n\n\n2\n21.01\n7.003333\n3.50\n0\n0\nSun\n0\n3\n24.51\n1\n\n\n3\n23.68\n11.840000\n3.31\n0\n0\nSun\n0\n2\n26.99\n1\n\n\n4\n24.59\n6.147500\n3.61\n1\n0\nSun\n0\n4\n28.20\n1"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#범주값-만들기",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#범주값-만들기",
    "title": "03. numpy & pandas (4)",
    "section": "범주값 만들기",
    "text": "범주값 만들기\n\n1. cut\n- 크기(그룹의 수) 를 기준으로 구간을 나눈다.\n\nlabel = list(\"ABCD\")\n\n\n_df[\"g1\"] = pd.cut(df[\"tip\"],4,labels = label)\n\n\n_df[\"g1\"].value_counts()\n\ng1\nA    163\nB     69\nC     10\nD      2\nName: count, dtype: int64\n\n\n- 결과가 좀 그렇다…..\n\n_df.boxplot(backend=\"plotly\",y=\"tip\",x=\"g1\",color=\"g1\")\n\n\n                                                \n\n\n\n\n2. qcut\n- 간격(bins)외 lables을 건네줘서 구체적으로 나눈다. \\(\\to\\) 항상, 간격 = labels + 1\n\n예비학습 (qcut x)\n\n\n\n그룹\n구간\n\n\n\n\nA\n\\(x \\leq\\) 3\n\n\nB\n3 &lt; \\(x \\leq\\) 6\n\n\nC\n6 &lt; \\(x\\)\n\n\n\n\ntest = pd.DataFrame(np.arange(0,10),columns=[\"num\"])\n\n\nlable = list(\"ABC\")\n\n\nbin = [-np.Inf,3,6,np.Inf]\n\n\npd.DataFrame(np.arange(0,10)).shape\n\n(10, 1)\n\n\n\ntest[\"g\"]= pd.cut(np.arange(0,10),bins = bin,labels = lable)\n\n\ntest\n\n\n\n\n\n\n\n\nnum\ng\n\n\n\n\n0\n0\nA\n\n\n1\n1\nA\n\n\n2\n2\nA\n\n\n3\n3\nA\n\n\n4\n4\nB\n\n\n5\n5\nB\n\n\n6\n6\nB\n\n\n7\n7\nC\n\n\n8\n8\nC\n\n\n9\n9\nC\n\n\n\n\n\n\n\n\n\n실습 qcut (o)\n\n_df[\"tip\"].describe()\n\ncount    244.000000\nmean       2.998279\nstd        1.383638\nmin        1.000000\n25%        2.000000\n50%        2.900000\n75%        3.562500\nmax       10.000000\nName: tip, dtype: float64\n\n\n\nA = [-np.Inf, 2.0, 2.9, 3.5625, np.Inf]\n\n\nlabels = list(\"ABCD\")\n\n\n_df[\"g2\"]= pd.cut(_df[\"tip\"], bins=A,labels=labels)\n\n\n_df[\"g3\"] = pd.qcut(_df[\"tip\"],4)\n\n- 4분위수로 값을 나누어도 개수가 다른 이유는 값이 같은 것들이 존재하기 때문이다..\n\n_df[\"g3\"].value_counts()\n\ng3\n(0.999, 2.0]     78\n(2.9, 3.562]     61\n(3.562, 10.0]    61\n(2.0, 2.9]       44\nName: count, dtype: int64\n\n\n\n_df.g2.value_counts()\n\ng2\nA    78\nC    61\nD    61\nB    44\nName: count, dtype: int64\n\n\n\n_df.boxplot(backend=\"plotly\",y=\"tip\",x=\"g2\",color=\"g2\")\n\n\n                                                \n\n\n\ntotal_bill 변수의 4분위수를 저장\n\n\nq1 = df.total_bill.describe()[\"25%\"]\nq2 = df.total_bill.describe()[\"50%\"]\nq3 = df.total_bill.describe()[\"75%\"]\n\n\nq1,q2,q3\n\n(13.3475, 17.795, 24.127499999999998)\n\n\n\ndf[\"t_g1\"] = pd.cut(df[\"total_bill\"], bins = [-np.Inf,q1,q2,q3,np.Inf],labels = list(\"ABCD\"))\n\n\ndf.t_g1.value_counts()\n\nt_g1\nA    61\nB    61\nC    61\nD    61\nName: count, dtype: int64\n\n\n\n_df.t_g1.value_counts()\n\nt_g1\nA    61\nB    61\nC    61\nD    61\nName: count, dtype: int64\n\n\n\n_df.boxplot(backend=\"plotly\",y=\"total_bill\",x=\"t_g1\",color=\"t_g1\")"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#결측치-처리",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#결측치-처리",
    "title": "03. numpy & pandas (4)",
    "section": "결측치 처리",
    "text": "결측치 처리\n\ndata load\n[airquality 데이터 셋 정보]\n\nOzone: 오존 농도\n\nSolar.R: 태양복사량\nWind: 풍속\nTemp: 기온\nMonth: 월\nDay: 일\n\n\n\nCode\npath = 'https://raw.githubusercontent.com/Jangrae/csv/master/airquality.csv'\ndf = pd.read_csv(path)\n\n# 확인\ndf.head()\n\n\n\n\n\n\n\n\n\nOzone\nSolar.R\nWind\nTemp\nMonth\nDay\n\n\n\n\n0\n41.0\n190.0\n7.4\n67\n5\n1\n\n\n1\n36.0\n118.0\n8.0\n72\n5\n2\n\n\n2\n12.0\n149.0\n12.6\n74\n5\n3\n\n\n3\n18.0\n313.0\n11.5\n62\n5\n4\n\n\n4\nNaN\nNaN\n14.3\n56\n5\n5\n\n\n\n\n\n\n\n\n\n결측치 확인법(\\(\\star\\star\\))\n- 확인 1. df.into() : Ozone, Solar.R에서 결측치가 있는 것으로 보인다.\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 153 entries, 0 to 152\nData columns (total 6 columns):\n #   Column   Non-Null Count  Dtype  \n---  ------   --------------  -----  \n 0   Ozone    116 non-null    float64\n 1   Solar.R  146 non-null    float64\n 2   Wind     153 non-null    float64\n 3   Temp     153 non-null    int64  \n 4   Month    153 non-null    int64  \n 5   Day      153 non-null    int64  \ndtypes: float64(3), int64(3)\nmemory usage: 7.3 KB\n\n\n- 확인 2. df.isna()==df.isnull()\n\n#df.isna()\ndf.isnull().head()\n\n\n\n\n\n\n\n\nOzone\nSolar.R\nWind\nTemp\nMonth\nDay\n\n\n\n\n0\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n1\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n2\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n3\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n4\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\n\n\n\n\n\n\n\n\ndf.notnull().head()\n\n\n\n\n\n\n\n\nOzone\nSolar.R\nWind\nTemp\nMonth\nDay\n\n\n\n\n0\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\n\n1\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\n\n2\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\n\n3\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\n\n4\nFalse\nFalse\nTrue\nTrue\nTrue\nTrue\n\n\n\n\n\n\n\n- 방법 3 : df.isna().sum()\n\ndf.isna().sum()\n\nOzone      37\nSolar.R     7\nWind        0\nTemp        0\nMonth       0\nDay         0\ndtype: int64\n\n\n- 결측치 비율 구하기\n\ndf.isna().sum() / len(df)\n\nOzone      0.241830\nSolar.R    0.045752\nWind       0.000000\nTemp       0.000000\nMonth      0.000000\nDay        0.000000\ndtype: float64\n\n\n\n\n결측치 제거\n\naxis=1로 하면 열이 통째로 날아가지 지양하자\n\n\n_df=df.dropna(axis=0).reset_index(drop=True)\n\n\n_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 111 entries, 0 to 110\nData columns (total 6 columns):\n #   Column   Non-Null Count  Dtype  \n---  ------   --------------  -----  \n 0   Ozone    111 non-null    float64\n 1   Solar.R  111 non-null    float64\n 2   Wind     111 non-null    float64\n 3   Temp     111 non-null    int64  \n 4   Month    111 non-null    int64  \n 5   Day      111 non-null    int64  \ndtypes: float64(3), int64(3)\nmemory usage: 5.3 KB\n\n\n- 제거된 행 확인\n\nlen(df)-len(_df)\n\n42\n\n\n\n\n특정 열에 결측치가 있는 행 제거\n\n_df = df.copy()\n\n\n_df.dropna(subset = [\"Ozone\"],axis=0,inplace=True)\n\n\nlen(df) - len(_df)\n\n37\n\n\n\n_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 116 entries, 0 to 152\nData columns (total 6 columns):\n #   Column   Non-Null Count  Dtype  \n---  ------   --------------  -----  \n 0   Ozone    116 non-null    float64\n 1   Solar.R  111 non-null    float64\n 2   Wind     116 non-null    float64\n 3   Temp     116 non-null    int64  \n 4   Month    116 non-null    int64  \n 5   Day      116 non-null    int64  \ndtypes: float64(3), int64(3)\nmemory usage: 6.3 KB\n\n\n\n_df.isna().sum()\n\nOzone      0\nSolar.R    5\nWind       0\nTemp       0\nMonth      0\nDay        0\ndtype: int64\n\n\n\n\n결측치 채우기\n- 평균값으로 채우기\n\n_df = df.copy()\n\n\nmo = _df.Ozone.mean()\n\n\n_df[\"Ozone\"].fillna(mo,inplace=True)\n\n\n_df.isna().sum()\n\nOzone      0\nSolar.R    7\nWind       0\nTemp       0\nMonth      0\nDay        0\ndtype: int64\n\n\n- 특정값으로 채우기 : Solar.R==na $\\to$ 0\n\n_df[\"Solar.R\"].fillna(0,inplace=True)\n\n\n_df.isna().sum()\n\nOzone      0\nSolar.R    0\nWind       0\nTemp       0\nMonth      0\nDay        0\ndtype: int64\n\n\n- 직전 행 또는 바로 다음 행의 값으로 채우기\n\n해당 데이터는 시계열 데이터 이므로 직전이나, 다음 행의 값으로 결측치를 대체해도 될 것 같다.\n\n\n_df = df.copy()\n\n- 직전값으로 채우기 \\(\\to\\) fillna(,method=“ffill”)\n\n_df.Ozone.fillna(method=\"ffill\",inplace=True)\n\n\n_df.isna().sum()\n\nOzone      0\nSolar.R    7\nWind       0\nTemp       0\nMonth      0\nDay        0\ndtype: int64\n\n\n- 다음값으로 채우기 \\(\\to\\) fillna(, method = “bfill”)\n\n_df[\"Solar.R\"].fillna(method = \"bfill\",inplace=True)\n\n\n_df.isna().sum()\n\nOzone      0\nSolar.R    0\nWind       0\nTemp       0\nMonth      0\nDay        0\ndtype: int64\n\n\n- 선형보간법으로 채우기 \\(\\to\\) interpolate()\n- 다음과 같이 결측치를 선형방식으로 채운다. (빨간색점!)\n\n\nCode\nx = [1,2,3,4]\ny = [1,2,3,4]\nn = [\"T\",\"T\",\"F\",\"T\"]\na = pd.DataFrame([x,y,n]).T\na.columns=list(\"xyn\")\n\na.plot(kind= \"scatter\",x=\"x\",y=\"y\",color=\"n\",backend=\"plotly\")\n\n\n\n                                                \n\n\n\n_df = df.copy()\n_df[\"Ozone\"].interpolate(method=\"linear\",inplace=True)\n_df[\"Solar.R\"].interpolate(method=\"linear\",inplace=True)\n_df.isna().sum()\n\nOzone      0\nSolar.R    0\nWind       0\nTemp       0\nMonth      0\nDay        0\ndtype: int64\n\n\n\n\n\n참고 : 이상치\n1 데이터 로드\n\ntip = px.data.tips()\ntip.head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4\n\n\n\n\n\n\n\n2 열 데이터 분포 확인 (hist)\n- tip데이터를 살펴본결과 몇몇 이상치들이 보인다.\n\n\nCode\ntip.plot(backend = \"plotly\",kind = \"hist\", x=\"tip\")\n\n\n\n                                                \n\n\n3 boxplot\n\n\nCode\ntip.plot(backend=\"plotly\", kind=\"box\",x=\"tip\",width=500,height=400)\n\n\n\n                                                \n\n\n4 Q3에서 Q1에서 뺀다\n\nq1 = tip.tip.describe()[\"25%\"]\nq3 = tip.tip.describe()[\"75%\"]\n\n\niqr = q3-q1\n\n5 $ $\n\n_m = q1-iqr*1.5\n_M = q3+iqr*1.5\n\n\n_m,_M\n\n(-0.34375, 5.90625)\n\n\n해당 범위를 벗어나는 값을 이상치로 판단\n\\[\\text{outlier} \\leq \\text{Q1 - IQR}\\times 1.5\\quad \\& \\quad \\text{outlier} \\geq \\text{Q3 + IQR}\\times 1.5\\]\n6 이상치 판별 컬럼 추가\n\ntip[\"t_out\"] = [\"outlier\" if (i &lt;= q1-iqr*1.5) or ((i &gt;= q3+iqr*1.5)) else \"normal\" for i in tip.tip]\n\n\ntip.t_out.value_counts()\n\nt_out\nnormal     235\noutlier      9\nName: count, dtype: int64\n\n\n\n\nCode\ntip.plot(backend=\"plotly\", kind=\"box\",y=\"tip\",color = \"t_out\",points=\"all\",width=500,height=400)\n\n\n\n                                                \n\n\n\n\nCode\ntip.plot(backend=\"plotly\", kind=\"scatter\",x=\"tip\",y=\"tip\",color = \"t_out\",width=500,height=400)"
  },
  {
    "objectID": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#가변수-만들기",
    "href": "posts/DX/01. 데이터 다듬기/2023-08-22-03. numpy & pandas (4).html#가변수-만들기",
    "title": "03. numpy & pandas (4)",
    "section": "가변수 만들기",
    "text": "가변수 만들기\n\n\n\nsurvived\n\\(Y_1\\)\n\\(Y_2\\)\n\n\n\n\nYes\n1\n0\n\n\nNo\n0\n1\n\n\n\n\n1. 데이터 로드\n\ntip  = px.data.tips()\n\n\ntip.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 244 entries, 0 to 243\nData columns (total 7 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   total_bill  244 non-null    float64\n 1   tip         244 non-null    float64\n 2   sex         244 non-null    object \n 3   smoker      244 non-null    object \n 4   day         244 non-null    object \n 5   time        244 non-null    object \n 6   size        244 non-null    int64  \ndtypes: float64(2), int64(1), object(4)\nmemory usage: 13.5+ KB\n\n\n\n\n2. 개별 변수 처리\n(1) 가변수 처리할 컬럼을 정의\n\nd_cols = [\"sex\"]\n\n\ndefault \\(\\to\\) drop_first = False\ndrop_first = True \\(\\to\\) 첫 번째로 생성된 가변수를 삭제\nsex열은 사라지고 가변수 처리된 변수들만 생성됨\n\n(2) 가변수 처리\n\npd.get_dummies(tip,columns = d_cols).head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsmoker\nday\ntime\nsize\nsex_Female\nsex_Male\n\n\n\n\n0\n16.99\n1.01\nNo\nSun\nDinner\n2\nTrue\nFalse\n\n\n1\n10.34\n1.66\nNo\nSun\nDinner\n3\nFalse\nTrue\n\n\n2\n21.01\n3.50\nNo\nSun\nDinner\n3\nFalse\nTrue\n\n\n3\n23.68\n3.31\nNo\nSun\nDinner\n2\nFalse\nTrue\n\n\n4\n24.59\n3.61\nNo\nSun\nDinner\n4\nTrue\nFalse\n\n\n\n\n\n\n\n\n_df = pd.get_dummies(tip,columns = d_cols,drop_first= True)\n\n\n_df.plot(kind = \"box\", x= \"sex_Male\", y=\"tip\" , backend =\"plotly\",color = \"sex_Male\", width=400,height =400)\n\n\n                                                \n\n\n\n\n3. 여러 변수를 가변수 처리\n\nd_cols = [\"smoker\",\"day\",\"time\",\"sex\"]\n\n_df = pd.get_dummies(tip,columns = d_cols,drop_first=True)\n\n\n_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 244 entries, 0 to 243\nData columns (total 9 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   total_bill  244 non-null    float64\n 1   tip         244 non-null    float64\n 2   size        244 non-null    int64  \n 3   smoker_Yes  244 non-null    bool   \n 4   day_Sat     244 non-null    bool   \n 5   day_Sun     244 non-null    bool   \n 6   day_Thur    244 non-null    bool   \n 7   time_Lunch  244 non-null    bool   \n 8   sex_Male    244 non-null    bool   \ndtypes: bool(6), float64(2), int64(1)\nmemory usage: 7.3 KB\n\n\n\n_df.plot(kind = \"box\", x= \"smoker_Yes\", y=\"tip\" , backend =\"plotly\",color = \"sex_Male\", width=800,height =400,points=\"all\")"
  },
  {
    "objectID": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html",
    "href": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html",
    "title": "00. 데이터 분석 (1)",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.rcParams['font.family'] = 'Malgun Gothic'\nplt.rcParams['axes.unicode_minus'] = False"
  },
  {
    "objectID": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#기본-정보-조회",
    "href": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#기본-정보-조회",
    "title": "00. 데이터 분석 (1)",
    "section": "기본 정보 조회",
    "text": "기본 정보 조회\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 8 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   Fare         891 non-null    float64\n 7   Embarked     889 non-null    object \ndtypes: float64(2), int64(3), object(3)\nmemory usage: 55.8+ KB"
  },
  {
    "objectID": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#조건-조회",
    "href": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#조건-조회",
    "title": "00. 데이터 분석 (1)",
    "section": "조건 조회",
    "text": "조건 조회\n- 객실 등급(Pclass) 1등급, 나이(Age) 10살 이하 탑승객 조회\n\ndf.loc[ map(lambda x,y  : (x==1) & (y &lt;=10), df.Pclass, df.Age), : ]\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nFare\nEmbarked\n\n\n\n\n297\n298\n0\n1\nAllison, Miss. Helen Loraine\nfemale\n2.00\n151.5500\nSouthampton\n\n\n305\n306\n1\n1\nAllison, Master. Hudson Trevor\nmale\n0.92\n151.5500\nSouthampton\n\n\n445\n446\n1\n1\nDodge, Master. Washington\nmale\n4.00\n81.8583\nSouthampton\n\n\n\n\n\n\n\n- 객실 등급(Pclass)별 탑승객 수\n\ndf.Pclass.value_counts().reset_index()\n\n\n\n\n\n\n\n\nPclass\ncount\n\n\n\n\n0\n3\n491\n\n\n1\n1\n216\n\n\n2\n2\n184\n\n\n\n\n\n\n\n- 성별(Sex)이 남자인 탑승객과 여자인 탑승객의 나이를 각각 저장하시오.\n\n_m = df.loc[df.Sex==\"male\",[\"Sex\",\"Age\"]]\n_f = df.loc[df.Sex==\"female\",[\"Age\",\"Sex\"]]\n\n- 나이(Age)에 NaN이 아닌 탑승객을 조회하시오.\n\ndf.loc[df.Age ==True, :]\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nFare\nEmbarked\n\n\n\n\n164\n165\n0\n3\nPanula, Master. Eino Viljami\nmale\n1.0\n39.6875\nSouthampton\n\n\n172\n173\n1\n3\nJohnson, Miss. Eleanor Ileen\nfemale\n1.0\n11.1333\nSouthampton\n\n\n183\n184\n1\n2\nBecker, Master. Richard F\nmale\n1.0\n39.0000\nSouthampton\n\n\n381\n382\n1\n3\nNakid, Miss. Maria (\"Mary\")\nfemale\n1.0\n15.7417\nCherbourg\n\n\n386\n387\n0\n3\nGoodwin, Master. Sidney Leonard\nmale\n1.0\n46.9000\nSouthampton\n\n\n788\n789\n1\n3\nDean, Master. Bertram Vere\nmale\n1.0\n20.5750\nSouthampton\n\n\n827\n828\n1\n2\nMallet, Master. Andre\nmale\n1.0\n37.0042\nCherbourg\n\n\n\n\n\n\n\n- 아래의 데이터에서 날짜(Date)가, 1973-05-01, 1973-06-01, 1973-07-01.1973-08-01을 조회\n\npath = 'https://raw.githubusercontent.com/DA4BAM/dataset/master/air2.csv'\nair = pd.read_csv(path)\n\n\nd_l = [\"1973-05-01\", \"1973-06-01\", \"1973-07-01\",\"1973-08-01\"]\n\n\nair.loc[map(lambda x : x in d_l, air.Date),:]\n\n\n\n\n\n\n\n\nOzone\nSolar.R\nWind\nTemp\nDate\n\n\n\n\n0\n41\n190.0\n7.4\n67\n1973-05-01\n\n\n31\n34\n286.0\n8.6\n78\n1973-06-01\n\n\n61\n135\n269.0\n4.1\n84\n1973-07-01\n\n\n92\n39\n83.0\n6.9\n81\n1973-08-01\n\n\n\n\n\n\n\n- 오존 농도 10~20 사이의 데이터를 조회\n\nair.loc[air.Ozone.between(10,20),:].head()\n\n\n\n\n\n\n\n\nOzone\nSolar.R\nWind\nTemp\nDate\n\n\n\n\n2\n12\n149.0\n12.6\n74\n1973-05-03\n\n\n3\n18\n313.0\n11.5\n62\n1973-05-04\n\n\n4\n19\nNaN\n14.3\n56\n1973-05-05\n\n\n7\n19\n99.0\n13.8\n59\n1973-05-08\n\n\n9\n20\n194.0\n8.6\n69\n1973-05-10"
  },
  {
    "objectID": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#값-변경",
    "href": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#값-변경",
    "title": "00. 데이터 분석 (1)",
    "section": "값 변경",
    "text": "값 변경\n[titanic] 승선지역(Embarked)을 변경 * Southamton –&gt; S * Cherbourg –&gt; C * Queenstown –&gt; Q\n\ndf.Embarked\n\n0      Southampton\n1        Cherbourg\n2      Southampton\n3      Southampton\n4      Southampton\n          ...     \n886    Southampton\n887    Southampton\n888    Southampton\n889      Cherbourg\n890     Queenstown\nName: Embarked, Length: 891, dtype: object\n\n\n\ndf.Embarked=df[\"Embarked\"].map({\"Southampton\":\"S\",\n                   \"Cherbourg\" : \"C\",\n                   \"Queenstown\":\"Q\"})\n\n\ndf.Embarked.unique()\n\narray(['S', 'C', 'Q', nan], dtype=object)\n\n\n- [titanic] 운임(Fare)을 다음과 같이 변경\n\n&lt;= 30 ==&gt; ‘L’\n&lt;= 100 ==&gt; ‘M’\n100 &lt; ==&gt; ‘H’\n\n\nbins = [-np.Inf, 30, 100, np.Inf]\n\n\nlabels = list(\"LMH\")\n\n\ndf.Fare = pd.cut(df.Fare,bins = bins, labels= labels)\n\n\ndf.Fare.unique()\n\n['L', 'M', 'H']\nCategories (3, object): ['L' &lt; 'M' &lt; 'H']\n\n\n\nnp.where(\\(\\star\\star\\star\\))\n- [titanic] 성별(Sex)을 다음과 같이 변경\n\nfemale ==&gt; 0\nmale ==&gt; 1\n\n\ndf.Sex = np.where(df.Sex==\"male\",1,0).tolist()\n\n\ndf.head()\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nFare\nEmbarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\n1\n22.0\nL\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\n0\n38.0\nM\nC\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\n0\n26.0\nL\nS\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\n0\n35.0\nM\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\n1\n35.0\nL\nS"
  },
  {
    "objectID": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#데이터-로드",
    "href": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#데이터-로드",
    "title": "00. 데이터 분석 (1)",
    "section": "데이터 로드",
    "text": "데이터 로드\n\npath = 'https://raw.githubusercontent.com/DA4BAM/dataset/master/airquality_simple2.csv'\ndata = pd.read_csv(path)\ndata['Date'] = pd.to_datetime(data['Date'])\ndata.dropna(axis = 0, inplace = True)\ndata.head()\n\n\n\n\n\n\n\n\nOzone\nSolar.R\nWind\nTemp\nDate\n\n\n\n\n0\n34.0\n286.0\n8.6\n78.0\n1973-06-01\n\n\n1\n29.0\n287.0\n9.7\n74.0\n1973-06-02\n\n\n2\n18.0\n242.0\n16.1\n67.0\n1973-06-03\n\n\n3\n48.0\n186.0\n9.2\n84.0\n1973-06-04\n\n\n4\n49.0\n220.0\n8.6\n85.0\n1973-06-05"
  },
  {
    "objectID": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#기본-차트-그리기-matplotlib",
    "href": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#기본-차트-그리기-matplotlib",
    "title": "00. 데이터 분석 (1)",
    "section": "기본 차트 그리기 matplotlib",
    "text": "기본 차트 그리기 matplotlib\n\n기본\n\ndata.plot(x=\"Date\",y=\"Temp\",figsize=(10,2))\n\n&lt;Axes: xlabel='Date'&gt;\n\n\n\n\n\n\ndata.plot(x=\"Date\", y= \"Ozone\",figsize=(10,3),\n            xlabel =\"Date\",ylabel=\"Ozone\",title = \"Daily Airquality\")\n\n&lt;Axes: title={'center': 'Daily Airquality'}, xlabel='Date', ylabel='Ozone'&gt;\n\n\n\n\n\n\ndata.plot(x=\"Date\", y= \"Ozone\",figsize=(10,3),\n            xlabel =\"Date\",ylabel=\"Ozone\",title = \"Daily Airquality\",\n             color = \"green\",marker=\"o\",alpha=0.3)\n\n&lt;Axes: title={'center': 'Daily Airquality'}, xlabel='Date', ylabel='Ozone'&gt;\n\n\n\n\n\n\n\n그래프 겹처그리기\n\nplt.plot(data.Date, data.Temp,\"--r\")\nplt.plot(data.Date, data.Ozone,\"--g\")\nplt.legend([\"Temp\",\"Ozone\"],loc=\"upper right\")\nplt.title(\"Temp, Ozone\")\nplt.grid()\nplt.xlabel(\"Date\")\nplt.ylabel(\"value\")\nplt.xticks(rotation=45)\n\n(array([1247., 1251., 1255., 1259., 1263., 1267., 1271., 1275., 1277.]),\n [Text(1247.0, 0, '1973-06-01'),\n  Text(1251.0, 0, '1973-06-05'),\n  Text(1255.0, 0, '1973-06-09'),\n  Text(1259.0, 0, '1973-06-13'),\n  Text(1263.0, 0, '1973-06-17'),\n  Text(1267.0, 0, '1973-06-21'),\n  Text(1271.0, 0, '1973-06-25'),\n  Text(1275.0, 0, '1973-06-29'),\n  Text(1277.0, 0, '1973-07-01')])\n\n\n\n\n\n\n\n그래프 범위\n\ndata.plot(x=\"Date\",y=\"Ozone\",\n          ylim=(min(data.Ozone)-1,max(data.Ozone)+1),\n          grid=True,ylabel=\"Ozone\",figsize=(4,4))\n\n&lt;Axes: xlabel='Date', ylabel='Ozone'&gt;\n\n\n\n\n\n\n\n다중 그래프 그리기\n- 방법 1 : 내가 쓰던 방식\n\nfig,axes =plt.subplots(1,4,figsize=(12,4))\nfig.autofmt_xdate(rotation=45)\nl1 = data.columns\ncolor = [\"red\",\"green\",\"blue\",\"orange\"]\nfor i in range(4) :\n    axes[i].plot(data[\"Date\"],data[l1[i]],color=color[i],linestyle=\"dashed\",alpha=0.4)\n    axes[i].set_title(l1[i])\n\nfig.tight_layout()\n\n\n\n\n\nplt.figure(figsize = (12,4))\nplt.subplot(1,3,1)\nplt.plot('Date', 'Temp', data = data)\nplt.title('Temp')\nplt.xticks(rotation = 40)\nplt.grid()\n\nplt.subplot(1,3,2)\nplt.plot('Date', 'Wind', data = data)\nplt.title('Wind')\nplt.xticks(rotation = 40)\nplt.grid()\n\nplt.subplot(1,3,3)\nplt.plot('Date', 'Ozone', data = data)\nplt.title('Ozone')\nplt.xticks(rotation = 40)\nplt.grid()\n\nplt.tight_layout() # 그래프간 간격을 적절히 맞추기\nplt.show()"
  },
  {
    "objectID": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#데이터-로드-1",
    "href": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#데이터-로드-1",
    "title": "00. 데이터 분석 (1)",
    "section": "데이터 로드",
    "text": "데이터 로드\n\npath1 = 'https://raw.githubusercontent.com/DA4BAM/dataset/master/titanic_simple.csv'\ntitanic = pd.read_csv(path1)\npath2 = 'https://raw.githubusercontent.com/DA4BAM/dataset/master/air2.csv'\nair = pd.read_csv(path2)"
  },
  {
    "objectID": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#분포-시각화-hist",
    "href": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#분포-시각화-hist",
    "title": "00. 데이터 분석 (1)",
    "section": "분포 시각화 (hist)",
    "text": "분포 시각화 (hist)\n\nbasic\n\nplt.hist(titanic.Fare, bins = 5, edgecolor = 'gray')\nplt.xlabel('Fare')\nplt.ylabel('Frequency')\nplt.show()\n\n\n\n\n\n\n구간개수 조절\n\nplt.hist(titanic.Fare, bins = 30, edgecolor = 'gray')\nplt.xlabel('Fare')\nplt.ylabel('Frequency')\nplt.show()\n\n\n\n\n\nfig, axes = plt.subplots(1,2, figsize= (10,4))\n\n(ax1,ax2)= axes\nax1.hist(titanic.Fare,bins = 5, edgecolor = 'gray')\nax1.set_title(\"hist of Fare (bins =5)\")\nax2.hist(titanic.Fare,bins = 30, edgecolor = 'gray')\nax2.set_title(\"hist of Fare (bins =30)\")\n\nText(0.5, 1.0, 'hist of Fare (bins =30)')\n\n\n\n\n\n\n\nseaborn\n\nfig, axes = plt.subplots(1,2, figsize= (10,4))\n\n(ax1,ax2)= axes\nsns.histplot(x=titanic.Fare,ax=ax1, bins = 5)\nsns.histplot(x=titanic.Fare,ax=ax2, bins = 30)\nax1.set_title(\"hist of Fare (bins =5)\")\nax2.set_title(\"hist of Fare (bins =30)\")\n\nText(0.5, 1.0, 'hist of Fare (bins =30)')\n\n\n\n\n\n\n\n\n밀도함수 그래프 (kde plot)\n- 히스토그램의 구간(bin)에 따라 그래프의 모양이 달라진다.\n\n밀도함수 그래프는 막대의 너비를 가정하지 않고 모든 점에서 데이터의 밀도(확률)을 추정\n이는 커널 밀도 방식을 사용하기 때문에 모양이 달라져 발생할 수 있는 혼동을 방지할 수 있다.\n\n\n#sns.histplot(titanic[\"Fare\"])\nsns.kdeplot(titanic[\"Fare\"])\n\n&lt;Axes: xlabel='Fare', ylabel='Density'&gt;\n\n\n\n\n\n\ntitanic.Fare.describe()\n\ncount    891.000000\nmean      32.204208\nstd       49.693429\nmin        0.000000\n25%        7.910400\n50%       14.454200\n75%       31.000000\nmax      512.329200\nName: Fare, dtype: float64\n\n\n- 위 그래프는 0보다 작은 값도 표현하고 있다.\n\n원 데이터의 0보다 작은값은 없지만 컴퓨터에서 확률을 추정하려고 하다보니 위 같이 표현된 것 뿐이다.\n\n- 아래와 같이 히스토그램과 같이 그릴 수도 있다.\n\nsns.histplot(x=titanic.Age,kde=True)\n\n&lt;Axes: xlabel='Age', ylabel='Count'&gt;\n\n\n\n\n\n\n\nboxplot\n- 주의사항 : Nan값이 있으면 그려지지 않는다!\n1 matplot\n\ntitanic.plot(kind=\"box\", y=\"Age\")\n\n&lt;Axes: &gt;\n\n\n\n\n\n\ntitanic.plot(kind=\"box\", y=\"Age\",vert=False)\n\n&lt;Axes: &gt;\n\n\n\n\n\n2 seaborn\n\nfig, axes = plt.subplots(1,2,figsize=(8,4))\nax1,ax2=axes\nsns.boxplot(x = titanic['Age'],ax=ax1)\nsns.boxplot(y = titanic['Age'],ax=ax2)\n\n&lt;Axes: ylabel='Age'&gt;"
  },
  {
    "objectID": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#import-1",
    "href": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#import-1",
    "title": "00. 데이터 분석 (1)",
    "section": "import",
    "text": "import\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom ISLP import load_data\nimport seaborn as sns\n\n\ndata = load_data(\"Boston\")\n\n\ndata.head()\n\n\n\n\n\n\n\n\ncrim\nzn\nindus\nchas\nnox\nrm\nage\ndis\nrad\ntax\nptratio\nlstat\nmedv\n\n\n\n\n0\n0.00632\n18.0\n2.31\n0\n0.538\n6.575\n65.2\n4.0900\n1\n296\n15.3\n4.98\n24.0\n\n\n1\n0.02731\n0.0\n7.07\n0\n0.469\n6.421\n78.9\n4.9671\n2\n242\n17.8\n9.14\n21.6\n\n\n2\n0.02729\n0.0\n7.07\n0\n0.469\n7.185\n61.1\n4.9671\n2\n242\n17.8\n4.03\n34.7\n\n\n3\n0.03237\n0.0\n2.18\n0\n0.458\n6.998\n45.8\n6.0622\n3\n222\n18.7\n2.94\n33.4\n\n\n4\n0.06905\n0.0\n2.18\n0\n0.458\n7.147\n54.2\n6.0622\n3\n222\n18.7\n5.33\n36.2\n\n\n\n\n\n\n\n변수설명\n\n\nmedv : 1978 보스턴 주택 가격, 506개 타운의 주택 가격 중앙값 (단위 1,000 달러) &lt;== Target\n\n\n\ncrim 범죄율\nzn 25,000 평방피트를 초과 거주지역 비율\nindus 비소매상업지역 면적 비율\nchas 찰스강변 위치(범주 : 강변1, 아니면 0)\nnox 일산화질소 농도\nrm 주택당 방 수\nage 1940년 이전에 건축된 주택의 비율\ndis 직업센터의 거리\nrad 방사형 고속도로까지의 거리\ntax 재산세율\nptratio 학생/교사 비율\nlstat 인구 중 하위 계층 비율"
  },
  {
    "objectID": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#주어진-변수에-대한-hist-boxplot을-그리는-함수-작성",
    "href": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#주어진-변수에-대한-hist-boxplot을-그리는-함수-작성",
    "title": "00. 데이터 분석 (1)",
    "section": "주어진 변수에 대한 hist, boxplot을 그리는 함수 작성",
    "text": "주어진 변수에 대한 hist, boxplot을 그리는 함수 작성\n\ndef f(data,var,bins=30) : \n    fig,axes = plt.subplots(1,2, figsize=(8,3))\n    ax1,ax2 = axes\n    \n    sns.histplot(x=data[var],kde = True,ax=ax1,bins=bins)\n    ax1.set_title(f\"hist of {var}\")\n    sns.boxplot(x=data[var],ax=ax2)\n    ax2.set_title(f\"boxplot of {var}\")\n\n\nmedv(집값)\n\nf(data,\"medv\")\n\n\n\n\n\n정규분포와 유사한 형태이나 medv=50에서 이상치로 보이는 수치들이 보인다.\n대부분에 데이터들이 중앙에 모여있다.\n\n\n\ncrim(범죄율)\n\nf(data,\"crim\",bins=10)\n\n\n\n\n\n범죄율의 분포를 살펴보니 최솟값이 0.6% 이며 최댓값은 89.97%이다.\n대부분은 범죄율이 굉장히 낮다.\n박스플랏의 꼬리가길게 늘어짐\n로그변환 등을 고려해봐도 괜찮을것 같다.\n\n\n\nlstat(하위계층 비율)\n\nf(data,\"lstat\",bins=50)\n\n\n\n\n\n하위계층의 정의가 뭔지.. 궁금해진다.\n하위계층의 비율이 대부분 10 ~ 20% 구간에 몰려있다.\n\n\n\nptratio(교사1명당 학생수)\n\nf(data,\"ptratio\")\n\n\n\n\n\n교육환경이 좋은 동네는 교사 1명당 학생수가 높나?? \\(\\to\\) 이런걸 보고싶을 때가 있으니 역시 다차원 그래프 표현이 필요한 것 같다.\n\n\n\ntax(재산세)\n\nf(data,\"tax\")\n\n\n\n\n\n제산세가 굉장히 높은 구간이 있는데 부자동네인가? 라는 생각을 가지게 된다.\n또한, 제산세가 높은 구간의 비중이 가장 높은데 재산세에 대한 기준이 궁금해진다.\n분포를 살펴본 결과 2개의 분포가 보인다. \\(\\to\\) 두 개의 그룹으로 나누어서 살펴보아야 한다."
  },
  {
    "objectID": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#데이터-전처리",
    "href": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#데이터-전처리",
    "title": "00. 데이터 분석 (1)",
    "section": "데이터 전처리",
    "text": "데이터 전처리\n\ne_table = titanic.Embarked.\\\n            value_counts(normalize=True).reset_index()\ne_table\n\n\n\n\n\n\n\n\nEmbarked\nproportion\n\n\n\n\n0\nSouthampton\n0.724409\n\n\n1\nCherbourg\n0.188976\n\n\n2\nQueenstown\n0.086614\n\n\n\n\n\n\n\n- 생존률이 매우 낮다.\n\n고민 1 : 그럼 구명보트에 가까운사람, 1등석에 탄 사람들만 살았나?? (이런 상황에 대한 도메인 지식이 필요할 때가 있다….)\n\n\ntitanic.Survived.\\\n            value_counts(normalize=True).\\\n                    reset_index()\n\n\n\n\n\n\n\n\nSurvived\nproportion\n\n\n\n\n0\n0\n0.616162\n\n\n1\n1\n0.383838"
  },
  {
    "objectID": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#시각화-1.-bar-chart",
    "href": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#시각화-1.-bar-chart",
    "title": "00. 데이터 분석 (1)",
    "section": "시각화 1. bar chart",
    "text": "시각화 1. bar chart\n\nfig,axe = plt.subplots(1,2,figsize=(8,3))\nax1,ax2 =axe\nsns.countplot(y= titanic.Pclass,ax=ax1)\nax1.set_title(\"count of Pclass\")\nsns.countplot(y= titanic.Embarked,ax=ax2)\nax2.set_title(\"count of Embarked\")\nfig.tight_layout()"
  },
  {
    "objectID": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#시각화-2.-pie-chart",
    "href": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#시각화-2.-pie-chart",
    "title": "00. 데이터 분석 (1)",
    "section": "시각화 2. Pie chart",
    "text": "시각화 2. Pie chart\n- 범주형 비율을 비교할 때 사용\n\n사실 난 그렇게 좋아하지 않음… \\(\\to\\) 비율로 먼가 어떤 현상을 설명할 때 직관적으로 와닿지가 않는다…\n\n\ntitanic.Pclass.\\\n        value_counts()\n\nPclass\n3    491\n1    216\n2    184\nName: count, dtype: int64\n\n\n- 기본\n\ntitanic.Pclass.\\\n        value_counts().\\\n                plot(kind=\"pie\",y=\"count\",\n                     autopct= \"%.2f%%\")\n\n&lt;Axes: ylabel='count'&gt;\n\n\n\n\n\n- 시작점과 방향 지정\n\ntitanic.Pclass.\\\n        value_counts().\\\n                plot(kind=\"pie\",y=\"count\",\n                     autopct= \"%.2f%%\", startangle=90,\n                    counterclock = False)\n\n&lt;Axes: ylabel='count'&gt;"
  },
  {
    "objectID": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#소감",
    "href": "posts/DX/02. 데이터 분석/2023-08-28-00. 데이터 분석 (1).html#소감",
    "title": "00. 데이터 분석 (1)",
    "section": "소감",
    "text": "소감\n\n확실히 나는 데이터를 보고 인사이트를 도출하는 능력이 떨어진다.\n비즈니즈적 의사결정을 위해선 많은 도메인에서의 지식이 필요한 것 같다….\n다른 에이블러님들이 인사이트를 도출하시는 것들을 보고 많이 반성했다….\n데이터를 잘 다루는 것은 누구나 할 수 있는거라고 생각하나 인사이트를 도출하기 위해선 평소에 다양한 분야에 관심을 가져야 할 필요성을 느꼈다.\n부족한점을 알고 있었지만, 오늘 더 뼈저리게 느낀것 같다…"
  },
  {
    "objectID": "posts/DX/2023-08-19-01. Plotly test.html",
    "href": "posts/DX/2023-08-19-01. Plotly test.html",
    "title": "01. Plotly test",
    "section": "",
    "text": "import\n\nimport plotly.express as ex\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"plotly_mimetype+notebook_connected\"\nimport numpy as np\nimport pandas as pd\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/kalilurrahman/datasets/main/mobilephonemktshare2020.csv')\ndf.head()\n\n\n\n\n\n\n\n\nDate\nSamsung\nApple\nHuawei\nXiaomi\nOppo\nMobicel\nMotorola\nLG\nOthers\nRealme\nGoogle\nNokia\nLenovo\nOnePlus\nSony\nAsus\n\n\n\n\n0\n2019-10\n31.49\n22.09\n10.02\n7.79\n4.10\n3.15\n2.41\n2.40\n9.51\n0.54\n2.35\n0.95\n0.96\n0.70\n0.84\n0.74\n\n\n1\n2019-11\n31.36\n22.90\n10.18\n8.16\n4.42\n3.41\n2.40\n2.40\n9.10\n0.78\n0.66\n0.97\n0.97\n0.73\n0.83\n0.75\n\n\n2\n2019-12\n31.37\n24.79\n9.95\n7.73\n4.23\n3.19\n2.50\n2.54\n8.13\n0.84\n0.75\n0.90\n0.87\n0.74\n0.77\n0.70\n\n\n3\n2020-01\n31.29\n24.76\n10.61\n8.10\n4.25\n3.02\n2.42\n2.40\n7.55\n0.88\n0.69\n0.88\n0.86\n0.79\n0.80\n0.69\n\n\n4\n2020-02\n30.91\n25.89\n10.98\n7.80\n4.31\n2.89\n2.36\n2.34\n7.06\n0.89\n0.70\n0.81\n0.77\n0.78\n0.80\n0.69\n\n\n\n\n\n\n\n\ndf.set_index(\"Date\").diff().\\\n  dropna().boxplot(backend = \"plotly\")"
  }
]